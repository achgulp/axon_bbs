Axon BBS - Product Requirements Document
Version: 9.4.0 (Architectural Resilience & Administration)
Date: August 17, 2025

1. Overview
Axon BBS is a modern, anonymous bulletin board system (BBS) built on a private, federated network of trusted nodes. This version marks a significant architectural shift by replacing the external libtorrent library with a custom, native P2P data synchronization protocol named BitSync. The BitSync protocol is designed for simplicity and robustness, eliminating external dependencies and tailoring the data transfer mechanism specifically for Axon's needs. It retains the core principles of trackerless, pull-based synchronization over Tor but replaces magnet links and the BitTorrent protocol with a streamlined, chunk-based file transfer system using standard HTTPS requests.

2. User Roles & Stories
As a User...
I want to generate a new identity keypair or import an existing one so I can control my account.

I want to unlock my identity with my password once per session so I don't have to re-enter it for every action.

I want to send and receive end-to-end encrypted private messages.

I want to post on public message boards and read posts from others.

I want to choose a nickname associated with my public key, which is signed and verifiable across the network.

I want a personal ignore list to hide all content from specific users based on their public keys.

I want to receive notifications when my content is about to expire so I can request an extension.

I want to request an extension on the lifespan of my content before it is deleted.

As a Moderator...
I want to be able to temporarily or permanently ban users from the local BBS instance by their public key.

I want to review and approve or deny user requests for extending the lifespan of their content.

I want to be able to unpin any user's content to enforce content policies, except for content pinned by an Admin.

I want my actions (like deleting illicit content) to be broadcast to peer instances so they can also take action, protecting the whole network.

As a SysOp (Admin)...
I want all the powers of a Moderator.

I want to be able to override pinning rules and unpin any content on the server, including content pinned by moderators.

I want to configure and manage a whitelist of trusted federated BBS peers via their public keys and .onion URLs.

I want to explicitly mark which peers are trusted for syncing via an is_trusted_peer checkbox.

I want to set the default time durations for how long content is stored on my BBS.

I want the ability to re-key existing messages to grant access to newly added trusted peers without needing to re-create the original content.

3. The BitSync Protocol
BitSync is the P2P layer for Axon BBS. It is a trackerless, web-seeded protocol designed to synchronize encrypted content between trusted peers entirely over Tor.

Content Hash: Each piece of content is identified by a unique SHA256 hash of its raw data.

Content Manifest: For each new piece of content, the originating node generates a small JSON object called a Manifest containing the content hash, chunk hashes, and encryption details.

Swarming and Redundancy: A node can poll all of its trusted peers to see who has a piece of content, allowing it to download different chunks from different peers in parallel.

3.1 Sync Service Resilience
The background SyncService has been re-architected to be highly resilient to the network instability inherent to Tor.

Proactive Resumption: The service begins each sync cycle by first scanning its own database for any incomplete content (e.g., a file with missing chunks). If any are found, it automatically schedules them for download. This ensures that downloads will always resume after a server restart.

Grace Period: When polling peers for new content, the service asks for all content created since 10 minutes before the last successful sync. This overlapping window ensures that if a manifest was missed due to a temporary network error, it will be re-discovered and synced in the next cycle.

Error Handling: The service's internal "sync clock" (last_synced_at) is now updated after every poll attempt, regardless of whether the network connection succeeded or failed. This prevents the service from getting stuck in a permanent failure loop caused by a single Tor timeout.

Tunable Throttling: The service now throttles its network activity to avoid overwhelming the Tor network. It downloads a configurable number of files concurrently (defaulting to 3), and for each of those files, it downloads a maximum of 4 chunks at a time.

4. Full Project File Structure (Updated)
axon_bbs/
├── axon_project/
│   ├── settings.py
│   └── urls.py
├── core/
│   ├── management/
│   │   ├── __init__.py
│   │   └── commands/
│   │       ├── __init__.py
│   │       ├── check_local_content.py
│   │       ├── cleanup_orphaned_files.py
│   │       ├── compare_sync_status.py
│   │       ├── diagnose_sync_content.py
│   │       ├── reset_peer_sync_time.py
│   │       └── update_peer_key.py
│   ├── migrations/
│   ├── services/
│   │   ├── bitsync_service.py
│   │   ├── content_validator.py
│   │   ├── encryption_utils.py
│   │   ├── identity_service.py
│   │   ├── service_manager.py
│   │   ├── sync_service.py
│   │   └── tor_service.py
│   ├── admin.py
│   ├── apps.py
│   └── models.py
├── api/
│   ├── permissions.py
│   ├── serializers.py
│   ├── urls.py
│   └── views.py
├── handlers/
│   ├── audio_modem_handler.py
│   └── meshtastic_handler.py
├── frontend/
│   ├── public/
│   ├── src/
│   └── package.json
├── data/
│   └── axon_bbs.sqlite3
├── logs/
│   └── bbs.log
├── manage.py
└── requirements.txt

