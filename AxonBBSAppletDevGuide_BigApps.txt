Axon BBS - Applet Development Guide for Large Applications
Version: 10.27.0
Last Updated: 2025-10-15

This guide explains how to develop and deploy large, complex applets (like games) on Axon BBS using the hybrid architecture and automated deployment tools.

The Core Problem: The Single-File Size Limit
When developing large applets with substantial assets (models, textures, sounds), embedding everything in a single JavaScript file hits practical limitations:

V8 Engine (Chrome/Node.js) String Limit: The V8 engine has a maximum string size, which on a 64-bit system is around 1GB. While our file is much smaller, embedding huge Base64 strings pushes us closer to memory allocation issues.

Browser Memory Cap: Most browsers will crash or become unresponsive if a single tab tries to allocate too much memory. A 5MB file of pure code is manageable, but a file containing 50-100MB of Base64-encoded assets will easily expand to consume several hundred megabytes of RAM once parsed and loaded, especially on mobile devices.

Parsing and Execution Time: Even if the browser can load the file, it must parse and execute that entire script before anything can happen. A script that large will cause a significant, multi-second "white screen" delay, creating a terrible user experience.

My Own Context Limit: As you correctly deduced, I am hitting a processing limit when trying to generate and hold a single file of that immense size in memory. This is why it was being silently truncated, resulting in the small, broken files.

The "all-in-one" approach is a dead end for a game this complex. It was my mistake to continue trying it.

The Correct Solution: A Hybrid Applet Architecture
The Axon BBS architecture itself provides a more elegant solution, which I should have used from the start. Based on the AxonBBSAppletDevGuide_2.0.txt, applets can fetch attachments from the BBS using the bbs.getAttachmentBlob() API call.

This allows us to create a "packaged" applet. It's still a single .js file for execution, but it loads its heavy assets from the BBS itself.

Here is the new, robust architecture:

The Applet (hexgl.js): This will be a much smaller (around 1-2 MB) JavaScript file. It will contain:

All game logic and the Three.js library (all the code).

The HTML and CSS for the UI.

A new asset loader that fetches its data from a separate asset package.

Only tiny UI assets (like the noise background) will be embedded as Base64.

The Asset Package (hexgl_assets.zip): You will upload a single zip file containing all the game's textures, models, and sounds to the Axon BBS as a file attachment.

How It Will Work:
The hexgl.js applet starts.

It uses the bbs.getAttachmentBlob(HASH_OF_ASSET_ZIP) function to request the hexgl_assets.zip file from the BBS.

Once downloaded, it will use a JavaScript library (like JSZip, which I will now include in the applet) to unzip the package in the browser's memory.

It will then read each asset from the in-memory zip file and provide it to the game engine as it's needed.

The game starts.

This approach solves all our problems:

The hexgl.js applet is small enough for me to generate correctly and for browsers to load quickly.

It respects the "no external network calls" rule because it only communicates with the host BBS via the provided API.

It's a standard and highly efficient way to handle large game assets in a web environment.

Automated Deployment Workflow

The post_applet_update management command streamlines the entire deployment process:

Command Syntax:
python manage.py post_applet_update <applet_path> --name "Applet Name" --description "Description" [--username "Achduke7"] [--board "Applet Library"]

What It Does:
1. Reads the applet JavaScript file
2. Calculates SHA-256 hash for integrity verification
3. Creates a proper BitSync manifest with encrypted content chunks
4. Creates a FileAttachment with the encrypted manifest
5. Posts a formatted message to the "Applet Library" board with:
   - Applet name and description
   - Installation instructions
   - Manifest JSON with dependencies
   - File hash and FileAttachment ID
6. Automatically updates the applet's code_manifest field in the database

Example Usage:
source venv/bin/activate && python manage.py post_applet_update frontend/src/applets/hexgl.js --name "HexGL" --description "Fixed track scaling and camera positioning for better visibility"

Benefits:
- Ensures proper BitSync manifests compatible with federation
- Automatic versioning and traceability
- One-command deployment from development to production
- No manual admin console steps required
- Immediate availability to federated peers

The check_applet_manifest command provides diagnostic capabilities for troubleshooting manifest issues.








