# Generated by Django 5.0.6 on 2025-09-25 16:18

import core.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='TrustedInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('web_ui_onion_url', models.URLField(blank=True, max_length=255, null=True)),
                ('pubkey', models.TextField(blank=True, null=True)),
                ('encrypted_private_key', models.TextField(blank=True, null=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('last_synced_at', models.DateTimeField(blank=True, null=True)),
                ('is_trusted_peer', models.BooleanField(default=False, help_text='Check if this is a trusted peer (uncheck for local).')),
            ],
        ),
        migrations.CreateModel(
            name='ValidFileType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mime_type', models.CharField(help_text="e.g., 'image/jpeg'", max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('is_enabled', models.BooleanField(default=True, help_text='Disable to temporarily disallow this file type.')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('access_level', models.PositiveIntegerField(default=10, help_text="User's security access level.")),
                ('is_banned', models.BooleanField(default=False, help_text='Designates if the user is banned from the local instance.')),
                ('pubkey', models.TextField(blank=True, help_text="User's public key (PEM).", null=True)),
                ('nickname', models.CharField(blank=True, help_text="User's chosen nickname.", max_length=50, null=True, unique=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('is_agent', models.BooleanField(default=False, help_text='Designates this user as an automated agent.')),
                ('is_moderator', models.BooleanField(default=False, help_text='Grants moderator permissions.')),
                ('karma', models.IntegerField(default=10, help_text="User's reputation score.")),
                ('last_moderated_at', models.DateTimeField(blank=True, help_text='Timestamp of the last moderation action on this user.', null=True)),
                ('timezone', models.CharField(blank=True, help_text="User's preferred display timezone (IANA name).", max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='core_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FileAttachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(default=core.models.get_default_expires_at, null=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('filename', models.CharField(max_length=255)),
                ('content_type', models.CharField(max_length=100)),
                ('size', models.PositiveIntegerField()),
                ('metadata_manifest', models.JSONField(help_text='BitSync manifest for P2P file distribution.')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authored_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('pinned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pinned_%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
