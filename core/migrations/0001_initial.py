# Generated by Django 5.0.6 on 2025-09-18 23:54

import core.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pubkey', models.TextField(unique=True)),
                ('nickname', models.CharField(max_length=50, unique=True)),
                ('verified', models.BooleanField(default=False)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'aliases',
            },
        ),
        migrations.CreateModel(
            name='Applet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The unique name of the applet.', max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('author_pubkey', models.TextField(blank=True, help_text="Public key of the applet's author.")),
                ('code_manifest', models.JSONField(help_text="BitSync manifest for the applet's code bundle.")),
                ('is_local', models.BooleanField(default=False, help_text="If checked, this applet's code will not be swarmed to peers.")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_debug_mode', models.BooleanField(default=False, help_text='Enable to show the debug console when this applet is run.')),
            ],
        ),
        migrations.CreateModel(
            name='AppletCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Applet Categories',
            },
        ),
        migrations.CreateModel(
            name='BannedPubkey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pubkey', models.TextField(unique=True)),
                ('is_temporary', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField(blank=True, help_text='If the ban is temporary, this is when it expires.', null=True)),
                ('federated_action_id', models.UUIDField(blank=True, help_text='The ID of the federated action that created this ban.', null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FederatedAction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('ban_pubkey', 'Ban Pubkey'), ('unpin_content', 'Unpin Content'), ('update_profile', 'Update Profile'), ('DELETE_CONTENT', 'Delete Content')], max_length=50)),
                ('pubkey_target', models.TextField(blank=True, help_text='The pubkey targeted by the action (e.g., for a ban).', null=True)),
                ('content_hash_target', models.CharField(blank=True, help_text='The content_hash of the item being acted upon.', max_length=64, null=True)),
                ('action_details', models.JSONField(default=dict, help_text="Additional details, e.g., {'is_temporary': true, 'duration_hours': 72}")),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('status', models.CharField(choices=[('approved', 'Approved'), ('pending_approval', 'Pending Approval'), ('denied', 'Denied')], default='approved', max_length=20)),
                ('is_logged', models.BooleanField(default=False, help_text='True if this action has been logged by the moderation agent.')),
            ],
        ),
        migrations.CreateModel(
            name='MessageBoard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('required_access_level', models.PositiveIntegerField(default=10)),
            ],
        ),
        migrations.CreateModel(
            name='TrustedInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('web_ui_onion_url', models.URLField(blank=True, max_length=255, null=True)),
                ('pubkey', models.TextField(blank=True, null=True)),
                ('encrypted_private_key', models.TextField(blank=True, null=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('last_synced_at', models.DateTimeField(blank=True, null=True)),
                ('is_trusted_peer', models.BooleanField(default=False, help_text='Check if this is a trusted peer (uncheck for local).')),
            ],
        ),
        migrations.CreateModel(
            name='ValidFileType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mime_type', models.CharField(help_text="e.g., 'image/jpeg'", max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('is_enabled', models.BooleanField(default=True, help_text='Disable to temporarily disallow this file type.')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('access_level', models.PositiveIntegerField(default=10, help_text="User's security access level.")),
                ('is_banned', models.BooleanField(default=False, help_text='Designates if the user is banned from the local instance.')),
                ('pubkey', models.TextField(blank=True, help_text="User's public key (PEM).", null=True)),
                ('nickname', models.CharField(blank=True, help_text="User's chosen nickname.", max_length=50, null=True, unique=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('is_agent', models.BooleanField(default=False, help_text='Designates this user as an automated agent.')),
                ('is_moderator', models.BooleanField(default=False, help_text='Grants moderator permissions.')),
                ('karma', models.IntegerField(default=10, help_text="User's reputation score.")),
                ('last_moderated_at', models.DateTimeField(blank=True, help_text='Timestamp of the last moderation action on this user.', null=True)),
                ('timezone', models.CharField(blank=True, help_text="User's preferred display timezone (IANA name).", max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='core_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AppletSharedState',
            fields=[
                ('applet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='shared_state', serialize=False, to='core.applet')),
                ('state_data', models.JSONField(default=dict)),
                ('version', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='applet',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.appletcategory'),
        ),
        migrations.CreateModel(
            name='FileAttachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(default=core.models.get_default_expires_at, null=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('filename', models.CharField(max_length=255)),
                ('content_type', models.CharField(max_length=100)),
                ('size', models.PositiveIntegerField()),
                ('metadata_manifest', models.JSONField(help_text='BitSync manifest for P2P file distribution.')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authored_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('pinned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pinned_%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(default=core.models.get_default_expires_at, null=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('pubkey', models.TextField(blank=True, null=True)),
                ('metadata_manifest', models.JSONField(blank=True, help_text='BitSync manifest for P2P content distribution.', null=True)),
                ('agent_status', models.CharField(choices=[('pending', 'Pending'), ('processed', 'Processed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('last_moderated_at', models.DateTimeField(blank=True, help_text='Timestamp of the last moderation action on this message.', null=True)),
                ('attachments', models.ManyToManyField(blank=True, related_name='messages', to='core.fileattachment')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authored_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('pinned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pinned_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.messageboard')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='applet',
            name='event_board',
            field=models.ForeignKey(blank=True, help_text='The message board this applet will use for its public events.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.messageboard'),
        ),
        migrations.CreateModel(
            name='ModerationReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(blank=True, help_text='Reason for the report.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('is_logged', models.BooleanField(default=False, help_text="True if this report's outcome has been logged.")),
                ('reported_message', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports', to='core.message')),
                ('reporting_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_filed', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_reviewed', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PrivateMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(default=core.models.get_default_expires_at, null=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('sender_pubkey', models.TextField(blank=True, null=True)),
                ('metadata_manifest', models.JSONField(blank=True, help_text='BitSync manifest for BBS-level metadata.', null=True)),
                ('e2e_encrypted_content', models.TextField(blank=True, help_text='The end-to-end encrypted message body and subject.', null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authored_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('pinned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pinned_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_mail', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AppletData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_manifest', models.JSONField(help_text="BitSync manifest for the user's applet data.")),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('applet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_instances', to='core.applet')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applet_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('applet', 'owner')},
            },
        ),
        migrations.CreateModel(
            name='ContentExtensionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_id', models.UUIDField()),
                ('content_type', models.CharField(max_length=50)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=10)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_extensions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('content_id', 'user')},
            },
        ),
        migrations.CreateModel(
            name='HighScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_pubkey', models.TextField(db_index=True)),
                ('owner_nickname', models.CharField(max_length=50)),
                ('score', models.IntegerField(db_index=True)),
                ('wins', models.IntegerField(blank=True, null=True)),
                ('losses', models.IntegerField(blank=True, null=True)),
                ('kills', models.IntegerField(blank=True, null=True)),
                ('deaths', models.IntegerField(blank=True, null=True)),
                ('assists', models.IntegerField(blank=True, null=True)),
                ('last_updated', models.DateTimeField()),
                ('applet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='high_scores', to='core.applet')),
            ],
            options={
                'ordering': ['-score'],
                'unique_together': {('applet', 'owner_pubkey')},
            },
        ),
        migrations.CreateModel(
            name='IgnoredPubkey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pubkey', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ignored_pubkeys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'pubkey')},
            },
        ),
    ]
