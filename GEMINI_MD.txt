# Gemini Interaction Guidelines

This document outlines the best practices for working with Gemini to ensure efficient and effective collaboration.

## 1. The "One-Shot" Command Philosophy

To minimize the number of requests and maximize efficiency, please provide all necessary information for a task in a single, comprehensive prompt. This "one-shot" approach avoids a lengthy back-and-forth conversation.

**Example of an effective one-shot prompt:**

> "I need to add a new field `is_verified` to the `UserProfile` model.
>
> *   **File to modify:** `core/models.py`
> *   **Model:** `UserProfile`
> *   **Field to add:** `is_verified = models.BooleanField(default=False)`
> *   **Required actions:**
>     1.  Add the field to the model.
>     2.  Create a new database migration.
>     3.  Apply the migration.
>     4.  Add the `is_verified` field to the `UserProfileSerializer` in `api/serializers.py`.
>     5.  Run the UAT to ensure no regressions."

## 2. Standing Instructions for Gemini

*   **Full Source Code:** For any new or modified files, provide the complete source code.
*   **Notices and Paths:** Ensure every file includes the copyright notice at the top and a full path comment (e.g., `# Full path: axon_bbs/core/models.py`).
*   **No New Dependencies:** Do not add new external dependencies without explicit permission.
*   **Database Migrations:** When creating database migrations, ensure they are robust and handle potential real-world data issues.
*   **Key Event Notifications:**
    *   Clearly state when a database migration is required and provide the commands to run it.
    *   Clearly state when the frontend needs to be rebuilt and provide the command.

## 3. Periodic UAT Runs

During refactoring or other significant changes, Gemini will periodically run the UAT suite to ensure that core functionality is not broken. Gemini will run the UAT:

*   After any significant refactoring or change to the codebase.
*   When explicitly asked to do so.