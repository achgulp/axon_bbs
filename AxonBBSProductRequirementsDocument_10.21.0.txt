Axon BBS - Product Requirements Document (Version 10.21.0)
Overview
Axon BBS is an anonymous, modern bulletin board system that operates on a private, federated network of trusted nodes. The platform is built with a focus on user privacy and resilience, utilizing a custom peer-to-peer data synchronization protocol called BitSync and a sandboxed Applet Framework for extensible, rich content.

Key features and architectural pillars in this version include:

Unified Moderation Hub: A single, streamlined interface for all moderator duties.

Universal Embed Framework: A system to allow any file type to be viewed directly within messages using dedicated, secure applets.

User-Managed Applets: Functionality for users to upload and manage their own applets.

Browser History Integration: A plan to prevent the browser's back button from exiting the application unexpectedly.

Account Claiming & Credential Management

User Roles & Stories
As a User...
A standard participant on the BBS whose focus is on communication, personalization, and interacting with applications.

I want to generate or import my cryptographic identity to securely and anonymously interact with the system.

I want to upload a profile avatar to personalize my identity.

I want to send and receive E2E encrypted private messages.

I want to post on public message boards and attach files, including videos and images.

I want to view content like videos and images directly within a message thread instead of having to download them.

I want to run sandboxed games and applications (applets) securely.

I want to upload and manage my own applets to share with the community.

I want to activate or inactivate my applets without deleting them.

I want to report a message that violates the rules to help keep the community clean.

I want to contact the moderators with a general question or concern that isn't about a specific message.

I want the browser's back button to navigate within the BBS (e.g., from a message back to the board list) instead of exiting the site completely.

I want to claim my federated, inactive account on a new BBS by proving ownership with my private key.

I want to see an accurate "last login" time on my profile.

As a Moderator...
A trusted user responsible for maintaining community health.

I want to have all the powers of a standard User.

I want a single "Unified Moderation Hub" where I can see all pending tasks in one place.

In my queue, I want to see different types of tickets: message reports, profile approvals (nicknames/avatars), and general user inquiries.

I want to approve valid reports, which purges the message from the network and awards karma to the reporter.

I want to review and approve or deny user-submitted profile updates (nicknames and avatars).

I want to read and "close" general inquiries from users.

When I close a general inquiry, I want the system to automatically send a PM acknowledgment to the user so they know their request was handled.

As an Applet Developer...
A technical user who creates games and utilities that run on the BBS.

I want to package my application as a single, self-contained JavaScript file.

I want a simple, secure API to save and load my applet's private data.

I want to create specialized "viewer" applets that can handle specific MIME types (e.g., image/png or video/mp4).

I want my viewer applet to receive context about the file it's supposed to display (e.g., its content hash and MIME type).

As a SysOp (System Operator/Admin)...
The administrator of a BBS node responsible for maintenance, user management, and federation.

I want all the powers of a standard User and Moderator.

I want to manage a whitelist of trusted federated peers to control synchronization.

I want to assign a specific message board to an applet or agent to act as its official "Event Bus".

I want to associate a viewer applet with the MIME types it is designed to handle (e.g., link the VideoPlayer applet to video/mp4).

I want to moderate content and users directly from the Django admin console as an alternative to the main UI.

Architecture
Universal Embed Framework
This framework allows any file type to be displayed within a message thread using a dedicated, sandboxed applet. This makes the system highly extensible.

Applet Registration: The Applet model in the database has a handles_mime_types field. A SysOp can register a "VideoPlayer" applet and assign it the video/mp4, video/webm MIME types.

Frontend Dispatch: When a user views a message, the MessageList component checks the MIME type of each attachment. It finds the corresponding applet registered to handle that type.

Sandboxed Rendering: The frontend then launches the appropriate applet (e.g., VideoPlayer.js) inside a secure AppletRunner iframe. It passes context about the specific file (like its content_hash) to the applet.

Secure Data Fetching: The applet uses a special getAttachmentBlob API call. The parent window securely fetches the encrypted file data using the user's authentication token, decrypts it, and passes it to the applet as a local blob URL, which the applet can then render.

Unified Moderation Hub
This architecture consolidates all moderator tasks into a single, efficient ticketing system.

Unified Queue: A new API endpoint, /api/moderation/unified_queue/, gathers all items needing moderator attention (ModerationReport and FederatedAction objects with a pending status) into a single, time-sorted list.

Flexible Reports: The ModerationReport model is adapted to handle general inquiries by making the reported_message field optional. A report_type field distinguishes these inquiries from standard message reports.

Smart Dashboard: The frontend ModerationDashboard component consumes data from the unified queue. It uses conditional logic to render a different UI for each type of "ticket" (message report, profile approval, user inquiry).

Automated Responses: The backend review logic is updated to handle each ticket type appropriately. For example, "approving" a user inquiry automatically sends a pre-defined PM acknowledgment back to the user.

Full Project File Structure (Post-Refactor Blueprint)
This diagram represents the planned, more modular file structure for the axon_bbs project.

axon_bbs/
├── .env
├── manage.py
├── requirements.txt
├── media/
│   ├── avatars/
│   └── pending_avatars/
├── logs/
├── data/
├── docs/
│   ├── ArchitecturalBlueprint.md
│   └── ProjectBrief.md
├── axon_project/
│   ├── init.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── core/
│   ├── models.py (User, TrustedInstance, FileAttachment, etc.)
│   └── services/ (BitSyncService, SyncService, etc.)
├── accounts/
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   └── services.py
├── messaging/
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   └── services.py
├── applets/
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   └── services.py
├── federation/
│   ├── models.py
│   ├── views.py
│   └── urls.py
└── frontend/
├── package.json
├── public/
└── src/
├── apiClient.js
├── App.js
├── applet_api/
│   └── api.js
├── applets/
│   ├── VideoPlayer.js
│   ├── FortressOverlord.js
│   └── ... (other applets)
└── components/
├── AppletRunner.js
├── MessageList.js
├── ModerationDashboard.js
├── PrivateMessageClient.js
├── ProfileScreen.js
└── ... (other components)
