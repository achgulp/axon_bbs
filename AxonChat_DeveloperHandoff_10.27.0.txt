AxonChat - Developer Handoff Document
Version: 10.27.0
Date: 2025-10-15

=============================================================================
OVERVIEW
=============================================================================

AxonChat is a near-real-time, federated chat system for Axon BBS. It allows
users from different BBS instances to communicate in shared chat rooms that
appear alongside regular message boards.

This document provides a complete technical specification for implementing
the AxonChat frontend applet and completing the federation logic.

=============================================================================
ARCHITECTURE SUMMARY
=============================================================================

AxonChat uses a three-tier architecture:

1. Frontend Applet (AxonChat.js) - THIS IS WHAT YOU WILL BUILD
   - User interface for chat rooms
   - Sends messages via /api/applets/<id>/update_state/
   - Polls for new messages via /api/applets/<id>/state/
   - Runs in sandboxed iframe with BBS API access only

2. Backend Agent (ChatAgentService) - ALREADY COMPLETE
   - Processes incoming messages
   - Updates AppletSharedState
   - Located at: core/agents/chat_agent_service.py

3. Federation Layer (SyncService) - ALREADY COMPLETE
   - Synchronizes state across trusted BBS instances
   - Handles peer-to-peer message propagation

=============================================================================
WHAT HAS BEEN COMPLETED
=============================================================================

Backend Infrastructure (100% Complete):
‚úì ChatAgentService agent for processing chat messages
‚úì AppletSharedState model for storing chat room state
‚úì MessageBoard integration (boards can be designated as chat rooms)
‚úì API endpoint: POST /api/applets/<applet_id>/update_state/
‚úì API endpoint: GET /api/applets/<applet_id>/state/
‚úì Dynamic agent loading via ServiceManager
‚úì Federation sync infrastructure

=============================================================================
WHAT NEEDS TO BE BUILT
=============================================================================

Frontend Applet (AxonChat.js):
‚òê Chat room UI with message history display
‚òê User list showing present users
‚òê Message input field and send functionality
‚òê Polling mechanism for new messages
‚òê Join/leave room notifications
‚òê User presence tracking

Federation Enhancements (Optional Phase 2):
‚òê Cross-instance user presence synchronization
‚òê Optimized state merging for high-traffic rooms

=============================================================================
DATA MODEL
=============================================================================

The AppletSharedState for a chat room stores:

{
  "version": 123,                    // Incremented on each state change
  "messages": [                      // Array of chat messages
    {
      "id": "uuid-here",
      "author": "username",
      "author_pubkey": "base64-pubkey",
      "content": "message text",
      "timestamp": 1697000000000,    // Unix timestamp in milliseconds
      "instance": "instance-name"    // BBS instance origin
    }
  ],
  "present_users": [                 // Users currently in the room
    {
      "username": "username",
      "pubkey": "base64-pubkey",
      "instance": "instance-name",
      "last_seen": 1697000000000
    }
  ]
}

=============================================================================
BBS API AVAILABLE TO APPLETS
=============================================================================

The AxonChat applet runs in a sandboxed iframe and communicates with the
parent window via postMessage. The following API is available:

Standard API:
- bbs.getUserInfo()
  Returns: { username, pubkey, karma, profile_image_url }

- bbs.getData()
  Returns: Applet-specific persistent data (not used for chat)

- bbs.saveData(newData)
  Saves applet-specific persistent data (not used for chat)

Chat-Specific API:
- bbs.getAppletInfo()
  Returns: { id, name, parameters: { board_id } }
  Use this to get the applet_id and board_id for API calls

- bbs.updateState(newState)
  Sends a state update to the backend agent
  For chat: Send { action: "send_message", content: "message text" }

- bbs.getState()
  Returns: { version, data: {...} }
  The data field contains the full chat room state (messages, users)

=============================================================================
IMPLEMENTATION GUIDE
=============================================================================

STEP 1: Create the Applet File
-------------------------------
Location: /home/dukejer/axon_bbs/frontend/src/applets/AxonChat.js

The file should follow this structure:

```javascript
// --- BBS API Helper (MANDATORY - copy from hexgl.js) ---
window.bbs = {
  _callbacks: {},
  _requestId: 0,
  _handleMessage: function(event) { /* ... */ },
  _postMessage: function(command, payload = {}) { /* ... */ },
  getUserInfo: function() { return this._postMessage('getUserInfo'); },
  getData: function() { return this._postMessage('getData'); },
  saveData: function(newData) { return this._postMessage('saveData', newData); },
  getAppletInfo: function() { return this._postMessage('getAppletInfo'); },
  updateState: function(newState) { return this._postMessage('updateState', newState); },
  getState: function() { return this._postMessage('getState'); }
};
window.addEventListener('message', (event) => window.bbs._handleMessage(event));

// --- Main Applet Execution ---
(async function() {
  const appletContainer = document.getElementById('applet-root');

  // Initialize
  const userInfo = await bbs.getUserInfo();
  const appletInfo = await bbs.getAppletInfo();
  const appletId = appletInfo.id;

  // Render UI
  appletContainer.innerHTML = `
    <style>
      /* Your chat UI styles here */
    </style>
    <div id="chat-container">
      <div id="message-list"></div>
      <div id="user-list"></div>
      <div id="input-area">
        <input type="text" id="message-input" placeholder="Type a message...">
        <button id="send-button">Send</button>
      </div>
    </div>
  `;

  // Send message handler
  document.getElementById('send-button').onclick = async () => {
    const input = document.getElementById('message-input');
    const content = input.value.trim();
    if (!content) return;

    await bbs.updateState({
      action: "send_message",
      content: content
    });

    input.value = '';
  };

  // Polling for new messages
  let currentVersion = 0;

  async function pollMessages() {
    try {
      const state = await bbs.getState();

      if (state.version > currentVersion) {
        currentVersion = state.version;
        renderMessages(state.data.messages);
        renderUsers(state.data.present_users);
      }
    } catch (e) {
      console.error("Error polling messages:", e);
    }

    // Poll every 2 seconds
    setTimeout(pollMessages, 2000);
  }

  function renderMessages(messages) {
    const messageList = document.getElementById('message-list');
    messageList.innerHTML = messages.map(msg => `
      <div class="message">
        <span class="author">${msg.author}</span>
        <span class="timestamp">${new Date(msg.timestamp).toLocaleTimeString()}</span>
        <div class="content">${escapeHtml(msg.content)}</div>
      </div>
    `).join('');
    messageList.scrollTop = messageList.scrollHeight;
  }

  function renderUsers(users) {
    const userList = document.getElementById('user-list');
    userList.innerHTML = users.map(user => `
      <div class="user">${user.username} (${user.instance})</div>
    `).join('');
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Start polling
  pollMessages();

})();
```

STEP 2: Backend Agent Configuration
------------------------------------
The ChatAgentService is already implemented at:
  core/agents/chat_agent_service.py

Key functionality already provided:
- Processes { action: "send_message", content: "..." } updates
- Appends messages to state.data['messages']
- Updates user presence in state.data['present_users']
- Increments version number on each change
- Saves state to database

STEP 3: Deployment Workflow
----------------------------
Once you've created AxonChat.js:

1. Post the applet to the Applet Library:
   ```bash
   source venv/bin/activate
   python manage.py post_applet_update frontend/src/applets/AxonChat.js \
     --name "AxonChat" \
     --description "Real-time federated chat for Axon BBS"
   ```

2. Create a chat room MessageBoard via Django Admin:
   - Go to Messaging ‚Üí Message Boards ‚Üí Add Message Board
   - Name: "General Chat"
   - Description: "General discussion room"
   - Board Type: "chat"
   - Associated Applet: Select "AxonChat"
   - Save

3. The AxonChat applet will automatically appear when users visit
   the "General Chat" board

STEP 4: Testing Checklist
--------------------------
‚òê User can see chat room when visiting a chat-type MessageBoard
‚òê User can type and send messages
‚òê Messages appear in the message list
‚òê Messages from other users appear (test with multiple browser tabs)
‚òê User list shows present users
‚òê Timestamps display correctly
‚òê Scrolling works (auto-scroll to bottom on new messages)
‚òê HTML in messages is escaped (security test)
‚òê Polling continues even when tab is not focused

=============================================================================
ADVANCED FEATURES (OPTIONAL)
=============================================================================

Typing Indicators:
- Add "is_typing" field to updateState
- Agent tracks typing state with short TTL
- Display "User is typing..." in UI

Message Reactions:
- Add { action: "add_reaction", message_id: "...", emoji: "üëç" }
- Agent appends reactions to messages
- Display reaction counts below messages

Direct Messages:
- Create private chat rooms between two users
- Use MessageBoard with restricted access_level

Rich Text Formatting:
- Support markdown in messages
- Add markdown parser library
- Render formatted messages in UI

File Attachments:
- Allow users to attach images/files to messages
- Upload via FileAttachment model
- Display inline previews

=============================================================================
SECURITY CONSIDERATIONS
=============================================================================

1. Message Content Sanitization:
   - The applet MUST escape all HTML in message content
   - Use textContent or a sanitization library
   - Never use innerHTML with user content

2. Rate Limiting:
   - The backend agent should limit messages per user per minute
   - Implement in ChatAgentService.process_update()

3. Access Control:
   - Respect MessageBoard.required_access_level
   - Backend validates user permissions before processing updates

4. Federation Trust:
   - Only accept messages from trusted instances
   - Verify signatures on federated state updates

=============================================================================
TROUBLESHOOTING
=============================================================================

Issue: Messages not appearing
- Check browser console for API errors
- Verify applet_id is correct
- Check that ChatAgentService is running (ps aux | grep chat_agent)
- Verify AppletSharedState exists in database

Issue: Polling stops working
- Check for JavaScript errors in console
- Ensure setTimeout is being called recursively
- Verify API endpoint returns valid JSON

Issue: Users can't send messages
- Check that updateState API returns success
- Verify ChatAgentService is processing updates
- Check Django logs for backend errors

Issue: Federation not working
- Verify TrustedInstance configuration
- Check SyncService is running
- Review federation sync logs

=============================================================================
REFERENCES
=============================================================================

Related Files:
- Backend Agent: core/agents/chat_agent_service.py
- API Views: applets/views.py (update_state, get_state endpoints)
- Models: applets/models.py (Applet, AppletSharedState)
- HexGL Applet: frontend/src/applets/hexgl.js (reference for BBS API usage)

Documentation:
- AxonBBS_ProjectBrief_10.27.0.txt
- AxonBBS_ArchBlueprint_10.27.0.txt
- AxonBBS_ProjectStatus_10.27.0.txt
- AxonBBSProductRequirementsDocument_10.27.0.txt

Deployment Tools:
- post_applet_update management command
- check_applet_manifest management command

=============================================================================
SUCCESS CRITERIA
=============================================================================

The AxonChat implementation is complete when:

1. ‚úì Users can join a chat room by visiting a chat-type MessageBoard
2. ‚úì Users can send messages that appear in real-time
3. ‚úì Messages from other users appear via polling
4. ‚úì User list shows who is present in the room
5. ‚úì Messages persist across page refreshes
6. ‚úì Multiple users can chat simultaneously
7. ‚úì Chat state federates to trusted peer instances

=============================================================================
ESTIMATED EFFORT
=============================================================================

Frontend Development: 4-6 hours
- UI implementation: 2 hours
- Polling logic: 1 hour
- Testing and debugging: 2-3 hours

Federation Enhancement: 2-3 hours (if needed)
- Cross-instance presence sync
- State merging optimization

Total: 6-9 hours for complete implementation

=============================================================================
NEXT STEPS
=============================================================================

1. Create AxonChat.js following the implementation guide above
2. Test locally with single user
3. Test with multiple browser tabs (simulating multiple users)
4. Deploy to production using post_applet_update command
5. Create test chat room via Django admin
6. Perform end-to-end testing with real users
7. Monitor performance and optimize polling interval if needed
8. Document any issues and iterate

=============================================================================
CONTACT & SUPPORT
=============================================================================

For questions about this implementation:
- Review existing applet code in frontend/src/applets/
- Check Django admin for ChatAgentService configuration
- Review backend logs: /var/log/axon_bbs/ (if configured)
- Test API endpoints directly using curl or Postman

Good luck with the implementation!
