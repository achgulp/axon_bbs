Axon BBS - Product Requirements Document
Version: 9.0 (Consolidated)
Date: July 27, 2025

Overview
Axon BBS is a modern, anonymous bulletin board system (BBS) inspired by the classic 90s era. It is built on a private, federated network of trusted nodes that synchronize data using a custom BitTorrent-like P2P protocol, ensuring censorship resistance and anonymity. The system is built with Django and React and all P2P communications are routed over the Tor network.





The architecture uses a robust "pull" model where each node's background 

SyncService periodically polls its trusted peers for new content. Data transfer is handled reliably using a "Web Seed" model, where torrents are embedded with direct download URLs, allowing peers to fetch content via standard HTTPS requests over Tor.



User Roles & Stories
As a User...
I want to generate a new identity keypair or import an existing one so I can control my account.


I want to unlock my identity with my password once per session so I don't have to re-enter it for every action.


I want to send and receive end-to-end encrypted private messages.


I want to post on public message boards and read posts from others.


I want to choose a nickname associated with my public key, which is signed and verifiable across the network.


I want to upload, download, and stream large media files without downloading the entire file first.


I want a personal ignore list to hide all content from specific users based on their public keys.


I want to receive notifications when my content is about to expire so I can request an extension.


I want to request an extension on the lifespan of my content before it is deleted.


As a Moderator...
I want to be able to temporarily or permanently ban users from the local BBS instance by their public key.


I want to review and approve or deny user requests for extending the lifespan of their content.


I want to be able to unpin any user's content to enforce content policies, except for content pinned by an Admin.


As a SysOp (Admin)...
I want all the powers of a Moderator.


I want to be able to override pinning rules and unpin any content on the server, including content pinned by moderators.




I want to configure and manage a whitelist of trusted federated BBS peers via their public keys and 

.onion URLs.





I want to explicitly mark which peers are trusted for syncing via an 

is_trusted_peer checkbox.


I want to set the default time durations for how long content is stored on my BBS.


Key Features
Federated BBS Network (P2P Chunk Sync)

Concept: Trusted Axon BBS nodes form a private, federated P2P network to synchronize data.


Encryption: Data is chunked and encrypted with a random AES key. This AES key is then placed in a "digital envelope," encrypted for each trusted peer using their public key.


Sync Mechanism (Pull & Web Seed):


Local Post: A user posts a message on Node A. The message is saved locally, and a torrent is created for the encrypted data.





Web Seed Embedding: The torrent is embedded with Node A's .onion URL, which will serve as a direct download link (a "web seed").




Polling: A background SyncService on Node B periodically polls Node A's /api/sync/ endpoint, asking for any content created since its last successful sync.




Magnet Transfer: Node A finds new messages in its database and responds with a list of their magnet links.


Download via Web Seed: Node B's BitTorrent client receives the magnet link. It sees the web seed URL and initiates a direct download of the data from Node A's 

/api/torrents/<info_hash>/<filename> endpoint.



Decryption: Node B finds the digital envelope meant for it in the torrent's metadata, decrypts it with its private key to get the AES key, and then decrypts the downloaded content.

Technical Requirements
Technical Stack

Backend: Django 5.0.6, Python 3.11+ 


Frontend: React 18+, Tailwind CSS 


P2P: libtorrent for BitTorrent protocol handling 


Cryptography: cryptography library for encryption and signing 

Full Project File Structure
axon_bbs/
├── axon_project/           # Django Project Configuration
│   ├── settings.py
│   └── urls.py
├── core/                   # BBS Core Engine
│   ├── migrations/
│   ├── services/
│   │   ├── bittorrent_service.py
│   │   ├── encryption_utils.py
│   │   ├── identity_service.py
│   │   ├── service_manager.py
│   │   ├── sync_service.py
│   │   └── tor_service.py
│   ├── admin.py
│   ├── apps.py
│   └── models.py
├── api/                    # Web Handler / RESTful API
│   ├── permissions.py
│   ├── serializers.py
│   ├── urls.py
│   └── views.py
├── handlers/               # Alternative Connection Handlers
│   ├── audio_modem_handler.py
│   └── meshtastic_handler.py
├── frontend/               # Web Front-End (React)
│   ├── public/
│   ├── src/
│   └── package.json
├── data/                   # Application Data
│   └── axon_bbs.sqlite3
├── logs/                   # Log files
│   └── bbs.log
├── manage.py               # Django's command-line utility
└── requirements.txt        # Python package dependencies
