Axon BBS - Product Requirements Document
Version: 9.2.2 (Federated Moderation)
Date: July 30, 2025

1. Overview
Axon BBS is a modern, anonymous bulletin board system (BBS) built on a private, federated network of trusted nodes. This version marks a significant architectural shift by replacing the external libtorrent library with a custom, native P2P data synchronization protocol named BitSync. The BitSync protocol is designed for simplicity and robustness, eliminating external dependencies and tailoring the data transfer mechanism specifically for Axon's needs. It retains the core principles of trackerless, pull-based synchronization over Tor but replaces magnet links and the BitTorrent protocol with a streamlined, chunk-based file transfer system using standard HTTPS requests. 




2. User Roles & Stories
As a User...

I want to generate a new identity keypair or import an existing one so I can control my account. 

I want to unlock my identity with my password once per session so I don't have to re-enter it for every action. 

I want to send and receive end-to-end encrypted private messages. 

I want to post on public message boards and read posts from others. 

I want to choose a nickname associated with my public key, which is signed and verifiable across the network. 

I want a personal ignore list to hide all content from specific users based on their public keys. 

I want to receive notifications when my content is about to expire so I can request an extension. 

I want to request an extension on the lifespan of my content before it is deleted. 

As a Moderator...

I want to be able to temporarily or permanently ban users from the local BBS instance by their public key. 

I want to review and approve or deny user requests for extending the lifespan of their content. 

I want to be able to unpin any user's content to enforce content policies, except for content pinned by an Admin. 

I want my actions (like deleting illicit content) to be broadcast to peer instances so they can also take action, protecting the whole network.

As a SysOp (Admin)...

I want all the powers of a Moderator. 

I want to be able to override pinning rules and unpin any content on the server, including content pinned by moderators. 

I want to configure and manage a whitelist of trusted federated BBS peers via their public keys and .onion URLs. 

I want to explicitly mark which peers are trusted for syncing via an 

is_trusted_peer checkbox. 

I want to set the default time durations for how long content is stored on my BBS. 

3. The BitSync Protocol
BitSync is the new P2P layer for Axon BBS. It is a trackerless, web-seeded protocol designed to synchronize encrypted content between trusted peers entirely over Tor. 



Content Hash: Each piece of content is identified by a unique SHA256 hash of its raw data. 


Content Manifest: For each new piece of content, the originating node generates a small JSON object called a Manifest. It contains the content hash, chunk hashes, chunk size, encrypted AES key, and encryption IV. 



Web Seed via API: Content chunks are downloaded directly from hosting peers via a standard, authenticated API endpoint. 


Trackerless Peer Discovery: Peers are discovered exclusively through the TrustedInstance model. 


Swarming and Redundancy: A node can poll all of its trusted peers to see who has a piece of content, allowing it to download different chunks from different peers in parallel. 

4. Federated Moderation
To build a responsible network, moderation actions can be shared and replicated across the federation based on a system of trust.

Trusted Moderator Federation: Moderators are identified by their public key. Each BBS instance admin can "trust" the moderators from a peer instance, granting them authority on their server. Admins will also have an explicit "distrust" list to override this for specific moderator keys.

Moderation Action Events: Instead of just being a local database entry, a moderation action (e.g., deleting a message) will generate a signed, syncable event. This event will contain the action taken, the hash of the content it applies to, the reason, a severity level, and the moderator's signature to prove authenticity.

Moderation Log: A special, read-only "Moderation Log" message board will be created on each instance. All federated moderation events will be posted here for transparency.

Replication Policy: Each BBS admin can set a local policy for handling incoming moderation events. For example, an admin might choose to automatically delete any message that a trusted remote moderator has flagged with "high" severity, while flagging "medium" severity content for manual review.

5. Content Validation and Moderation Workflow
To balance the need for moderation with the privacy-preserving architecture, content validation will occur at the time of decryption.

Principle: The system maintains end-to-end encryption for all data at rest and in transit. The server only gains temporary, in-memory knowledge of a file's contents when a user requests to download it.

Process:

When a user (ideally a moderator) clicks to download a file, their local BBS instance retrieves the encrypted chunks and decrypts the data.

Before serving the file to the user, the server will perform an in-memory check to identify the file's type.

The system will check for "opaque" file types that cannot be inspected, such as .zip archives or other encrypted containers.

Moderator Action: If an opaque or unidentifiable file type is detected, the system will log the event and warn the moderator. The moderator can then choose to delete the parent message to remove the content from the board.

6. Technical Requirements & System Changes
Technical Stack:


Backend: Django 5.0.6, Python 3.11+ 


Frontend: React 18+, Tailwind CSS 


P2P Protocol: BitSync (native Python, HTTP-based) 


Cryptography: cryptography library 

Service & API Changes:


core/services/bittorrent_service.py will be removed and replaced with core/services/bitsync_service.py. 

The 

SyncService will be updated to orchestrate the swarm discovery and parallel download process. 

The 

Message model will be updated to include a manifest field. 

An API view at 

GET /api/bitsync/has_content/<content_hash> will be added to allow peers to check for content availability. 

An API view at 

GET /api/bitsync/chunk/<content_hash>/<chunk_index> will be created to serve content chunks. 

7. Full Project File Structure (Updated)
axon_bbs/
├── axon_project/           # Django Project Configuration
│   ├── settings.py
│   └── urls.py
├── core/                   # BBS Core Engine
│   ├── migrations/
│   ├── services/
│   │   ├── bitsync_service.py
│   │   ├── encryption_utils.py
│   │   ├── identity_service.py
│   │   ├── service_manager.py
│   │   ├── sync_service.py
│   │   └── tor_service.py
│   ├── admin.py
│   ├── apps.py
│   └── models.py
├── api/                    # Web Handler / RESTful API
│   ├── permissions.py
│   ├── serializers.py
│   ├── urls.py
│   └── views.py
├── handlers/               # Alternative Connection Handlers
│   ├── audio_modem_handler.py
│   └── meshtastic_handler.py
├── frontend/               # Web Front-End (React)
│   ├── public/
│   ├── src/
│   └── package.json
├── data/                   # Application Data
│   └── axon_bbs.sqlite3
├── logs/                   # Log files
│   └── bbs.log
├── manage.py               # Django's command-line utility
└── requirements.txt        # Python package dependencies
