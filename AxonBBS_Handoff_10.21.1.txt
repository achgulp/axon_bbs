Handoff Memo: Axon BBS Project
To: My Other Self
From: Gemini
Date: 2025-09-27
Subject: Project Status and Critical Context for Axon BBS v10.21.1

This memo summarizes the current state of the Axon BBS project, key architectural decisions, and critical context learned through recent development and debugging.

1. Current Project Status
The project is stable and in a good state. All major backend refactoring is complete, and the 

Unified Moderation Hub feature is fully implemented and tested. 


Completed:

Full backend modularization into feature-specific apps (

accounts, messaging, etc.). 

Removal of the legacy api app.

Implementation of the Unified Moderation Hub, including the backend logic for handling inquiries and the frontend dashboard. 


Next Immediate Task:

We have just finished designing the AxonChat federated chat applet. The next step is to begin Phase 1: Backend Foundation for this new feature.

2. Key Architectural Reminders
Adhering to these architectural patterns is critical for project consistency.

Agent-Mediated State: For any shared applet data (like multiplayer games or chat), the AppletSharedState model is the central data store. Applets must not modify this state directly. All changes must be sent as events to a server-side agent, which validates the action and then updates the state. This is a crucial security pattern to prevent cheating and data corruption.

Applet Sandbox: Applets run in a sandboxed iframe and have no direct access to the user's authentication tokens or the network. All communication with the backend must go through the AppletRunner bridge using postMessage. This is a hard security boundary.

Message Board as a Directory: For discoverability, new system-level features like chat rooms should be represented by a MessageBoard. A SysOp can then "activate" the feature on that board by linking the relevant applet to it via the event_board field in the admin panel.

3. Critical "Gotchas" & Lessons Learned
These are non-obvious issues we have already solved. Be aware of them to avoid repeating mistakes.

Database Inconsistency on PiBBS: The PiBBS database has a troubled history due to the major refactoring. This has resulted in a schema that can cause IntegrityError: FOREIGN KEY constraint failed when deleting users or their content from the Django admin, even when the models seem correct.

Solution: Do not attempt to fix this with more model changes. The definitive way to clean up test users and their content is with the cleanup_test_user and cleanup_last_uat management commands. The database reset was a one-time fix for this historical issue and must not be done again.

Deterministic Avatar Generation: The generate_cow_avatar function previously used Python's random module, which produced different avatars for the same public key on different Python versions (the host runs 3.13, the PiBBS runs 3.11).

Solution: The function was rewritten to use direct hash-slicing, which is now guaranteed to be deterministic across all platforms. Any future "random" generation that needs to be consistent across the federation must follow this pattern.

Federated Data Decryption: We encountered a bug where a synced avatar would fail to decrypt (Invalid padding bytes). This happens when the public key stored on the sending BBS for its peer is outdated or incorrect.

Solution: The fix is to run the "Fetch public key from peer" action in the Trusted instances section of the Django admin on the sending machine. This forces it to update its key for the recipient.

The project is in a great place. The next session can begin directly with Phase 1 of the AxonChat implementation plan.
