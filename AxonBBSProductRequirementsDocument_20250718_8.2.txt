Axon BBS - Consolidated Product Requirements Document
Version: 8.2 (Updated)
Date: July 26, 2025

Overview
Axon BBS is a modern, anonymous bulletin board system (BBS) inspired by the classic 90s BBS era. It leverages a custom BitTorrent-like P2P protocol for data distribution, ensuring censorship resistance and anonymity within its federated network.  The system now uses a robust "pull" architecture, where nodes periodically poll their trusted peers for new content, ensuring reliable synchronization over the Tor network. The system is built using Django for the backend and React for the frontend, with a focus on user privacy and security. 



Key Updates Since Version 8.1
Architectural Shift to "Pull" Sync: The P2P synchronization mechanism has been re-architected from a "push" notification model to a more resilient "pull" (polling) model.

New Sync Service: A background SyncService has been introduced on each node. This service periodically polls trusted peers for new content magnet links via a new /api/sync/ endpoint.

Web Seed Implementation: To bypass low-level library issues with direct P2P connections over Tor, the system now uses a "Web Seed" model for data transfer. New torrents are embedded with the creator's .onion web URL, allowing peers to download the initial data reliably via a standard HTTPS request over Tor.

Database and Admin Enhancements:

The TrustedInstance model now includes a last_synced_at field to support the polling mechanism and a save() method to automatically sanitize public keys, preventing data entry errors.

The admin interface for TrustedInstance now includes a Pubkey Checksum column for easy visual verification of keys.

User Roles & Stories
As a User...
I want to generate a new identity keypair or import my existing one so I can control my account. 

I want to unlock my identity with my password once per session, so I don't have to re-enter it for every action. 

I want to send and receive end-to-end encrypted private messages (using pub/private keys). 

I want to post on public message boards and read posts from others (threads as hierarchical JSON). 

I want to upload and download files (chunked and synced via P2P). 

I want to stream large video and audio files without downloading the entire file first (using chunked P2P pulls). 

I want a personal ignore list to hide all content from users I don't want to interact with (based on pubkeys). 

I want to request an extension on the lifespan of my content before it is deleted. 

I want to receive notifications when my content is about to expire so I can request an extension. 

I want to choose a nickname associated with my pubkey, which is signed and verifiable across BBSes. 

As a Moderator...
I want to be able to temporarily or permanently ban unruly users from the local BBS instance (including banning pubkeys). 

I want to review and approve or deny user requests for extending the pin duration of their content. 

I want to review and approve or deny user requests for extending the lifespan of their content. 

I want to be able to unpin any user's content to enforce content policies, except for content pinned by an Admin. 

As a SysOp (Admin)...
I want all the powers of a Moderator. 

I want to be able to override pinning rules for any content. 

I want to configure trusted federated BBS peers (via pubkeys and .onion URLs). 

I want to set the default time durations for how long content is stored on my BBS. 

I want to manage a whitelist of trusted federated BBS instances to ensure network security. 

I want to be able to unpin any content on the server, including content pinned by moderators. 

Key Features
Federated BBS Network (P2P Chunk Sync)
Concept: Trusted Axon BBS nodes form a private, federated P2P network to synchronize data.

Encryption: Data is chunked and encrypted with a random AES key per chunk. The AES key is then encrypted into a "digital envelope" for each trusted peer using their public key. A torrent is created from these encrypted chunks, with the envelopes stored in the torrent's metadata comment. 

Sync Mechanism (Pull & Web Seed):

Local Post: When a user on Node A posts a message, it is saved locally. A torrent for the encrypted message data is created. This torrent file is embedded with the .onion web URL of Node A (and all other trusted peers) as a "web seed".

Polling: A background SyncService on Node B wakes up periodically (e.g., every 60 seconds). It polls Node A's /api/sync/ endpoint, requesting any content created since its last successful sync.

Magnet Transfer: Node A responds with a list of new magnet links.

Download via Web Seed: Node B receives the magnet link(s) and passes them to its libtorrent client. The client sees the web seed URL for Node A, connects to it via its Tor proxy, and downloads the encrypted data from Node A's /api/torrents/ endpoint.

Decryption: Node B finds its corresponding envelope in the torrent metadata, decrypts it with its private key to get the AES session key, and then decrypts the downloaded content.

Technical Requirements & File Structure
Technical Stack
Backend: Django 5.0.6, Python 3.11+

Frontend: React 18+, Tailwind CSS

P2P: libtorrent for BitTorrent protocol handling

Cryptography: cryptography for encryption/signing

Full Project File Structure
axon_bbs/
├── axon_project/
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── core/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations/
│   ├── models.py
│   ├── services/
│   │   ├── __init__.py
│   │   ├── bittorrent_service.py
│   │   ├── encryption_utils.py
│   │   ├── identity_service.py
│   │   ├── service_manager.py
│   │   ├── sync_service.py
│   │   └── tor_service.py
│   └── tests/
├── api/
│   ├── __init__.py
│   ├── permissions.py
│   ├── serializers.py
│   ├── urls.py
│   ├── views.py
│   └── tests/
├── handlers/
│   ├── __init__.py
│   ├── audio_modem_handler.py
│   └── meshtastic_handler.py
├── frontend/
│   ├── public/
│   ├── src/
│   └── package.json
├── data/
│   └── axon_bbs.sqlite3
├── logs/
│   └── bbs.log
├── manage.py
└── requirements.txt
