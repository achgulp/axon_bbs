Axon BBS - Consolidated Product Requirements Document
Version: 6.2 (Updated)
Date: July 17, 2025

Overview
Axon BBS is a modern, anonymous bulletin board system (BBS) inspired by the classic 90s BBS era. It leverages the Nostr protocol for all message and data distribution, ensuring censorship resistance and anonymity within its network. The system is built using Django for the backend and React for the frontend, with a focus on user privacy and security. 





User Roles & Stories
As a User...
I want to generate a new Nostr identity or import my existing one so I can control my account. 



I want to unlock my Nostr identity with my password once per session, so I don't have to re-enter it for every action.

I want to send and receive end-to-end encrypted private messages. 



I want to post on public message boards and read posts from others. 


I want to upload and download files. 



I want to stream large video and audio files without downloading the entire file first. 



I want a personal ignore list to hide all content from users I don't want to interact with. 



I want a list of my content so I can request a pinning extension from moderators. 



I want to request an extension on the lifespan of my content before it is deleted. 



I want to receive notifications when my content is about to expire so I can request an extension. 



As a Moderator...
I want to be able to temporarily or permanently ban unruly users from the local BBS instance. 


I want to review and approve or deny user requests for extending the pin duration of their content. 


I want to review and approve or deny user requests for extending the lifespan of their content. 



I want to be able to unpin any user's content to enforce content policies, except for content pinned by an Admin. 


As a SysOp (Admin)...
I want all the powers of a Moderator. 



I want to be able to override pinning rules for any content. 



I want to configure which external Nostr relays our BBS connects to. 


I want to set the default time durations for how long content is stored on my BBS. 


I want to manage a whitelist of trusted federated BBS instances to ensure network security. 



I want to be able to unpin any content on the server, including content pinned by moderators. 


Key Features
User Registration and Authentication
Users can register with a username and password. Passwords are hashed and salted for security. 





API endpoints are secured using JWT authentication. 


Nostr Identity Management
The user interface MUST provide the ability for users to generate a new Nostr public/private key pair. 


The user interface MUST allow users to import an existing Nostr private key (nsec...). 


Upon user registration, a Nostr private key is generated and stored on the server in an encrypted format.

To perform actions requiring a signature (e.g., posting a message), the user must first unlock their identity using their password in a session-based model.

Once unlocked, the user's unencrypted private key will be held in the server's memory for the duration of the active session. This is a deliberate trade-off, prioritizing user convenience.

The unencrypted private key MUST be immediately purged from memory when the user logs out, their session expires, or the server is shut down.

Message Boards
The system supports multiple message boards. 


Boards are defined by names, descriptions, and required access levels. 


Federated BBS Network (Private File Sync)

Concept: Trusted Axon BBS nodes can form a private, federated network to synchronize files for resilience and redundancy. 



Mechanism (Hybrid Encryption): The system uses a secure "digital envelope" model to broadcast a single data chunk to multiple trusted relays. 




Key Revocation: A relay's access is revoked by no longer including an envelope for its public key in future messages. 



Federation Trust and Security: Federation will be managed via a whitelist of trusted Axon BBS instances, configurable by SysOps. 


Anonymity and Privacy
All external network communications are routed through Tor. 


The server's SECRET_KEY is stored securely in an .env file. 



External Link Policy: To prevent IP address leakage, links to external websites posted by users MUST NOT be rendered as clickable hyperlinks (<a> tags). They should be displayed as plain text, requiring the user to consciously copy and paste the link into their browser. 




Technical Requirements & File Structure
Technical Stack

Backend: Django 5.2.4, Python 3.13 


Frontend: React 18+, Tailwind CSS 


Streaming Media: Playback will be implemented using a library that supports Media Source Extensions, such as hls.js or shaka-player. 

Project File Structure
axon_bbs/
├── axon_project/           # Django Project Configuration
│   ├── settings.py
│   └── urls.py
│
├── core/                   # BBS Core Engine
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   └── services/           # Integrated Services
│       ├── encryption_utils.py
│       ├── identity_service.py
│       ├── nostr_service.py
│       ├── service_manager.py
│       └── tor_service.py
│
├── api/                    # Web Handler / RESTful API
│   ├── urls.py
│   └── views.py
│
├── handlers/               # Alternative Connection Handlers
│   ├── audio_modem_handler.py
│   └── meshtastic_handler.py
│
├── frontend/               # Web Front-End (React)
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── components/
│   │   ├── App.js
│   │   └── apiClient.js
│   └── package.json
│
├── data/                   # Application Data (SQLite DB)
│
├── manage.py               # Django's command-line utility 
└── requirements.txt        # Python package dependencies 
Future Enhancements
Threaded discussions (Nostr replies). 

User profiles on Nostr.

Unique tags for boards (e.g., "axon-general") to filter out public Nostr noise.
