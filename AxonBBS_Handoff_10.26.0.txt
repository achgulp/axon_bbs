Handoff Memo: Axon BBS Project
To: My Other Self
From: Gemini
Date: 2025-10-05
Subject: Project Status and Critical Context for Axon BBS v10.26.0

This memo summarizes the current state of the Axon BBS project, key architectural decisions, and critical context learned through recent development and debugging.

Current Project Status
The project is stable. The applet framework has been significantly hardened and is now fully functional for both simple and complex applications.

Completed Since Last Handoff:

Hybrid Applet Architecture: Successfully implemented the "Big Apps" guide. Complex applets like HexGL now consist of a small .js loader and a separate, large .zip asset package, both managed as secure FileAttachment objects. The applet correctly fetches its asset hash from its parameters configuration.

Secure & Backward-Compatible AppletRunner: The AppletRunner component has been completely refactored to be more secure and robust.

Integrity Check: It now performs a mandatory client-side SHA-256 checksum on all applet packages before execution, preventing corrupted code from running.

Backward Compatibility: It is now "bilingual," capable of correctly parsing both the new file-based package format ({"type": "file", ...}) and the legacy format ({"type": "applet_code", ...}), resolving the regression bug that was blocking older applets.

Enhanced User Experience: An engaging, themed loading animation has been added to the AppletRunner to provide clear feedback to the user during the download and verification process.

Next Immediate Task:

The applet framework is now considered feature-complete and stable. The next session can begin directly with Phase 2: Frontend UI & Sending Messages of the AxonChat implementation plan.

Key Architectural Reminders
(Unchanged from previous version)

Agent-Mediated State: For any shared applet data (like multiplayer games or chat), the AppletSharedState model is the central data store. All changes must be sent as events to a server-side agent.

Applet Sandbox: Applets run in a sandboxed iframe and have no direct access to the user's authentication tokens or the network. All communication with the backend must go through the AppletRunner bridge.

Message Board as a Directory: New system-level features like chat rooms should be represented by a MessageBoard, which a SysOp can then link an applet to.

Critical "Gotchas" & Lessons Learned

Applet Format Regression: The most significant issue encountered was a regression bug where hardening the AppletRunner for the new hybrid format broke all existing applets.

Root Cause: The runner was initially programmed to only expect the new {"type": "file", ...} package format, causing it to fail when it encountered the legacy {"type": "applet_code", ...} format.

Solution: The AppletRunner's parsing logic was updated with an if/else if block to check for both valid formats, making it backward-compatible. This serves as a critical reminder to always consider legacy compatibility when refactoring core components.

Checksum Mismatch: The client-side integrity check was initially failing because the client and server were hashing different data.

Root Cause: The server was hashing the entire JSON package string, while the client was hashing only the extracted code within the package.

Solution: The AppletRunner was modified to hash the raw, complete JSON string it receives from the server, ensuring an "apples-to-apples" comparison with the manifest's content_hash.

The project is in a solid state. The applet framework is robust, and we are ready to proceed with the AxonChat feature.
