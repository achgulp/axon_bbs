Axon BBS - Consolidated Product Requirements Document
Product Name: Axon BBS
Version: 5.3
Date: July 17, 2025

Overview
Axon BBS is a modern, anonymous bulletin board system (BBS) inspired by the classic 90s BBS era. It leverages the Nostr protocol for all message and data distribution, ensuring censorship resistance and anonymity within its network. The system is built using Django for the backend and React for the frontend, with a focus on user privacy and security.





User Roles & Stories
As a User...
I want to generate a new Nostr identity or import my existing one so I can control my account.





I want my private key to be encrypted with my password so the SysOp cannot impersonate me.





I want to send and receive end-to-end encrypted private messages.




I want to post on public message boards and read posts from others.





I want to upload and download files.





I want a personal ignore list to hide all content from users I don't want to interact with.



As a Moderator...
I want to be able to temporarily or permanently ban unruly users from the local BBS instance.



As a SysOp (Admin)...
I want all the powers of a Moderator.


I want to configure which external Nostr relays our BBS connects to.



Key Features
User Registration and Authentication

Users can register with a username and password.


Passwords are hashed and salted for security.


Upon registration, a unique salt is generated and stored.


API endpoints are secured using JWT authentication.


Nostr Identity Management

Each user receives a Nostr identity (public/private key pair) upon registration, generated via 

pynostr.PrivateKey.

Private keys are encrypted with a key derived from the user's password and stored securely on the server.

Message Boards

The system supports multiple message boards.


Boards are defined by names, descriptions, and required access levels.


Posting & Reading Messages

Users post messages with a subject and body, which are signed with their Nostr private key.


Messages are published as 

kind 1 Nostr events to specified relays.


The frontend subscribes to relays to display messages in a flat view.


Federated BBS Network (Private File Sync)

Concept: Trusted Axon BBS nodes can form a private, federated network to synchronize files for resilience and redundancy.

Mechanism (Hybrid Encryption): The system uses a secure "digital envelope" model to broadcast a single data chunk to multiple trusted relays.

Session Key: For each data chunk, a random, single-use symmetric key is generated.

Data Encryption: The chunk is encrypted once with this session key.

Digital Envelopes: The session key is then encrypted multiple times, once for each recipient relay's public key.

Bundled Event: A single Nostr event contains the encrypted data chunk and the list of encrypted session keys. This single event is broadcast to all private relays.

Decryption: Each receiving relay finds the envelope it can decrypt with its private key, retrieves the session key, and then decrypts the main data chunk.

Key Revocation: A relay's access is revoked by no longer including an envelope for its public key in future messages.

Anonymity and Privacy

All external network communications are routed through Tor.


The server's 

SECRET_KEY is stored securely in an .env file.

Connectivity and User Experience
Alternative Connection Handlers

The BBS instance will act as a 

privacy proxy for users connecting via non-internet native handlers like Audio Modem or Meshtastic.



For these users, the BBS will publish its own 

.onion address as the user's "home," effectively hiding the user's true connection method from the wider network.



User Onboarding and Education

To address the complexity of the underlying decentralized technologies, the platform must prioritize user education.



Onboarding Flow: A user-friendly onboarding flow will guide new users through key concepts like generating Nostr keys and understanding the federated network.



In-App Help Section: A dedicated help section will provide FAQs, a glossary of terms, and links to advanced resources.



User Notifications: The system will use in-app notifications to provide critical information, such as warnings about key loss.



SysOp Documentation: Comprehensive guides will be provided for SysOps on configuring all underlying services, including Tor and the private Nostr relays.


Technical Requirements

Backend: Django 5.2.4, Python 3.13 



Frontend: React 18+, Tailwind CSS 



Libraries: pynostr for Nostr integration, python-socks for async proxy connections.


Deployment: Docker containers for backend, frontend, and Tor proxy.


Project File Structure
axon_bbs/
├── axon_project/           # Django Project Configuration
│   ├── init.py
│   ├── settings.py
│   └── urls.py
│
├── core/                   # BBS Core Engine
│   ├── init.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   └── services/           # Integrated Services
│       ├── init.py
│       ├── encryption_utils.py
│       ├── identity_service.py
│       ├── nostr_service.py
│       ├── service_manager.py
│       ├── socket_utils.py
│       └── tor_service.py
│
├── api/                    # Web Handler / RESTful API
│   ├── init.py
│   ├── urls.py
│   └── views.py
│
├── handlers/               # Connection Handlers
│   ├── init.py
│   ├── audio_modem_handler.py
│   └── meshtastic_handler.py
│
├── frontend/               # Web Front-End (React)
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── components/
│   │   ├── App.js
│   │   └── apiClient.js
│   └── package.json
│
├── data/                   # Application Data (SQLite DB)
│
├── manage.py               # Django's command-line utility
└── requirements.txt        # Python package dependencies
Future Enhancements
Threaded discussions using Nostr replies.



User profiles on Nostr.



Mobile app integration.



Unique tags for boards (e.g., 

"axon-general") to filter out public Nostr noise.
