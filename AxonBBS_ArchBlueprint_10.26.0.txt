Axon BBS - Architectural Blueprint (Version 10.26.0)
Version: 10.26.0

Last Updated: 2025-10-05

This document outlines the high-level architectural plans and guiding principles for the Axon BBS project. It is intended for developers to understand the "why" behind the code structure.

Core Principles

Modularity: The system is composed of decoupled, single-responsibility modules. This applies to backend Django apps and frontend React components.

Service-Oriented Backend: Complex business logic is encapsulated in service classes, keeping API views "thin" and focused on handling HTTP requests/responses.

Secure by Default: All user content is encrypted. The frontend is treated as an untrusted client, and all security and permission checks are enforced on the backend.

Backend Architecture: Feature Domains
The backend is refactored from two large apps (core, api) into a collection of smaller, self-contained apps, each representing a feature domain.

core: Contains truly cross-cutting models (User, TrustedInstance, FileAttachment) and core services (BitSyncService, SyncService).

accounts: Contains user-related models and logic (IgnoredPubkey, BannedPubkey).

messaging: Contains all public and private messaging models and logic (Message, PrivateMessage, MessageBoard).

applets: Contains the applet framework models and logic (Applet, AppletData, HighScore).

federation: Contains models and services related to inter-server communication (FederatedAction).

Key System Blueprints

New: Secure Applet Loading & Backward Compatibility
To enhance security and maintain usability, the applet loading process has been significantly hardened.
-   Client-Side Integrity Verification: The AppletRunner component is now responsible for guaranteeing the integrity of applet code before execution. It requests the full, encrypted JSON package from the backend, performs a SHA-256 hash on the raw text of this package in the browser, and compares the result to the content_hash stored in the applet's manifest. The applet will only be launched if the hashes match, preventing the execution of corrupted or tampered code.
-   Backward-Compatible Parsing: To support both legacy and new applets, the AppletRunner is now "bilingual." After verifying the integrity of the downloaded package, it inspects the type field within the JSON.
-   If type is "file", it decodes the Base64 data from the data field. This is the new standard for complex, file-based applets.
-   If type is "applet_code", it uses the raw JavaScript from the code field. This maintains compatibility for all older, simpler applets without requiring them to be repackaged.

Dynamic Agent Loading
The system for launching background services (agents) is fully model-driven.
-   Model-Driven Configuration: The core.User model contains agent_service_path and agent_parameters fields, allowing a SysOp to configure, enable, or disable agents entirely through the Django admin panel.
-   Dynamic Import: On startup, the ServiceManager queries the database for active agent users and dynamically imports and instantiates the specified service classes.

Federated Chat (AxonChat)
This system provides a near-real-time chat experience across federated BBS instances.
-   Chat Room Directory: The MessageBoard system serves as the directory for discovering and joining chat rooms.
-   Data Model: The AppletSharedState for a chat room will store the message history and a list of present users.
-   Backend Agent: The ChatAgentService is responsible for processing incoming messages, updating the shared state, and synchronizing the state with peer BBS instances.
-   Symmetrical Communication: A direct API endpoint, /api/applets/<applet_id>/update_state/, allows applets to send messages for immediate processing, while the applet receives updates by polling a lightweight versioning endpoint.

Automated Configuration Cloning
A system for cloning non-sensitive configuration from a trusted peer to bootstrap new BBS instances.
-   Export Endpoint: A secure API endpoint, /api/federation/export_config/, serializes key configuration models (Users, Applets, MessageBoards, etc.) into a JSON format, excluding sensitive data and superuser accounts.
-   Admin Action: A "Clone configuration from peer" action in the TrustedInstance admin page initiates the cloning process via a signed API request.

Universal Embed Framework
This framework allows any file type to be displayed within a message thread using a dedicated, sandboxed applet.
-   Mechanism: The Applet model has a handles_mime_types field (e.g., "video/mp4,video/webm").
-   Frontend Flow: The MessageList component finds a handler applet and launches it in the AppletRunner, passing the file's content_hash as context.
-   Secure Data Access: The applet uses the getAttachmentBlob API to securely fetch and render the file, without ever having direct access to the network or the user's session.
