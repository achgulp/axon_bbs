Axon BBS - Consolidated Product Requirements Document
Version: 8.1 (Updated)Date: July 18, 2025Overview
Axon BBS is a modern, anonymous bulletin board system (BBS) inspired by the classic 90s BBS era. It leverages a custom BitTorrent-like P2P protocol for all message and data distribution, ensuring censorship resistance, bandwidth efficiency, and anonymity within its federated network. The system is built using Django for the backend and React for the frontend, with a focus on user privacy and security. Data is chunked, encrypted with random AES keys, and shared via digital envelopes (keys encrypted per trusted peer's public key), allowing secure multi-hop propagation where intermediates can re-envelope without accessing plaintext.Key updates since version 8.0:Added Alias model for mapping pubkeys to verified nicknames, with fallback to "Moo [16-hex short_id]" for unidentified users (derived from SHA-256 hash of pubkey).
Updated message sending/receiving to include signed nicknames; UI/views resolve duplicates by appending short_id to remote aliases.
Enhanced TrustedInstance with onion_url field for storing .onion addresses of peers, enabling direct P2P addition over Tor.
Added short ID generation utility in encryption_utils.py.
Bumped version to 8.1 for alias/nickname integration and UI fallback logic.

User Roles & StoriesAs a User...I want to generate a new identity keypair or import my existing one so I can control my account.I want to unlock my identity with my password once per session, so I don't have to re-enter it for every action.I want to send and receive end-to-end encrypted private messages (using pub/private keys).I want to post on public message boards and read posts from others (threads as hierarchical JSON).I want to upload and download files (chunked and synced via P2P).I want to stream large video and audio files without downloading the entire file first (using chunked P2P pulls).I want a personal ignore list to hide all content from users I don't want to interact with (based on pubkeys).I want a list of my content so I can request a pinning extension from moderators.I want to request an extension on the lifespan of my content before it is deleted.I want to receive notifications when my content is about to expire so I can request an extension.I want to choose a nickname associated with my pubkey, which is signed and verifiable across BBSes.As a Moderator...I want to be able to temporarily or permanently ban unruly users from the local BBS instance (including banning pubkeys).I want to review and approve or deny user requests for extending the pin duration of their content.I want to review and approve or deny user requests for extending the lifespan of their content.I want to be able to unpin any user's content to enforce content policies, except for content pinned by an Admin.As a SysOp (Admin)...I want all the powers of a Moderator.I want to be able to override pinning rules for any content.I want to configure trusted federated BBS peers (via pubkeys and .onion URLs).I want to set the default time durations for how long content is stored on my BBS.I want to manage a whitelist of trusted federated BBS instances to ensure network security (including generating/encrypting keys and adding .onion URLs).I want to be able to unpin any content on the server, including content pinned by moderators.Key FeaturesUser Registration and AuthenticationUsers can register with a username and password. Passwords are hashed and salted for security.API endpoints are secured using JWT authentication.Identity ManagementThe user interface MUST provide the ability for users to generate a new public/private key pair.The user interface MUST allow users to import an existing private key.Upon user registration, a private key is generated and stored on the server in an encrypted format.To perform actions requiring a signature (e.g., posting a message), the user must first unlock their identity using their password in a session-based model.Once unlocked, the user's unencrypted private key will be held in the server's memory for the duration of the active session.This is a deliberate trade-off, prioritizing user convenience.The unencrypted private key MUST be immediately purged from memory when the user logs out, their session expires, or the server is shut down.User model includes pubkey for association.Users can choose a nickname, which is signed and associated with their pubkey for display across BBSes.Message BoardsThe system supports multiple message boards.Boards are defined by names, descriptions, and required access levels.Threads are stored as hierarchical JSON with nested replies.Federated BBS Network (P2P Chunk Sync)Concept: Trusted Axon BBS nodes form a private, federated P2P network to synchronize data for resilience and redundancy using a BitTorrent-like protocol.Mechanism (Hybrid Encryption with Re-Enveloping): Data is chunked, encrypted with a random AES key per chunk. The AES key is encrypted into envelopes (one per trusted pubkey). A torrent is created from encrypted chunks, with envelopes/signatures in metadata.Intermediate nodes decrypt their envelope to access the AES key, then re-envelope the key for their trusts (removing others), update torrent metadata, and re-seed for multi-hop propagation.For each chunk, a random symmetric key is generated.The chunk is encrypted once with this session key.The session key is encrypted multiple times, once for each recipient peer's public key.The torrent contains encrypted chunks and the list of envelopes in metadata. Peers download via magnet links or DHT.Decryption: Each peer finds/decrypts its envelope to get the session key, then decrypts chunks.Key Revocation: A peer's access is revoked by no longer including its envelope in future torrents.Federation Trust and Security: Managed via a whitelist of trusted peers (TrustedInstance model with pubkey, onion_url, and encrypted_private_key). Supports generating/encrypting keys in admin.Data sync torrents between peers must be authenticated via signatures to verify source.Includes rate-limiting and validation for incoming torrents to prevent abuse.Anonymity and PrivacyAll external P2P communications are routed through Tor.The server's SECRET_KEY is stored securely in an .env file.External Link Policy: Links to external websites posted by users MUST NOT be rendered as clickable hyperlinks (<a> tags). Display as plain text.File Handling and ViewingLive Reassembly: Frontend requests chunks via P2P, reassembles in browser (Blob).Streaming for Media: Request chunks sequentially, feed into Media Source Extensions API.Content Lifecycle and StorageContent Storage Model: BBS nodes are the sole storage layer.P2P protocol acts as transport for chunked data.Files stored as encrypted chunks, reassembled on demand by client.Content Lifecycle Policies (Trash Collection): TTL configurable by SysOp, scheduled deletion.Private Messages: TTL of 3 months.Message Board Posts: TTL of 1 month.Uploaded Files: TTL of 1 week by default.Federated Content: TTL of 3 days.Moderator Pins: TTL of 1 month.Admin Pins: Customizable expiration.Content Persistence Extension: Users request 30-day extensions, reviewed by mods/admins.Content Removal and Unpinning Rules:Users: Unpin own content.Moderators: Unpin any except admin-pinned.Admins: Unpin all.Moderation and ComplianceContent Policy: Defined for prohibited content, DMCA takedown process.Platform-Level Ban System: Ban pubkeys; refuse to sync/seed torrents from banned.User-Level Ignore System: Personal ignore list for pubkeys; filter out content.Connectivity and User ExperienceAlternative Connection Handlers: Privacy proxy for Audio Modem, Meshtastic.User Onboarding: Guide for keys, federation, P2P setup.Performance and MonitoringMonitor P2P connections, Tor latency with Prometheus/Grafana.Error logging without user data exposure.UI status for P2P health.Technical Requirements & File StructureTechnical StackBackend: Django 5.0.6, Python 3.11Frontend: React 18+, Tailwind CSSStreaming: hls.js or shaka-player.P2P: libtorrent for BitTorrent protocol.Cryptography: cryptography for encryption/signing.Project File Structureaxon_bbs/
├── axon_project/ # Django Project Configuration
│ ├── init.py
│ ├── asgi.py
│ ├── settings.py
│ ├── urls.py
│ └── wsgi.py
├── core/ # BBS Core Engine
│ ├── init.py
│ ├── admin.py
│ ├── apps.py
│ ├── migrations/
│ │ └── ...
│ ├── models.py
│ ├── services/
│ │ ├── init.py
│ │ ├── encryption_utils.py
│ │ ├── identity_service.py
│ │ ├── bittorrent_service.py  # For P2P sync
│ │ ├── service_manager.py
│ │ └── tor_service.py
│ └── tests/
│     └── ...
├── api/ # Web Handler / RESTful API
│ ├── init.py
│ ├── consumers.py  # For any WebSocket if needed
│ ├── permissions.py
│ ├── routing.py  # For Channels if retained
│ ├── serializers.py
│ ├── urls.py
│ ├── views.py
│ └── tests/
│     └── ...
├── handlers/ # Alternative Connection Handlers
│ ├── init.py
│ ├── audio_modem_handler.py
│ └── meshtastic_handler.py
├── frontend/ # Web Front-End (React)
│ ├── public/
│ │ └── index.html
│ ├── src/
│ │ ├── components/
│ │ ├── App.js
│ │ └── apiClient.js
│ └── package.json
├── data/ # Application Data (SQLite DB)
│ └── axon_bbs.sqlite3
├── logs/ # Logging
│ └── bbs.log
├── manage.py # Django's command-line utility
└── requirements.txt # Python package dependenciesFuture EnhancementsThreaded discussions (replies in JSON trees).User profiles with pubkeys.Unique identifiers for boards to filter P2P noise.Advanced multi-hop routing in P2P.Rate-limiting for incoming torrents.Summary of Changes and Consolidation:Shifted from Nostr to custom BitTorrent-like P2P for federation, with chunking, signing, envelopes, and re-enveloping.Added Alias model and nickname/short ID logic.Added onion_url to TrustedInstance.All previous functional requirements met with new protocol.


