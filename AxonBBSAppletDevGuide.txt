Axon BBS Applet Development Guide
This document outlines the technical requirements, available APIs, and best practices for developing secure, sandboxed applications (applets) for the Axon BBS platform.

1. Core Concepts
Single-File Architecture: Every applet must be a single, self-contained JavaScript file. All HTML, CSS, and JavaScript logic must be bundled into this one file. This is a strict requirement for the Axon BBS deployment process.

Sandboxed Execution: Applets are executed within a sandboxed <iframe>. This is a critical security feature that prevents applets from accessing the main BBS application's data, such as session tokens, user credentials, or the parent DOM. All interaction with the BBS must happen through the provided asynchronous API.

Asynchronous API: All communication between the applet and the BBS host is asynchronous. Developers must use async/await when calling any function from the window.bbs API to ensure proper functionality.

2. The Applet API (window.bbs)
A global window.bbs object is automatically available within the applet's environment. This is the sole method for communicating with the Axon BBS host.

await bbs.getUserInfo()

Purpose: Fetches the profile information for the currently logged-in user.

Returns: A Promise that resolves to a JSON object with the user's data.

Example Response:

JSON

{
  "username": "newjdcity",
  "nickname": "bigoldcity",
  "pubkey": "...",
  "avatar_url": "/media/avatars/newjdcity_avatar.png"
}
await bbs.getData()

Purpose: Retrieves the last saved data object for this specific applet and user.

Returns: A Promise that resolves to the saved JSON object, or null if no data has been saved yet.

await bbs.saveData(newData)

Purpose: Saves a new data object for the applet and user. This data is encrypted and synchronized across the federated network via BitSync.

Arguments:

newData (Object): A JSON-serializable object containing the data you wish to save.

Returns: A Promise that resolves with a success status object.

3. High Score Board Integration (for "Game" Category Applets)
If your applet is a game and you want it to participate in the federated high score board, you must save a data object that includes a score key. The backend service will automatically process this data.

Standard Fields: The following keys have special meaning on the high score board. All are optional except for score.

score (number): The player's total score. (Required)

wins (number): Total number of wins.

losses (number): Total number of losses.

kills (number): Total kills.

deaths (number): Total deaths.

assists (number): Total assists.

Example saveData Call for a Game:

JavaScript

const myGameStats = {
  score: 13900,
  wins: 16,
  losses: 13,
  deaths: 9,
  abductions: 4, // Custom field, will be saved but not shown on the main board
  spaceLosses: 0, // Another custom field
  // "kills" and "assists" are omitted, so they will show as "N/A"
};
await bbs.saveData(myGameStats);
4. Debugging
A global boolean, window.BBS_DEBUG_MODE, is injected into the applet's environment. Its value is controlled by the "Is debug mode" checkbox in the applet's admin panel. Applets must respect this flag to show or hide their debug consoles.

Example Implementation:

JavaScript

// Place the debug console HTML outside the main container
document.getElementById('applet-root').innerHTML = `
    <div id="debug-dialog">...</div>
    <div class="applet-container">...</div>
`;

const debugDialog = document.getElementById('debug-dialog');

// Conditionally show or hide the console
if (window.BBS_DEBUG_MODE !== true) {
    debugDialog.style.display = 'none';
}

// Wrap logging calls in a function that checks the flag
function debugLog(message) {
    if (window.BBS_DEBUG_MODE !== true) return;
    // ... logic to append message to the debug console
}
5. UI/UX and Mobile Responsiveness
DOM Root: The applet must render all its UI inside the provided <div id="applet-root"></div>.

Mobile-First Design: Applets must be fully responsive and functional on all screen sizes. Use flexible CSS layouts (like Flexbox or Grid) and avoid fixed-pixel widths that break on smaller screens. The FloatUpMaze applet's CSS provides a good example of how to center content and create a responsive container.
