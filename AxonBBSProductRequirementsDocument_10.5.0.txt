Axon BBS - Product Requirements Document
Version: 10.5.0 (Agent & Event-Bus Architecture)
Date: August 30, 2025

1. Overview
Axon BBS is a modern, anonymous bulletin board system built on a private, federated network of trusted nodes. It prioritizes user privacy and architectural resilience through a custom P2P data synchronization protocol named BitSync. This version introduces a powerful, generic architecture for creating persistent, pseudo-real-time multiplayer games and applications via a server-side Agent-as-a-User model and a message-board-based Event Bus.

This document consolidates all previous versions and serves as the definitive guide for the platform's current state.

2. User Roles & Stories
As a User...
A standard participant on the BBS. Their focus is on communication, personalization, and interacting with the applications hosted on the platform.

I want to generate or import my cryptographic identity, so that I can securely and anonymously interact with the system.

I want to securely back up my private key, so that I can recover my account and preserve my identity if I lose access to my primary device.

I want to upload a profile avatar, so that I can personalize my identity and be more recognizable to others.

I want to unlock my identity once per session for cryptographic actions, such as sending messages or saving game data, to ensure my private key is not held in memory unnecessarily.

I want to send and receive E2E encrypted private messages, so I can communicate securely with other users without the server or admins being able to read my conversations.

I want to post on public message boards, so I can participate in community discussions.

I want to choose a unique nickname, to create a persistent and recognizable handle that is distinct from my username.

I want to run sandboxed games and applications (applets), so I can enjoy interactive content securely without risk to my device or data.

I want my progress in an applet to be saved automatically, so that I can pick up where I left off without manual intervention.

I want to play persistent games that continue to run while I am offline, allowing for a dynamic game world where events can happen even when I am not logged in.

I want to view a federated high score board for games, so I can compare my performance with all players across the entire network.

As an Applet Developer...
A technical user who creates the games and utilities that run on the BBS. Their needs revolve around a simple, secure, and powerful API.

I want to package my application as a single, self-contained JavaScript file, for easy distribution and installation by a SysOp.

I want a simple, secure API to save and load my applet's private data, so that user progress is encrypted and tied to their identity.

I want an API to post public "action" messages to a designated message board for my game, so that my applet can broadcast player actions (e.g., an attack) to the entire network.

I want an API to read the public event log for my game from its message board, so my applet can react to game state changes initiated by other players or server agents.

I want to provide a server-side agent script that defines the rules and logic for my game, which will run persistently to manage the game world.

I want assurance that my applet and its agent will run in a secure, sandboxed environment, to protect both the server and the users.

As a SysOp (System Operator/Admin)...
The administrator of a BBS node. They are responsible for maintenance, user management, content curation, and federation with other nodes.

I want all the powers of a standard User, so I can interact with the system I manage.

I want to manage a whitelist of trusted federated peers, to control which other BBS nodes my instance will synchronize with.

I want to add new applets by uploading their source code, to provide new content for my users.

I want to create and manage categories for applets (e.g., 'Game', 'Utility'), to keep the applet library organized.

I want to create special "agent" user accounts that can run persistently in the background, to enable persistent multiplayer games.

I want to assign a specific message board to an applet to act as its official "Event Bus", to provide a dedicated channel for that applet's public game events.

3. The Agent & Event-Bus Architecture
To support persistent, pseudo-real-time multiplayer applets, Axon BBS provides a generic, reusable architecture. This system is not hard-coded to any specific game and is designed to be secure and scalable.

The Agent-as-a-User Model
Concept: A game's server-side logic is not run as a privileged, system-level service. Instead, it is run as a special, non-player user account (an "Agent").

Implementation: A SysOp can create a standard user and enable the is_agent flag in the admin panel. The agent's logic is defined in a corresponding Python service file (e.g., fortress_overlord_agent_service.py) which is automatically loaded and run by the main BBS server at startup.

Security: This model enforces the principle of least privilege. The agent has its own cryptographic identity and can only perform actions allowed for its user account. All its public actions (like posting battle reports) are cryptographically signed, ensuring they are authentic and auditable.

The Message Board as an Event Bus
Concept: Player actions that affect other players are not sent directly. Instead, they are posted as encrypted, public messages to a dedicated message board that acts as a game-wide event log.

Implementation: In the Applet admin panel, a SysOp can assign any MessageBoard to an applet via the event_board field. This board becomes the single source of truth for all public events related to that applet.

The "Home Server Authority" Model
Concept: To prevent race conditions in the federated network, only one agent is ever authoritative for resolving an action. The authority is granted to the agent running on the home server of the target of the action.

Example: If Player A (on Server A) attacks Player B (on Server B), the "attack" message is seen by all agents. However, only the agent on Server B will process the event because Player B is its local user. All other agents will ignore it.

4. Full Project File Structure
This diagram represents the complete and accurate file structure for the axon_bbs project as of version 10.5.0.

axon_bbs/
├── .env
├── manage.py
├── requirements.txt
├── media/
│   └── avatars/
├── logs/
│   └── bbs.log
├── data/
│   ├── axon_bbs.sqlite3
│   ├── bitsync_chunks/
│   └── user_data/
├── axon_project/
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── api/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── permissions.py
│   ├── serializers.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── core/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   ├── management/
│   │   └── commands/
│   │       ├── check_local_content.py
│   │       ├── cleanup_orphaned_files.py
│   │       ├── compare_sync_status.py
│   │       ├── diagnose_sync_content.py
│   │       ├── process_scores.py
│   │       ├── reset_peer_sync_time.py
│   │       └── update_peer_key.py
│   ├── migrations/
│   │   ├── ... (migration files) ...
│   └── services/
│       ├── __init__.py
│       ├── bitsync_service.py
│       ├── content_validator.py
│       ├── encryption_utils.py
│       ├── fortress_overlord_agent_service.py
│       ├── high_score_service.py
│       ├── identity_service.py
│       ├── service_manager.py
│       ├── socket_utils.py
│       ├── sync_service.py
│       └── tor_service.py
├── frontend/
│   ├── build/
│   ├── node_modules/
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── App.js
│   │   ├── apiClient.js
│   │   ├── index.js
│   │   ├── reportWebVitals.js
│   │   ├── applet_api/
│   │   │   └── api.js
│   │   ├── applets/
│   │   │   ├── FortressOverlord.js
│   │   │   ├── FloatUpMaze.js
│   │   │   ├── PipeDoger.js
│   │   │   └── Template.js
│   │   └── components/
│   │       ├── AnsiViewer.js
│   │       ├── AppletRunner.js
│   │       ├── AppletView.js
│   │       ├── HighScoreBoard.js
│   │       ├── LoginScreen.js
│   │       ├── MessageList.js
│   │       ├── ProfileScreen.js
│   │       ├── RegisterScreen.js
│   │       └── UnlockForm.js
│   └── ... (config files like package.json, tailwind.config.js) ...
├── handlers/
│   ├── __init__.py
│   ├── audio_modem_handler.py
│   ├── meshtastic_handler.py
│   └── tests/
└── diagnostic_scripts/
    ├── check_trusted_instances.py
    ├── extract_instance_key.py
    ├── extract_key.py
    ├── extract_manifest.py
    ├── extract_pubkey.py
    ├── generate_secret_key.py
    ├── minimal_test.py
    ├── recover_identity.py
    ├── test_crypto_cycle.py
    ├── test_decryption.py
    ├── test_onion_connection.py
    └── websocket_proxy_test.py

