Axon BBS - Product Requirements Document
Version: 9.6.0 (Avatars & Enhanced E2E Messaging)
Date: August 27, 2025

1. Overview
Axon BBS is a modern, anonymous bulletin board system (BBS) built on a private, federated network of trusted nodes. It prioritizes user privacy and architectural resilience through a custom P2P data synchronization protocol named BitSync.

This version introduces significant enhancements, including true end-to-end (E2E) encrypted private messaging between users, the ability for users to set a custom avatar, and improved identity management features such as encrypted key backups.

2. User Roles & Stories
As a User...
I want to generate a new identity keypair or import an existing one so I can control my account.

I want to securely back up my private key to a password-encrypted .pem file so I can restore my account later.

I want to upload a 128x128 avatar image to my profile so it appears next to my messages.

I want to unlock my identity with my password once per session so I don't have to re-enter it for every action.

I want to send and receive true end-to-end encrypted private messages with other users, including those on different federated instances.

I want an outbox to see the private messages I have sent, and the ability to forward them to other users.

I want to start a private message with the author of a public post by clicking a "Send Private Message" button on their message.

I want the system to remember remote users I've messaged before by creating a local, case-insensitive alias so I can contact them again easily.

I want to post on public message boards and read posts from others.

I want to choose a nickname associated with my public key, which is verifiable across the network.

I want a personal ignore list to hide all content from specific users based on their public keys.

I want to receive notifications when my content is about to expire so I can request an extension.

I want to request an extension on the lifespan of my content before it is deleted.

As a Moderator...
I want to be able to temporarily or permanently ban users from the local BBS instance by their public key.

I want to review and approve or deny user requests for extending the lifespan of their content.

I want to be able to unpin any user's content to enforce content policies, except for content pinned by an Admin.

I want my actions (like deleting illicit content) to be broadcast to peer instances so they can also take action, protecting the whole network.

As a SysOp (Admin)...
I want all the powers of a Moderator.

I want to be able to override pinning rules and unpin any content on the server.

I want to configure and manage a whitelist of trusted federated BBS peers via their .onion URLs.

I want to automatically fetch a peer's public key using only their onion URL to prevent copy-paste errors.

I want to reset the synchronization timestamp for a peer to force a full content re-sync for troubleshooting.

I want to explicitly mark which peers are trusted for syncing via an is_trusted_peer checkbox.

I want to set the default time durations for how long content is stored on my BBS.

I want the ability to re-key existing messages to grant access to newly added trusted peers without needing to re-create the original content.

I want to see the checksum of user and alias public keys in the admin panel to easily diagnose key mismatches.

3. Full Project File Structure
axon_bbs/
├── axon_project/
│   ├── settings.py
│   └── urls.py
├── core/
│   ├── management/
│   │   └── commands/
│   │       ├── check_local_content.py
│   │       ├── cleanup_orphaned_files.py
│   │       ├── compare_sync_status.py
│   │       ├── diagnose_sync_content.py
│   │       ├── reset_peer_sync_time.py
│   │       └── update_peer_key.py
│   ├── migrations/
│   ├── services/
│   │   ├── bitsync_service.py
│   │   ├── content_validator.py
│   │   ├── encryption_utils.py
│   │   ├── identity_service.py
│   │   ├── service_manager.py
│   │   ├── sync_service.py
│   │   └── tor_service.py
│   ├── admin.py
│   ├── apps.py
│   └── models.py
├── api/
│   ├── permissions.py
│   ├── serializers.py
│   ├── urls.py
│   └── views.py
├── frontend/
│   ├── build/
│   ├── public/
│   ├── src/
│   └── package.json
├── data/
│   └── axon_bbs.sqlite3
├── logs/
│   └── bbs.log
├── manage.py
├── requirements.txt
├── test_crypto_cycle.py
├── test_decryption.py
├── extract_manifest.py
├── recover_identity.py
└── extract_pubkey.py
