--- CODE MANIFEST FOR 'axon_bbs' PROJECT ---

### File: axon_bbs/check_trusted_instances.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/check_trusted_instances.py
import os
import sys
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')
try:
    django.setup()
except Exception as e:
    print(f"Error setting up Django: {e}")
    sys.exit(1)

from core.models import TrustedInstance
from core.services.encryption_utils import generate_checksum

def check_instances():
    print("--- Axon BBS Instance Diagnostic Tool ---")

    print("\n[1] Checking for Local Instance(s)...")
    # UPDATED: The query now also ensures 'is_trusted_peer' is False.
    local_instances = TrustedInstance.objects.filter(
        encrypted_private_key__isnull=False,
        is_trusted_peer=False
    )
    count = local_instances.count()

    if count == 1:
        local_instance = local_instances.first()
        print("  Status: OK - Found exactly one local instance.")
        local_pubkey = local_instance.pubkey
        if local_pubkey:
            print(f"  URL: {local_instance.web_ui_onion_url or 'Not Set'}")
            print(f"  Local Pubkey Checksum: {generate_checksum(local_pubkey)}")
        else:
            print("  Warning: Local instance found but has no public key.")
    elif count > 1:
        print(f"  Status: FATAL ERROR - Found {count} non-peer instances with encrypted private keys.")
        print("  This can cause decryption failures. There should be exactly one instance with a private key that has 'Is trusted peer' unchecked.")
        for instance in local_instances:
            print(f"  - Found conflicting instance for URL: {instance.web_ui_onion_url or 'URL Not Set'}")
    else: # count == 0
        print("  Status: NOT FOUND - No local instance with an encrypted private key was found.")

if __name__ == "__main__":
    check_instances()

```

### File: axon_bbs/extract_instance_key.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/extract_instance_key.py
# Standalone script to decrypt and display the local instance's private key.
import os
import sys
import django
from cryptography.fernet import Fernet
import base64

# --- Django Setup ---
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')
django.setup()
# --- End Django Setup ---

from django.conf import settings
from core.models import TrustedInstance

def extract_instance_key():
    """
    Finds the local instance, decrypts its private key using the
    Django SECRET_KEY, and prints it to the console.
    """
    print("[*] Searching for local trusted instance in the database...")

    # 1. Find the local instance (it's the only one with an encrypted key)
    local_instance = TrustedInstance.objects.filter(
        encrypted_private_key__isnull=False
    ).first()

    if not local_instance:
        print("\n[ERROR] No local instance with an encrypted private key was found.")
        print("Please ensure you have generated keys for your instance via the admin panel.")
        return

    print(f"[*] Found local instance for URL: {local_instance.web_ui_onion_url}")

    # 2. Derive the decryption key from the Django SECRET_KEY
    try:
        if not settings.SECRET_KEY:
            raise ValueError("SECRET_KEY is not set in your settings or .env file.")
        
        # This logic matches the encryption method in core/admin.py
        key = base64.urlsafe_b64encode(settings.SECRET_KEY.encode()[:32])
        f = Fernet(key)
    except Exception as e:
        print(f"\n[ERROR] Could not prepare the decryption key: {e}")
        return

    # 3. Decrypt and print the private key
    try:
        encrypted_key = local_instance.encrypted_private_key
        decrypted_pem = f.decrypt(encrypted_key.encode()).decode('utf-8')

        print("\n--- SUCCESS ---")
        print("Unencrypted Instance Private Key:")
        print(decrypted_pem)
        print("--- END KEY ---")

    except Exception as e:
        print(f"\n[ERROR] Failed to decrypt the private key. Is your SECRET_KEY correct?")
        print(f"Details: {e}")

if __name__ == "__main__":
    extract_instance_key()

```

### File: axon_bbs/extract_key.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/extract_key.py
# Standalone script to decrypt and display a user's private key.
import os
import sys
import django
import getpass

# --- Django Setup ---
# This allows the script to use the project's models and services.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')
django.setup()
# --- End Django Setup ---

from django.conf import settings
from core.services.identity_service import IdentityService
from core.services.encryption_utils import derive_key_from_password

def extract_private_key():
    """
    Prompts for user credentials, decrypts the identity file,
    and prints the unencrypted private key.
    """
    # 1. Get user credentials
    username = input("Enter the username for the key you want to extract: ")
    if not username:
        print("Username cannot be empty.")
        return

    try:
        password = getpass.getpass(f"Enter password for user '{username}': ")
    except Exception as error:
        print(f"ERROR: Could not read password: {error}")
        return

    # 2. Construct paths to the user's data files
    user_data_dir = os.path.join(settings.BASE_DIR, 'data', 'user_data', username)
    salt_path = os.path.join(user_data_dir, 'salt.bin')
    identity_storage_path = os.path.join(user_data_dir, 'identities.dat')

    if not os.path.exists(salt_path) or not os.path.exists(identity_storage_path):
        print(f"ERROR: Data files for user '{username}' not found.")
        print("Please ensure the username is correct and the server has been run at least once for this user.")
        return

    # 3. Derive the encryption key from the password and salt
    try:
        with open(salt_path, 'rb') as f:
            salt = f.read()
        encryption_key = derive_key_from_password(password, salt)
    except Exception as e:
        print(f"ERROR: Could not derive encryption key. Details: {e}")
        return

    # 4. Use the IdentityService to load and decrypt the keys
    try:
        identity_service = IdentityService(
            storage_path=identity_storage_path,
            encryption_key=encryption_key
        )
        # The IdentityService automatically loads and decrypts upon initialization
        identity = identity_service.get_identity_by_name("default")

        if not identity:
            print("\n---")
            print("ERROR: Could not decrypt or find the 'default' identity.")
            print("This usually means the password was incorrect.")
            print("---")
            return

        private_key = identity.get('private_key')

        if not private_key:
            print("ERROR: Identity found, but it does not contain a private key.")
            return

        # 5. Print the unencrypted private key
        print("\n--- SUCCESS ---")
        print("Unencrypted Private Key for user '{}':".format(username))
        print(private_key)
        print("--- END KEY ---")

    except Exception as e:
        print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    extract_private_key()

```

### File: axon_bbs/extract_manifest.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/extract_manifest.py
import os
import sys
import django
import json

# --- Django Setup ---
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')
try:
    django.setup()
except Exception as e:
    print(f"Error setting up Django: {e}")
    sys.exit(1)

from core.models import Message, FileAttachment
# --- End Django Setup ---

def extract_manifest():
    """
    Finds all content with a manifest, displays a list, and prints
    the manifest of the user's selection in a readable JSON format.
    """
    print("--- Manifest Extraction Tool ---")
    
    try:
        # 1. Find all available content and display a list
        print("\n[1] Searching for available content in the database...")
        messages = Message.objects.filter(manifest__isnull=False)
        files = FileAttachment.objects.filter(manifest__isnull=False)
        all_content = list(messages) + list(files)

        if not all_content:
            print("   - No content with manifests found in the database.")
            return

        print(f"   - Found {len(all_content)} item(s):")
        for i, item in enumerate(all_content):
            content_type = "Message" if isinstance(item, Message) else "File"
            name = item.subject if isinstance(item, Message) else item.filename
            hash_short = item.manifest.get('content_hash', 'N/A')[:12]
            print(f"  [{i+1}] {content_type}: '{name}' (hash: {hash_short}...)")

        # 2. Get user input
        choice = input("\nEnter the number of the item to inspect: ")
        selected_index = int(choice) - 1

        if not (0 <= selected_index < len(all_content)):
            print("Invalid selection.")
            return

        selected_item = all_content[selected_index]
        manifest = selected_item.manifest
        
        print("\n--- ✅ Manifest for Selected Item ---")
        print(json.dumps(manifest, indent=2))
        print("--- End of Manifest ---")

    except Exception as e:
        print(f"\n--- ❌ An error occurred ---")
        print(f"Error: {e}")

if __name__ == "__main__":
    extract_manifest()

```

### File: axon_bbs/extract_pubkey.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/extract_pubkey.py
import sys
from cryptography.hazmat.primitives import serialization

def extract_public_key(private_key_path):
    """
    Reads a private key PEM file and prints its corresponding public key.
    """
    try:
        with open(private_key_path, "rb") as key_file:
            private_key = serialization.load_pem_private_key(
                key_file.read(),
                password=None  # Assuming the key is not encrypted
            )
        
        public_key = private_key.public_key()
        
        public_key_pem = public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        
        print("--- Public Key ---")
        print(public_key_pem.decode('utf-8'))
        
    except Exception as e:
        print(f"An error occurred: {e}")
        print("Please ensure the file path is correct and the key is not password-protected.")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python extract_pubkey.py <path_to_private_key.pem>")
        sys.exit(1)
    
    extract_public_key(sys.argv[1])

```

### File: axon_bbs/generate_secret_key.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/generate_secret_key.py
import random
import string
import os

def generate_secret_key(length=50):
    """Generate a random Django SECRET_KEY."""
    chars = string.ascii_letters + string.digits + '!@#$%^&*(-_=+)'
    return ''.join(random.choice(chars) for _ in range(length))

if __name__ == '__main__':
    secret_key = generate_secret_key()
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    with open(env_path, 'w') as f:
        f.write("SECRET_KEY=" + secret_key + "\n")
    print("Generated SECRET_KEY and saved to " + env_path + ". Add .env to .gitignore!")

```

### File: axon_bbs/manage.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/manage.py

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys
from pathlib import Path # <-- ADD THIS LINE

# --- Application Version ---
APP_VERSION = "10.5.0"

def main():
    """Run administrative tasks."""
    # --- ADD THIS BLOCK TO AUTOMATICALLY CREATE DIRECTORIES ---
    BASE_DIR = Path(__file__).resolve().parent
    REQUIRED_DIRS = [
        BASE_DIR / 'logs',
        BASE_DIR / 'data',
    ]
    for path in REQUIRED_DIRS:
        os.makedirs(path, exist_ok=True)
    # --- END OF BLOCK TO ADD ---

    if os.environ.get('RUN_MAIN') != 'true':
        print(f"--- Axon BBS Management Utility v{APP_VERSION} ---")
    
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc

    is_runserver = 'runserver' in sys.argv
    is_reloader = os.environ.get('RUN_MAIN') == 'true'

    if is_runserver and not is_reloader:
       
        print("Starting development server at http://127.0.0.1:8000/")
        print("Admin site available at http://127.0.0.1:8000/admin/")

    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```

### File: axon_bbs/minimal_test.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/minimal_test.py

import socks
import socket

print("Configuring SOCKS proxy with remote DNS...")
try:
    # --- CHANGE START ---
    # Hardcoded port 9999 changed to 9050, the standard Tor default.
    socks.set_default_proxy(socks.SOCKS5, "127.0.0.1", 9050, rdns=True)
    # --- CHANGE END ---
    socket.socket = socks.socksocket
    print("Proxy configured.")
except Exception as e:
    print(f"Failed to configure proxy: {e}")
    exit()

target_host = "relay.damus.io"
target_port = 443

print(f"\nAttempting to create a connection to {target_host}:{target_port}...")

try:
    # This command attempts a direct socket connection
    socket.create_connection((target_host, target_port), timeout=10)
    print("\nSUCCESS: Connection was successful!")
    print("This means PySocks and your proxy are working correctly.")
except Exception as e:
    print(f"\nFAILURE: Connection failed.")
    print(f"Error: {e}")

```

### File: axon_bbs/recover_identity.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/recover_identity.py
import os
import sys
import django
import getpass
import shutil

# --- Django Setup ---
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')
try:
    django.setup()
except Exception as e:
    print(f"Error setting up Django: {e}")
    sys.exit(1)
# --- End Django Setup ---

from django.conf import settings
from django.contrib.auth import get_user_model
from core.services.identity_service import IdentityService
from core.services.encryption_utils import derive_key_from_password, generate_salt

User = get_user_model()

def recover_identity(username):
    """
    Deletes a user's corrupted identity files and generates a new identity,
    updating their password and public key in the process.
    """
    print(f"--- Identity Recovery for user: {username} ---")

    # 1. Find the user
    try:
        user = User.objects.get(username=username)
    except User.DoesNotExist:
        print(f"\n[ERROR] User '{username}' not found in the database.")
        return

    # 2. Define user data paths
    user_data_dir = os.path.join(settings.BASE_DIR, 'data', 'user_data', username)
    salt_path = os.path.join(user_data_dir, 'salt.bin')
    identity_storage_path = os.path.join(user_data_dir, 'identities.dat')

    # 3. Delete corrupted files
    print("\n[1] Deleting old identity files (if they exist)...")
    if os.path.exists(identity_storage_path):
        os.remove(identity_storage_path)
        print(f"  - Removed: {identity_storage_path}")
    if os.path.exists(salt_path):
        os.remove(salt_path)
        print(f"  - Removed: {salt_path}")

    # 4. Get a new password for the user
    print("\n[2] Please set a new password for the user.")
    try:
        new_password = getpass.getpass(f"Enter new password for '{username}': ")
        if not new_password:
            print("Password cannot be empty. Aborting.")
            return
        password_confirm = getpass.getpass("Confirm new password: ")
        if new_password != password_confirm:
            print("Passwords do not match. Aborting.")
            return
    except Exception as error:
        print(f"ERROR: Could not read password: {error}")
        return

    # 5. Generate new identity using the same logic as registration
    print("\n[3] Generating new salt and identity...")
    try:
        os.makedirs(user_data_dir, exist_ok=True)
        salt = generate_salt()
        with open(salt_path, 'wb') as f:
            f.write(salt)
        
        encryption_key = derive_key_from_password(new_password, salt)
        identity_service = IdentityService(
            storage_path=identity_storage_path,
            encryption_key=encryption_key
        )
        identity = identity_service.generate_and_add_identity(name="default")
        
        # 6. Update user model
        user.pubkey = identity['public_key']
        user.set_password(new_password)
        user.save()
        print("  - New identity generated.")
        print("  - User password and public key have been updated.")

    except Exception as e:
        print(f"\n[ERROR] An unexpected error occurred while generating the new identity: {e}")
        return

    print("\n--- ✅ RECOVERY COMPLETE ---")
    print(f"The identity for user '{username}' has been reset.")
    print("They can now log in with their new password.")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python recover_identity.py <username>")
        sys.exit(1)
    
    target_username = sys.argv[1]
    recover_identity(target_username)

```

### File: axon_bbs/test_crypto_cycle.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/test_crypto_cycle.py
import os
import sys
import django
import traceback
import base64
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.asymmetric import rsa, padding as rsa_padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.padding import PKCS7

# --- Django Setup ---
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')
try:
    django.setup()
except Exception as e:
    print(f"Error setting up Django: {e}")
    sys.exit(1)

from django.conf import settings
from core.models import TrustedInstance
# --- End Django Setup ---


def run_crypto_test():
    print("--- Starting Crypto Cycle Test with Stored Instance Key ---")
    private_key = None
    try:
        # 1. Load and decrypt the local instance's private key from the database
        print("[1] Loading and decrypting local instance private key...")
        local_instance = TrustedInstance.objects.get(
            encrypted_private_key__isnull=False, 
            is_trusted_peer=False
        )
        
        if not (local_instance and local_instance.encrypted_private_key):
            raise ValueError("Local instance with an encrypted private key was not found.")

        # Derive the decryption key from the Django SECRET_KEY
        key = base64.urlsafe_b64encode(settings.SECRET_KEY.encode()[:32])
        f = Fernet(key)
        decrypted_pem = f.decrypt(local_instance.encrypted_private_key.encode())
        
        # Load the private key object
        private_key = serialization.load_pem_private_key(decrypted_pem, password=None)
        public_key = private_key.public_key()
        print("    - Success. Key loaded.")

        # 2. Generate a dummy AES key (this is what we're trying to protect)
        print("[2] Generating a new one-time AES key...")
        aes_key = os.urandom(32)
        print(f"    - AES Key (first 8 bytes): {aes_key[:8].hex()}...")

        # 3. Encrypt the AES key with the public key (create the "envelope")
        print("[3] Encrypting the AES key with the instance's public key...")
        encrypted_aes_key = public_key.encrypt(
            aes_key,
            rsa_padding.OAEP(
                mgf=rsa_padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )
        print("    - Success.")

        # 4. Decrypt the AES key with the private key (open the "envelope")
        print("[4] Decrypting the AES key with the instance's private key...")
        decrypted_aes_key = private_key.decrypt(
            encrypted_aes_key,
            rsa_padding.OAEP(
                mgf=rsa_padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )
        print(f"    - Decrypted AES Key (first 8 bytes): {decrypted_aes_key[:8].hex()}...")

        # 5. Verify that the decrypted key matches the original
        print("[5] Verifying keys match...")
        if decrypted_aes_key == aes_key:
            print("    - Success, keys match.")
        else:
            print("    - FAILURE, keys DO NOT match.")
            return

        # 6. Test a full AES cycle just to be sure
        print("[6] Performing a test AES encryption/decryption cycle...")
        iv = os.urandom(16)
        cipher = Cipher(algorithms.AES(decrypted_aes_key), modes.CBC(iv))
        
        # Encrypt
        padder = PKCS7(algorithms.AES.block_size).padder()
        padded_data = padder.update(b"test message") + padder.finalize()
        encryptor = cipher.encryptor()
        encrypted_data = encryptor.update(padded_data) + encryptor.finalize()

        # Decrypt
        decryptor = cipher.decryptor()
        decrypted_padded_data = decryptor.update(encrypted_data) + decryptor.finalize()
        unpadder = PKCS7(algorithms.AES.block_size).unpadder()
        decrypted_data = unpadder.update(decrypted_padded_data) + unpadder.finalize()

        if decrypted_data == b"test message":
            print("    - Success, AES cycle complete.")
        else:
            print("    - FAILURE, AES data does not match.")
            return

        print("\n--- ✅ CRYPTO CYCLE SUCCEEDED ---")

    except Exception as e:
        print(f"\n--- ❌ CRYPTO CYCLE FAILED ---")
        print(f"Error: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    run_crypto_test()

```

### File: axon_bbs/test_decryption.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/test_decryption.py
import os
import sys
import django
import traceback
import base64
import json
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding as rsa_padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.padding import PKCS7

# --- Django Setup ---
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')
try:
    django.setup()
except Exception as e:
    print(f"Error setting up Django: {e}")
    sys.exit(1)

from django.conf import settings
from django.db.models import Q
from core.models import TrustedInstance, Message, FileAttachment

# --- End Django Setup ---

def run_decryption_test():
    print("--- Stored Content Decryption Test ---")
    
    try:
        # 1. Find all available content and display a list
        print("\n[1] Searching for available content in the database...")
        messages = Message.objects.filter(manifest__isnull=False)
        files = FileAttachment.objects.filter(manifest__isnull=False)
        all_content = list(messages) + list(files)

        if not all_content:
            print("   - No content with manifests found in the database.")
            return

        print(f"   - Found {len(all_content)} item(s) available for testing:")
        for i, item in enumerate(all_content):
            content_type = "Message" if isinstance(item, Message) else "File"
            name = item.subject if isinstance(item, Message) else item.filename
            hash_short = item.manifest.get('content_hash', 'N/A')[:12]
            print(f"  [{i+1}] {content_type}: '{name}' (hash: {hash_short}...)")

        # 2. Get user input
        choice = input("\nEnter the number of the content to test: ")
        selected_index = int(choice) - 1

        if not (0 <= selected_index < len(all_content)):
            print("Invalid selection.")
            return

        selected_item = all_content[selected_index]
        content_hash = selected_item.manifest.get('content_hash')
        manifest = selected_item.manifest
        
        print(f"\n[2] Testing content with hash: {content_hash[:12]}...")

        # 3. Assemble the encrypted data from chunks on disk
        print("[3] Assembling encrypted data from local chunks...")
        chunk_storage_path = os.path.join(settings.BASE_DIR, 'data', 'bitsync_chunks')
        content_chunk_dir = os.path.join(chunk_storage_path, content_hash)
        
        num_chunks = len(manifest.get('chunk_hashes', []))
        encrypted_data = b""
        for i in range(num_chunks):
            chunk_path = os.path.join(content_chunk_dir, f"{i}.chunk")
            if not os.path.exists(chunk_path):
                print(f"   - FAILURE: Chunk {i} is missing from disk at {chunk_path}")
                return
            with open(chunk_path, 'rb') as f:
                encrypted_data += f.read()
        
        print(f"   - Success: Assembled {len(encrypted_data)} bytes from {num_chunks} chunk(s).")

        # 4. Load the local private key
        print("[4] Loading and decrypting local instance private key...")
        local_instance = TrustedInstance.objects.get(encrypted_private_key__isnull=False, is_trusted_peer=False)
        key = base64.urlsafe_b64encode(settings.SECRET_KEY.encode()[:32])
        f = Fernet(key)
        decrypted_pem = f.decrypt(local_instance.encrypted_private_key.encode())
        private_key = serialization.load_pem_private_key(decrypted_pem, password=None)
        print("   - Success: Key loaded.")

        # 5. Attempt to decrypt the AES key from the manifest's envelope
        print("[5] Attempting to open the encryption envelope...")
        try:
            from core.services.encryption_utils import generate_checksum
            local_checksum = generate_checksum(local_instance.pubkey)
        except ImportError:
            local_checksum = base64.b64encode(hashlib.md5(local_instance.pubkey.strip().encode()).digest()).decode()


        encrypted_aes_key_b64 = manifest['encrypted_aes_keys'].get(local_checksum)
        if not encrypted_aes_key_b64:
            print(f"   - FAILURE: Could not find an encryption envelope for our key (checksum: {local_checksum}) in the manifest.")
            print(f"   - Available checksums in manifest are: {list(manifest['encrypted_aes_keys'].keys())}")
            return
        
        encrypted_aes_key = base64.b64decode(encrypted_aes_key_b64)
        aes_key = private_key.decrypt(
            encrypted_aes_key,
            rsa_padding.OAEP(mgf=rsa_padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
        )
        print(f"   - Success: Envelope opened. AES Key: {aes_key.hex()[:16]}...")
        
        # 6. Attempt to decrypt the content
        print("[6] Attempting to decrypt content with AES key...")
        iv = base64.b64decode(manifest['encryption_iv'])
        cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv))
        decryptor = cipher.decryptor()
        padded_data = decryptor.update(encrypted_data) + decryptor.finalize()
        unpadder = PKCS7(algorithms.AES.block_size).unpadder()
        decrypted_data = unpadder.update(padded_data) + unpadder.finalize()
        print("   - Success: Decryption and unpadding complete.")

        print("\n--- ✅ DECRYPTION SUCCEEDED ---")
        try:
            content = json.loads(decrypted_data)
            print("Decrypted Content (JSON):")
            print(json.dumps(content, indent=2))
        except (json.JSONDecodeError, UnicodeDecodeError):
            print(f"Decrypted Content (Raw Bytes, first 256):")
            print(decrypted_data[:256])

    except Exception as e:
        print(f"\n--- ❌ DECRYPTION FAILED ---")
        print(f"Error: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    run_decryption_test()

```

### File: axon_bbs/test_onion_connection.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/test_onion_connection.py

import requests
import json

# --- CONFIGURATION ---
# --- CHANGE START ---
# The hardcoded .onion URL has been replaced with a placeholder.
LAPTOP_ONION_URL = "http://INSERT_YOUR_ONION_URL_HERE.onion"
# --- CHANGE END ---
# ---------------------

# This is the endpoint we are trying to reach
target_url = LAPTOP_ONION_URL.strip('/') + '/api/receive_magnet/'

# A dummy payload, similar to what the real app sends
payload = {
    'magnet': 'test',
    'signature': 'test',
    'sender_pubkey': 'test'
}

# The Tor SOCKS proxy
proxies = {
    'http': 'socks5h://127.0.0.1:9050',
    'https': 'socks5h://127.0.0.1:9050'
}

print(f"[*] Attempting to send a POST request to: {target_url}")
print("[*] Using Tor SOCKS proxy at 127.0.0.1:9050")

try:
    # We use a long timeout to account for Tor's latency
    response = requests.post(target_url, json=payload, proxies=proxies, timeout=120)

    print("\n[SUCCESS] The connection was successful!")
    print(f"Status Code: {response.status_code}")
    print(f"Response Body: {response.text}")

except requests.exceptions.RequestException as e:
    print("\n[FAILURE] The connection failed.")
    print(f"Error: {e}")

```

### File: axon_bbs/uat_runner.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;
# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/uat_runner.py
import requests
import time
import os
import json
import base64
from uuid import uuid4

# --- CONFIGURATION ---
HOST_BBS_ONION = "http://ONION_ADDRESS=lpa4klsh6xbzlexh6pwdxtn7ezr4snztgyxxgejtbmvpl4zw6sqljoyd.onion" # Replace with your Host BBS onion address
PIBBS_ONION = "http://sjyfz3kvijioripsryrg5xbfikanbewiemjcnlnvfbz5pwoktrgddhqd.onion"       # Replace with your PiBBS onion address
TOR_PROXIES = {
    'http': 'socks5h://127.0.0.1:9050',
    'httpss': 'socks5h://127.0.0.1:9050'
}
# --- END CONFIGURATION ---

class UATClient:
    """A client to simulate a user interacting with the Axon BBS API for UAT."""

    def __init__(self):
        self.session = requests.Session()
        self.session.proxies = TOR_PROXIES
        self.access_token = None
        self.log = []

    def _request(self, method, endpoint, **kwargs):
        """Wrapper for making authenticated requests."""
        headers = kwargs.get("headers", {})
        if self.access_token:
            headers['Authorization'] = f'Bearer {self.access_token}'
        
        kwargs["headers"] = headers
        url = f"{HOST_BBS_ONION}{endpoint}"
        return self.session.request(method, url, **kwargs)

    def run_test(self, description, func, *args, **kwargs):
        """Runs a test step, logs the result, and handles failures."""
        self.log.append({"step": description, "status": "PENDING"})
        print(f"[*] Running: {description}...")
        try:
            result = func(*args, **kwargs)
            self.log[-1].update({"status": "PASS", "details": result})
            print(f"    -> PASS")
            return result
        except Exception as e:
            self.log[-1].update({"status": "FAIL", "details": str(e)})
            print(f"    -> FAIL: {e}")
            self.save_log()
            raise

    def save_log(self):
        """Saves the test log to a file."""
        os.makedirs('uat_results', exist_ok=True)
        log_path = 'uat_results/uat_run_log.json'
        with open(log_path, 'w') as f:
            json.dump(self.log, f, indent=2)
        print(f"\n[!] Test log saved to {log_path}")

# --- Test Functions ---

def test_register(client, username, password, nickname):
    payload = {
        "username": username, "password": password, "nickname": nickname,
        "security_question_1": "Test Q1", "security_answer_1": "Test A1",
        "security_question_2": "Test Q2", "security_answer_2": "Test A2"
    }
    response = client._request('POST', '/api/register/', json=payload)
    if response.status_code != 201:
        raise Exception(f"Failed to register. Status: {response.status_code}, Body: {response.text}")
    return "User registered successfully."

def test_login(client, username, password):
    response = client._request('POST', '/api/token/', json={"username": username, "password": password})
    if response.status_code != 200:
        raise Exception(f"Login failed. Status: {response.status_code}, Body: {response.text}")
    client.access_token = response.json()['access']
    return "Logged in successfully."

def test_unlock_identity(client, password):
    response = client._request('POST', '/api/identity/unlock/', json={"password": password})
    if response.status_code != 200:
        raise Exception(f"Identity unlock failed. Status: {response.status_code}, Body: {response.text}")
    return "Identity unlocked."

def test_post_message_with_attachment(client, board_name, subject, body):
    # This is a simplified test; it doesn't actually upload a file but uses the API structure.
    # A full test would require a multipart file upload endpoint. For now, we pass an empty list.
    payload = {"board_name": board_name, "subject": subject, "body": body, "attachment_ids": []}
    response = client._request('POST', '/api/messages/post/', json=payload)
    if response.status_code != 201:
        raise Exception(f"Post message failed. Status: {response.status_code}, Body: {response.text}")
    return f"Message '{subject}' posted to '{board_name}'."

def test_send_pm(client, recipient, subject, body):
    payload = {"recipient_identifier": recipient, "subject": subject, "body": body}
    response = client._request('POST', '/api/pm/send/', json=payload)
    if response.status_code != 201:
        raise Exception(f"Send PM failed. Status: {response.status_code}, Body: {response.text}")
    return f"PM '{subject}' sent to '{recipient}'."

def test_change_nickname(client, new_nickname):
    response = client._request('POST', '/api/user/nickname/', json={"nickname": new_nickname})
    if response.status_code != 200:
        raise Exception(f"Nickname change failed. Status: {response.status_code}, Body: {response.text}")
    return f"Nickname change to '{new_nickname}' submitted."
    
def test_change_password(client, old_password, new_password):
    payload = {"old_password": old_password, "new_password": new_password}
    response = client._request('POST', '/api/user/change_password/', json=payload)
    if response.status_code != 200:
        raise Exception(f"Password change failed. Status: {response.status_code}, Body: {response.text}")
    return "Password changed successfully."
    
def test_logout(client):
    response = client._request('POST', '/api/logout/')
    if response.status_code != 200:
        raise Exception("Logout failed.")
    client.access_token = None
    return "Logged out successfully."

if __name__ == "__main__":
    client = UATClient()
    
    # Generate unique credentials for this test run
    run_id = str(uuid4())[:8]
    USERNAME = f"uat_user_{run_id}"
    NICKNAME = f"UAT-Runner-{run_id}"
    PASSWORD_V1 = f"password_{run_id}_v1"
    PASSWORD_V2 = f"password_{run_id}_v2"
    
    # Define remote user for PM tests
    PIBBS_USER_NICKNAME = "pibbs_user" # Assume this user exists on the PiBBS

    try:
        # --- Execute Test Plan ---
        client.run_test("0) Register New User", test_register, client, USERNAME, PASSWORD_V1, NICKNAME)
        client.run_test("1) Login", test_login, client, USERNAME, PASSWORD_V1)
        client.run_test("2) Unlock Identity", test_unlock_identity, client, PASSWORD_V1)
        
        post_subject = f"UAT Post from {NICKNAME}"
        client.run_test("3) Create Message on Tech Board", test_post_message_with_attachment, client, "Tech", post_subject, "This is a UAT test message with an attachment.")
        
        pm_subject = f"UAT PM from {NICKNAME}"
        client.run_test("5) Send PM to PiBBS User", test_send_pm, client, PIBBS_USER_NICKNAME, pm_subject, "This is a UAT private message.")
        
        new_nickname = f"UAT-Runner-{run_id}-Updated"
        client.run_test("12) Change Nickname", test_change_nickname, client, new_nickname)
        
        client.run_test("14) Change Password", test_change_password, client, PASSWORD_V1, PASSWORD_V2)
        client.run_test("15) Logout", test_logout, client)
        client.run_test("16) Log in with New Password", test_login, client, USERNAME, PASSWORD_V2)
        
        print("\n[+] UAT RUNNER COMPLETED SUCCESSFULLY.")
        
    except Exception as e:
        print(f"\n[!] UAT FAILED. See log for details.")
    
    finally:
        client.save_log()

```

### File: axon_bbs/uat_verifier.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;
# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/uat_verifier.py
import os
import sys
import django
import time
import json
import requests

# --- CONFIGURATION ---
HOST_BBS_ONION = "http://YOUR_HOST_BBS.onion" # Must match the runner's config
TOR_PROXIES = {
    'http': 'socks5h://127.0.0.1:9050',
    'httpss': 'socks5h://127.0.0.1:9050'
}
# --- END CONFIGURATION ---

# --- Django Setup ---
def setup_django():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')
    try:
        django.setup()
    except Exception as e:
        print(f"Error setting up Django: {e}")
        sys.exit(1)

setup_django()
from core.models import Message, PrivateMessage, User, Alias
# --- End Django Setup ---

def fetch_uat_log():
    """Fetches the UAT log from the host BBS."""
    # In a real-world scenario, this might be an authenticated endpoint.
    # For simplicity, we assume the log is accessible.
    # This endpoint does not exist yet; it's a conceptual part of the verifier.
    # For now, we will read it from a local file copied from the host.
    log_path = 'uat_results/uat_run_log.json' # Assumes the log was copied here
    print(f"[*] Reading UAT log from '{log_path}'...")
    try:
        with open(log_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"[!] ERROR: UAT log file not found at '{log_path}'.")
        print("    Please run the UAT Runner on the host and copy the results here.")
        sys.exit(1)

def verify_public_post(run_log):
    """Verify that the public message from step 3 exists."""
    print("[*] Verifying Step 3: Public Message...")
    log_entry = next((item for item in run_log if item['step'].startswith("3)")), None)
    if not (log_entry and log_entry['status'] == 'PASS'):
        return "FAIL: Prerequisite step did not pass on host."

    subject = log_entry['details'].split("'")[1]
    if Message.objects.filter(subject=subject).exists():
        return "PASS"
    else:
        return f"FAIL: Could not find message with subject '{subject}'."

def verify_private_message(run_log):
    """Verify that the private message from step 5 exists."""
    print("[*] Verifying Step 5: Private Message...")
    log_entry = next((item for item in run_log if item['step'].startswith("5)")), None)
    if not (log_entry and log_entry['status'] == 'PASS'):
        return "FAIL: Prerequisite step did not pass on host."

    # We can't read the PM content, but we can check if a PM was received
    # around the time of the test for the target user.
    recipient = User.objects.get(nickname__iexact="pibbs_user")
    if PrivateMessage.objects.filter(recipient=recipient).exists():
        # This is a basic check. A more advanced check would look at timestamps.
        return "PASS"
    else:
        return "FAIL: No private message was received for user 'pibbs_user'."

def verify_nickname_federation(run_log):
    """Verify that the nickname change from step 12 was federated."""
    print("[*] Verifying Step 12: Nickname Federation...")
    log_entry = next((item for item in run_log if item['step'].startswith("12)")), None)
    if not (log_entry and log_entry['status'] == 'PASS'):
        return "FAIL: Prerequisite step did not pass on host."

    new_nickname = log_entry['details'].split("'")[1]
    # The federated user record should be an inactive User or an Alias
    if User.objects.filter(nickname__iexact=new_nickname, is_active=False).exists() or \
       Alias.objects.filter(nickname__iexact=new_nickname).exists():
        return "PASS"
    else:
        return f"FAIL: Could not find federated user/alias for nickname '{new_nickname}'."

if __name__ == "__main__":
    print("--- Axon BBS UAT Verifier ---")
    print("This script should be run on the PiBBS after the UAT Runner has completed on the host.")
    
    # Allow some time for federation to occur
    wait_time = 60
    print(f"\n[*] Waiting {wait_time} seconds for federation sync to complete...")
    time.sleep(wait_time)

    run_log = fetch_uat_log()
    results = []

    results.append(verify_public_post(run_log))
    results.append(verify_private_message(run_log))
    results.append(verify_nickname_federation(run_log))

    print("\n--- UAT VERIFICATION RESULTS ---")
    final_status = "PASS"
    for i, result in enumerate(results):
        print(f"  - Check {i+1}: {result}")
        if "FAIL" in result:
            final_status = "FAIL"
    
    print(f"\n[!] FINAL UAT STATUS: {final_status}")

```

### File: axon_bbs/websocket_proxy_test.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/websocket_proxy_test.py

import asyncio
from python_socks.async_.asyncio import Proxy
import websockets

# Proxy and target details
PROXY_HOST = '127.0.0.1'
# --- CHANGE START ---
# Hardcoded port 9999 changed to 9050, the standard Tor default.
PROXY_PORT = 9050
# --- CHANGE END ---
TARGET_URI = 'wss://relay.damus.io'

async def main():
    print(f"Connecting to proxy at {PROXY_HOST}:{PROXY_PORT}...")
    proxy = Proxy.from_url(f'socks5://{PROXY_HOST}:{PROXY_PORT}')

    sock = await proxy.connect(dest_host=TARGET_URI.split('//')[1], dest_port=443)
    print("Proxy connection successful.")

    print(f"Attempting WebSocket handshake with {TARGET_URI}...")
    try:
        async with websockets.connect(
            TARGET_URI,
            sock=sock,
            server_hostname=TARGET_URI.split('//')[1] # Important for TLS
        ) as websocket:

            print("WebSocket connection successful!")

            # Correct way to send a ping and wait for the pong
            print("Sending a ping and waiting for pong...")
            await websocket.ping()
            print("Pong received!")

            return True

    except Exception as e:
        print(f"An error occurred: {e}")
        return False

if __name__ == "__main__":
    if asyncio.run(main()):
        print("\nSUCCESS: A proxied WebSocket connection was established.")
    else:
        print("\nFAILURE: Could not establish a proxied WebSocket connection.")

```

### File: axon_bbs/api/__init__.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/api/__init__.py


```

### File: axon_bbs/api/permissions.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/api/permissions.py
from rest_framework import permissions
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives.asymmetric.padding import PSS, MGF1
from cryptography.hazmat.primitives.serialization import load_pem_public_key, Encoding, PublicFormat
import base64
import logging
from datetime import datetime, timedelta, timezone

# CORRECTED: Import Django's timezone utility
from django.utils import timezone as django_timezone

from core.models import TrustedInstance
from core.services.encryption_utils import generate_checksum

logger = logging.getLogger(__name__)

class TrustedPeerPermission(permissions.BasePermission):
    """
    Custom permission to only allow requests from trusted peer instances.
    - Verifies the sender's public key is in the local TrustedInstance table.
    - Verifies the request signature to prove ownership of the key.
    """
    def has_permission(self, request, view):
        sender_pubkey_pem = None
        signature_b64 = None
        data_to_verify = None

        # Extract details based on request method
        if request.method == 'GET':
            signature_b64 = request.headers.get('X-Signature')
            sender_pubkey_pem_b64 = request.headers.get('X-Pubkey')
            if sender_pubkey_pem_b64:
                try:
                    sender_pubkey_pem = base64.b64decode(sender_pubkey_pem_b64).decode('utf-8')
                except Exception as e:
                    logger.warning(f"Failed to base64 decode X-Pubkey header: {e}")
                    return False
            timestamp_str = request.headers.get('X-Timestamp')
            if not timestamp_str:
                logger.warning("Missing X-Timestamp header for GET request.")
                return False
            try:
                # Ensure timestamp is timezone-aware for comparison
                timestamp = datetime.fromisoformat(timestamp_str)
                if timestamp.tzinfo is None:
                    timestamp = timestamp.replace(tzinfo=timezone.utc)
                
                # CORRECTED: Use Django's timezone.now() for a safe, timezone-aware comparison.
                if abs(django_timezone.now() - timestamp) > timedelta(minutes=5):
                    logger.warning("Request rejected due to expired timestamp.")
                    return False
            except ValueError:
                logger.warning(f"Invalid timestamp format: {timestamp_str}")
                return False
            data_to_verify = timestamp_str.encode('utf-8')

        elif request.method == 'POST':
            # This logic remains for potential future use, but is not used by BitSync sync.
            signature_b64 = request.data.get('signature')
            sender_pubkey_pem = request.data.get('sender_pubkey')
            # The data to verify in a POST would be the content identifier (e.g., a hash or magnet)
            data_to_verify = request.data.get('content_hash', '').encode('utf-8')
        
        else:
            return False # Reject other methods

        if not all([signature_b64, sender_pubkey_pem, data_to_verify is not None]):
            logger.warning("Missing required fields for permission check: signature, pubkey, or data_to_verify.")
            return False

        # Normalize the incoming public key to ensure a consistent format
        try:
            pubkey_obj = load_pem_public_key(sender_pubkey_pem.strip().encode('utf-8'))
            cleaned_sender_pubkey = pubkey_obj.public_bytes(
                encoding=Encoding.PEM,
                format=PublicFormat.SubjectPublicKeyInfo
            ).decode('utf-8').strip()
        except Exception as e:
            logger.warning(f"Failed to parse/normalize incoming public key: {e}")
            return False
        
        # --- VERIFICATION STEP 1: Check if the sender is a trusted peer ---
        trusted_peers = TrustedInstance.objects.filter(is_trusted_peer=True)
        trusted_pubkeys = [p.pubkey for p in trusted_peers if p.pubkey]
        
        expected_checksums = [generate_checksum(key) for key in trusted_pubkeys]
        logger.info(f"Permission check: Found {len(expected_checksums)} trusted peer checksum(s) in DB: {', '.join(expected_checksums) or 'None'}")

        if cleaned_sender_pubkey not in trusted_pubkeys:
            incoming_checksum = generate_checksum(cleaned_sender_pubkey)
            logger.warning(f"REJECTED request from untrusted public key with checksum: {incoming_checksum}. This key was not found in the list of trusted peers.")
            return False
        
        logger.info(f"Pubkey with checksum {generate_checksum(cleaned_sender_pubkey)} is trusted. Proceeding to signature verification.")

        # --- VERIFICATION STEP 2: Verify the signature ---
        try:
            signature = base64.b64decode(signature_b64)
            # For GET requests, the signature is of the timestamp hash.
            # For POST, it's of the content hash.
            if request.method == 'GET':
                hasher = hashes.Hash(hashes.SHA256())
                hasher.update(data_to_verify) # data_to_verify is the timestamp string here
                digest = hasher.finalize()
            else: # Fallback for POST or other methods if ever needed
                digest = data_to_verify # Assumes data is already a hash
            
            pubkey_obj.verify(
                signature,
                digest,
                PSS(mgf=MGF1(hashes.SHA256()), salt_length=PSS.MAX_LENGTH),
                hashes.SHA256()
            )
            logger.debug(f"Signature verification successful for pubkey checksum: {generate_checksum(cleaned_sender_pubkey)}")
            return True
        except Exception as e:
            logger.warning(f"Signature verification FAILED for pubkey {generate_checksum(cleaned_sender_pubkey)}: {e}", exc_info=True)
            return False

# --- NEW CLASS FOR MODERATION ---
class IsModeratorOrAdmin(permissions.BasePermission):
    """
    Custom permission to only allow moderators or admins (staff).
    """
    def has_permission(self, request, view):
        if not request.user or not request.user.is_authenticated:
            return False
        return request.user.is_moderator or request.user.is_staff
# --- END NEW CLASS ---

```

### File: axon_bbs/api/serializers.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/api/serializers.py
from rest_framework import serializers
from django.contrib.auth import get_user_model
from django.conf import settings
from core.models import MessageBoard, Message, User, ContentExtensionRequest, FileAttachment, PrivateMessage, Applet, HighScore, ModerationReport, FederatedAction
from core.services.identity_service import IdentityService
from core.services.encryption_utils import derive_key_from_password, generate_salt, generate_short_id
from core.services.avatar_generator import generate_cow_avatar
import os
import logging
import json
from django.core.signing import TimestampSigner

logger = logging.getLogger(__name__)
User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)
    nickname = serializers.CharField(required=True)
    security_question_1 = serializers.CharField(write_only=True, required=True)
    security_answer_1 = serializers.CharField(write_only=True, required=True)
    security_question_2 = serializers.CharField(write_only=True, required=True)
    security_answer_2 = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = User
        fields = ('username', 'password', 'nickname', 'security_question_1', 'security_answer_1', 'security_question_2', 'security_answer_2')

    def create(self, validated_data):
        user = User.objects.create_user(
            username=validated_data['username'],
            password=validated_data['password'],
            nickname=validated_data.get('nickname')
        )
        try:
            identity_service = IdentityService(user=user)
            identity = identity_service.generate_identity_with_manifest(
                password=validated_data['password'],
                sq1=validated_data['security_question_1'],
                sa1=validated_data['security_answer_1'],
                sq2=validated_data['security_question_2'],
                sa2=validated_data['security_answer_2']
            )
            user.pubkey = identity['public_key']
            
            avatar_content_file, avatar_filename = generate_cow_avatar(user.pubkey)
            user.avatar.save(avatar_filename, avatar_content_file, save=False)

            user.save()
            logger.info(f"Successfully created manifest-based identity for {user.username}")
        except Exception as e:
            logger.error(f"Failed to create identity for {user.username}. Rolling back user creation. Error: {e}")
            user.delete()
            raise serializers.ValidationError({"identity_error": "Failed to create identity during registration."})
        return user

class MessageBoardSerializer(serializers.ModelSerializer):
    class Meta:
        model = MessageBoard
        fields = ('id', 'name', 'description')

class FileAttachmentSerializer(serializers.ModelSerializer):
    class Meta:
        model = FileAttachment
        fields = ('id', 'filename', 'content_type', 'size', 'created_at')
        read_only_fields = fields

class MessageSerializer(serializers.ModelSerializer):
    author_display = serializers.SerializerMethodField()
    author_avatar_url = serializers.SerializerMethodField()
    created_at = serializers.DateTimeField(format="%Y-%m-%dT%H:%M:%S.%fZ", read_only=True)
    attachments = FileAttachmentSerializer(many=True, read_only=True)

    class Meta:
        model = Message
        fields = ('id', 'subject', 'body', 'created_at', 'author_display', 'author_avatar_url', 'attachments', 'pubkey')

    def get_author_display(self, obj):
        user_to_check = obj.author
        if not user_to_check and obj.pubkey:
            user_to_check = User.objects.filter(pubkey=obj.pubkey).first()

        if user_to_check:
            return user_to_check.nickname if user_to_check.nickname else user_to_check.username
        elif obj.pubkey:
             short_id = generate_short_id(obj.pubkey, length=8)
             return f"Moo-{short_id}"
        
        return 'Anonymous'
    
    def get_author_avatar_url(self, obj):
        user_to_check = obj.author
        if not user_to_check and obj.pubkey:
            user_to_check = User.objects.filter(pubkey=obj.pubkey).first()

        if user_to_check and user_to_check.avatar:
            request = self.context.get('request')
            if request:
                return request.build_absolute_uri(user_to_check.avatar.url)
            return user_to_check.avatar.url
        return None

class PrivateMessageSerializer(serializers.ModelSerializer):
    author_display = serializers.SerializerMethodField()
    author_avatar_url = serializers.SerializerMethodField()
    decrypted_body = serializers.CharField(read_only=True, default="")
    decrypted_subject = serializers.CharField(read_only=True, default="")
    
    class Meta:
        model = PrivateMessage
        fields = ('id', 'decrypted_subject', 'decrypted_body', 'created_at', 'is_read', 'author_display', 'author_avatar_url')
        read_only_fields = fields

    def get_author_display(self, obj):
        if obj.author:
            return obj.author.nickname if obj.author.nickname else obj.author.username
        elif obj.sender_pubkey:
            user = User.objects.filter(pubkey=obj.sender_pubkey).first()
            if user:
                return user.nickname if user.nickname else user.username
            short_id = generate_short_id(obj.sender_pubkey, length=8)
            return f"Moo-{short_id}"
        return "Unknown Sender"
    
    def get_author_avatar_url(self, obj):
        user_to_check = obj.author
        if not user_to_check and obj.sender_pubkey:
             user_to_check = User.objects.filter(pubkey=obj.sender_pubkey).first()

        if user_to_check and user_to_check.avatar:
            request = self.context.get('request')
            if request:
                return request.build_absolute_uri(user_to_check.avatar.url)
            return user_to_check.avatar.url
        return None

class PrivateMessageOutboxSerializer(serializers.ModelSerializer):
    recipient_display = serializers.SerializerMethodField()
    recipient_avatar_url = serializers.SerializerMethodField()
    decrypted_body = serializers.CharField(read_only=True, default="")
    decrypted_subject = serializers.CharField(read_only=True, default="")
    
    class Meta:
        model = PrivateMessage
        fields = ('id', 'decrypted_subject', 'decrypted_body', 'created_at', 'is_read', 'recipient_display', 'recipient_avatar_url')
        read_only_fields = fields

    def get_recipient_display(self, obj):
        # In the outbox, the recipient object might not be set if they are a federated user.
        # We need a robust way to find their details.
        if obj.recipient:
             return obj.recipient.nickname if obj.recipient.nickname else obj.recipient.username
        
        # Fallback if recipient is not a local user
        if hasattr(obj, 'recipient_pubkey') and obj.recipient_pubkey:
            user = User.objects.filter(pubkey=obj.recipient_pubkey).first()
            if user:
                return user.nickname if user.nickname else user.username
            
            short_id = generate_short_id(obj.recipient_pubkey, length=8)
            return f"Moo-{short_id}"

        return 'Unknown Recipient'


    def get_recipient_avatar_url(self, obj):
        user_to_check = obj.recipient
        if not user_to_check and hasattr(obj, 'recipient_pubkey') and obj.recipient_pubkey:
            user_to_check = User.objects.filter(pubkey=obj.recipient_pubkey).first()
        
        if user_to_check and user_to_check.avatar:
            request = self.context.get('request')
            if request:
                return request.build_absolute_uri(user_to_check.avatar.url)
            return user_to_check.avatar.url
        return None

class ContentExtensionRequestSerializer(serializers.ModelSerializer):
    user = serializers.StringRelatedField()
    reviewed_by = serializers.StringRelatedField()
    class Meta:
        model = ContentExtensionRequest
        fields = ('id', 'content_id', 'content_type', 'user', 'request_date', 'status', 'reviewed_by', 'reviewed_at')
        read_only_fields = ('id', 'user', 'request_date', 'status', 'reviewed_by', 'reviewed_at')

class AppletSerializer(serializers.ModelSerializer):
    category_name = serializers.CharField(source='category.name', read_only=True, default=None)
    class Meta:
        model = Applet
        fields = ('id', 'name', 'description', 'author_pubkey', 'code_manifest', 'created_at', 'category_name', 'is_debug_mode')
        read_only_fields = fields

class HighScoreSerializer(serializers.ModelSerializer):
    owner_avatar_url = serializers.SerializerMethodField()

    class Meta:
        model = HighScore
        fields = ('owner_nickname', 'owner_avatar_url', 'score', 'wins', 'losses', 'kills', 'deaths', 'assists', 'last_updated')

    def get_owner_avatar_url(self, obj):
        user = User.objects.filter(pubkey=obj.owner_pubkey).first()
        if user and user.avatar:
            request = self.context.get('request')
            if request:
                return request.build_absolute_uri(user.avatar.url)
            return user.avatar.url
        return None

class ModerationReportSerializer(serializers.ModelSerializer):
    reporting_user = serializers.StringRelatedField()
    reviewed_by = serializers.StringRelatedField()
    reported_message = MessageSerializer(read_only=True)

    class Meta:
        model = ModerationReport
        fields = ('id', 'reported_message', 'reporting_user', 'comment', 'status', 'created_at', 'reviewed_by', 'reviewed_at')

class FederatedActionProfileUpdateSerializer(serializers.ModelSerializer):
    user_info = serializers.SerializerMethodField()
    pending_avatar_url = serializers.SerializerMethodField()
    
    class Meta:
        model = FederatedAction
        fields = ('id', 'created_at', 'action_details', 'user_info', 'pending_avatar_url')

    def get_user_info(self, obj):
        user = User.objects.filter(pubkey=obj.pubkey_target).first()
        if not user:
            return None
        
        request = self.context.get('request')
        avatar_url = None
        if user.avatar:
            avatar_url = request.build_absolute_uri(user.avatar.url) if request else user.avatar.url
        
        return {
            "username": user.username,
            "current_nickname": user.nickname,
            "current_avatar_url": avatar_url
        }
    
    def get_pending_avatar_url(self, obj):
        # --- MODIFICATION START ---
        # Look for the correct key and build a direct media URL
        temp_filename = obj.action_details.get('pending_avatar_filename')
        if not temp_filename:
            return None
        
        request = self.context.get('request')
        if request:
            media_url = getattr(settings, 'MEDIA_URL', '/media/')
            return request.build_absolute_uri(os.path.join(media_url, 'pending_avatars', temp_filename))
        return None
        # --- MODIFICATION END ---

```

### File: axon_bbs/api/urls.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;
# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/api/urls.py
from django.urls import path
from .views import (
    RegisterView,
    MessageBoardListView,
    MessageListView,
    PostMessageView,
    IgnorePubkeyView,
    BanPubkeyView,
    UnlockIdentityView,
    ImportIdentityView,
    UpdateNicknameView,
    UserProfileView,
    ExportIdentityView,
    UploadAvatarView,
    LogoutView,
    RequestContentExtensionView,
    ReviewContentExtensionView,
    UnpinContentView,
    SyncView,
    BitSyncHasContentView,
    BitSyncChunkView,
    GetPublicKeyView,
    SendPrivateMessageView,
    PrivateMessageListView,
    PrivateMessageOutboxView,
    DeletePrivateMessageView,
    DownloadContentView, # <-- ADD THIS LINE
    AppletListView,
    GetSaveAppletDataView,
    HighScoreListView,
    PostAppletEventView,
    ReadAppletEventsView,
    AppletSharedStateView,
    AppletStateVersionView,
    # Moderation & Recovery Views
    ReportMessageView,
    ModeratorQueueView,
    ReviewReportView,
    GetSecurityQuestionsView,
    SubmitRecoveryView,
    PendingProfileUpdatesQueueView,
    ReviewProfileUpdateView,
    ClaimAccountView,
    # Credential Management & Config Views
    ChangePasswordView,
    ResetSecurityQuestionsView,
    GetDisplayTimezoneView,
    UpdateTimezoneView,
)
from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
)

urlpatterns = [
    # Auth & Config
    path('register/', RegisterView.as_view(), name='register'),
    path('token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('logout/', LogoutView.as_view(), name='logout'),
    path('config/timezone/', GetDisplayTimezoneView.as_view(), name='get-timezone'),
    
    # Identity & User Profile
    path('identity/unlock/', UnlockIdentityView.as_view(), name='unlock-identity'),
    path('identity/import/', ImportIdentityView.as_view(), name='import-identity'),
    path('identity/export/', ExportIdentityView.as_view(), name='export-identity'),
    path('identity/public_key/', GetPublicKeyView.as_view(), name='get-public-key'),
    path('identity/claim/', ClaimAccountView.as_view(), name='claim-identity'),
    path('user/profile/', UserProfileView.as_view(), name='user-profile'),
    path('user/nickname/', UpdateNicknameView.as_view(), name='update-nickname'),
    path('user/avatar/', UploadAvatarView.as_view(), name='user-avatar'),
    path('user/timezone/', UpdateTimezoneView.as_view(), name='update-timezone'),
    path('user/change_password/', ChangePasswordView.as_view(), name='change-password'),
    path('user/reset_security_questions/', ResetSecurityQuestionsView.as_view(), name='reset-security-questions'),

    # Recovery URLs
    path('recovery/get_questions/', GetSecurityQuestionsView.as_view(), name='recovery-get-questions'),
    path('recovery/submit/', SubmitRecoveryView.as_view(), name='recovery-submit'),
    
    # Private Messaging
    path('pm/send/', SendPrivateMessageView.as_view(), name='pm-send'),
    path('pm/list/', PrivateMessageListView.as_view(), name='pm-list'),
    path('pm/outbox/', PrivateMessageOutboxView.as_view(), name='pm-outbox'),
    path('pm/delete/<uuid:pk>/', DeletePrivateMessageView.as_view(), name='pm-delete'),

    # Content & Moderation
    path('boards/', MessageBoardListView.as_view(), name='board-list'),
    path('boards/<int:pk>/messages/', MessageListView.as_view(), name='message-list'),
    path('messages/post/', PostMessageView.as_view(), name='post-message'),
    path('user/ignore/', IgnorePubkeyView.as_view(), name='ignore-pubkey'),
    path('messages/report/', ReportMessageView.as_view(), name='report-message'),
    path('moderation/queue/', ModeratorQueueView.as_view(), name='mod-queue'),
    path('moderation/review/<int:report_id>/', ReviewReportView.as_view(), name='mod-review'),
    path('moderation/profile_queue/', PendingProfileUpdatesQueueView.as_view(), name='mod-profile-queue'),
    path('moderation/profile_review/<uuid:action_id>/', ReviewProfileUpdateView.as_view(), name='mod-profile-review'),
    
    # Admin & Moderator Actions
    path('admin/ban/', BanPubkeyView.as_view(), name='ban-pubkey'),
    path('content/request-extension/', RequestContentExtensionView.as_view(), name='request-extension'),
    path('content/review-extension/<int:pk>/', ReviewContentExtensionView.as_view(), name='review-extension'),
    path('content/unpin/', UnpinContentView.as_view(), name='unpin-content'),
    path('content/download/<str:content_hash>/', DownloadContentView.as_view(), name='content-download'), # <-- ADD THIS LINE

    # Applet Framework
    path('applets/', AppletListView.as_view(), name='applet-list'),
    path('applets/<uuid:applet_id>/data/', GetSaveAppletDataView.as_view(), name='applet-data'),
    path('high_scores/<uuid:applet_id>/', HighScoreListView.as_view(), name='high-scores'),
    path('applets/<uuid:applet_id>/post_event/', PostAppletEventView.as_view(), name='applet-post-event'),
    path('applets/<uuid:applet_id>/read_events/', ReadAppletEventsView.as_view(), name='applet-read-events'),
    path('applets/<uuid:applet_id>/shared_state/', AppletSharedStateView.as_view(), name='applet-shared-state'),
    path('applets/<uuid:applet_id>/state_version/', AppletStateVersionView.as_view(), name='applet-state-version'),

    # BitSync P2P Protocol
    path('sync/', SyncView.as_view(), name='sync'),
    path('bitsync/has_content/<str:content_hash>/', BitSyncHasContentView.as_view(), name='bitsync-has-content'),
    path('bitsync/chunk/<str:content_hash>/<int:chunk_index>/', BitSyncChunkView.as_view(), name='bitsync-chunk'),
]

```

### File: axon_bbs/api/views.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/api/views.py
from rest_framework import generics, permissions, status, views
from rest_framework.response import Response
from rest_framework.parsers import MultiPartParser, FormParser, JSONParser
from django.http import HttpResponse, Http404, JsonResponse
from django.contrib.auth import get_user_model
from django.conf import settings
import os
import logging
import json
import base64
import hashlib
from datetime import timedelta
from django.utils import timezone
from django.apps import apps
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.db import IntegrityError
from cryptography.hazmat.primitives import serialization
from PIL import Image
from django.core.files.base import ContentFile
import io

from .serializers import UserSerializer, MessageBoardSerializer, MessageSerializer, ContentExtensionRequestSerializer, FileAttachmentSerializer, PrivateMessageSerializer, PrivateMessageOutboxSerializer, AppletSerializer, HighScoreSerializer, ModerationReportSerializer
from .permissions import TrustedPeerPermission, IsModeratorOrAdmin
from core.models import MessageBoard, Message, IgnoredPubkey, BannedPubkey, TrustedInstance, Alias, ContentExtensionRequest, FileAttachment, PrivateMessage, FederatedAction, Applet, AppletData, HighScore, AppletSharedState, ModerationReport
from core.services.identity_service import IdentityService, DecryptionError
from core.services.encryption_utils import derive_key_from_password, generate_checksum, generate_short_id, encrypt_with_public_key, decrypt_with_private_key
from core.services.service_manager import service_manager
from core.services.content_validator import is_file_type_valid

logger = logging.getLogger(__name__)
User = get_user_model()


class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    permission_classes = (permissions.AllowAny,)
    serializer_class = UserSerializer

class LogoutView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    def post(self, request, *args, **kwargs):
        if 'unencrypted_priv_key' in request.session:
            del request.session['unencrypted_priv_key']
        return Response({"status": "session cleared"}, status=status.HTTP_200_OK)

class UnlockIdentityView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    def post(self, request, *args, **kwargs):
        user, password = request.user, request.data.get('password')
        if not password: return Response({"error": "Password is required."}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            identity_service = IdentityService(user=user)
            private_key = identity_service.get_unlocked_private_key(password)
            if not private_key:
                raise DecryptionError("Failed to unlock with provided password.")
            
            request.session['unencrypted_priv_key'] = private_key
            logger.info(f"Identity unlocked for user {user.username}")
            return Response({"status": "identity unlocked"}, status=status.HTTP_200_OK)
        except DecryptionError as e:
            logger.warning(f"Failed unlock attempt for {user.username}: {e}")
            return Response({"error": "Unlock failed. Please check your password."}, status=status.HTTP_401_UNAUTHORIZED)
        except Exception as e:
            logger.error(f"Failed to unlock identity for {user.username}: {e}", exc_info=True)
            return Response({"error": "An unexpected error occurred during unlock."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class ImportIdentityView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    parser_classes = [MultiPartParser, FormParser, JSONParser]

    def post(self, request, *args, **kwargs):
        return Response({"error": "Import functionality is not yet updated for the new identity system."}, status=status.HTTP_501_NOT_IMPLEMENTED)

class ExportIdentityView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        return Response({"error": "Export functionality is not yet updated for the new identity system."}, status=status.HTTP_501_NOT_IMPLEMENTED)

class UpdateNicknameView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        nickname = request.data.get('nickname')
        if not nickname:
            return Response({"error": "Nickname cannot be empty."}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            user = request.user
            user.nickname = nickname
            user.save()

            avatar_attachment = FileAttachment.objects.filter(author=user, filename=f'{user.username}_avatar.png').first()

            FederatedAction.objects.create(
                action_type='update_profile',
                pubkey_target=user.pubkey,
                status='pending_approval',
                action_details={
                    'nickname': user.nickname,
                    'karma': user.karma,
                    'avatar_hash': avatar_attachment.manifest.get('content_hash') if avatar_attachment else None
                }
            )
            return Response({"status": "Nickname update submitted for approval.", "nickname": nickname}, status=status.HTTP_200_OK)
        except IntegrityError:
            return Response({"error": "This nickname is already taken."}, status=status.HTTP_409_CONFLICT)
        except Exception as e:
            logger.error(f"Could not update nickname for {request.user.username}: {e}", exc_info=True)
            return Response({"error": "An error occurred while updating the nickname."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class UserProfileView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, *args, **kwargs):
        user = request.user
        return Response({
            "username": user.username,
            "nickname": user.nickname,
            "pubkey": user.pubkey,
            "avatar_url": request.build_absolute_uri(user.avatar.url) if user.avatar else None,
            "karma": user.karma,
            "is_moderator": user.is_moderator,
        })

class UploadAvatarView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    parser_classes = [MultiPartParser, FormParser]

    def post(self, request, *args, **kwargs):
        if 'avatar' not in request.FILES:
            return Response({"error": "No avatar file provided."}, status=status.HTTP_400_BAD_REQUEST)
        
        file = request.FILES['avatar']
        
        if file.size > 1024 * 1024:
            return Response({"error": "Avatar file size cannot exceed 1MB."}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            img = Image.open(file)
            
            if img.mode != 'RGB':
                img = img.convert('RGB')

            img.thumbnail((128, 128))
            
            thumb_io = io.BytesIO()
            img.save(thumb_io, format='PNG')
            
            user = request.user
            
            file_content = {
                "type": "file", "filename": f'{user.username}_avatar.png', "content_type": 'image/png',
                "size": thumb_io.tell(), "data": base64.b64encode(thumb_io.getvalue()).decode('ascii')
            }
            _content_hash, manifest = service_manager.bitsync_service.create_encrypted_content(file_content)
            
            FileAttachment.objects.update_or_create(
                author=user,
                filename=f'{user.username}_avatar.png',
                defaults={
                    'content_type': 'image/png',
                    'size': thumb_io.tell(),
                    'manifest': manifest
                }
            )

            user.avatar.save(f'{user.username}_avatar.png', ContentFile(thumb_io.getvalue()), save=True)
            user.save()

            FederatedAction.objects.create(
                action_type='update_profile',
                pubkey_target=user.pubkey,
                status='pending_approval',
                action_details={
                    'nickname': user.nickname,
                    'karma': user.karma,
                    'avatar_hash': manifest.get('content_hash')
                }
            )

            return Response({"status": "Avatar update submitted for approval.", "avatar_url": user.avatar.url})

        except Exception as e:
            logger.error(f"Could not process avatar for {request.user.username}: {e}")
            return Response({"error": "Invalid image file. Please upload a valid PNG, JPG, or GIF."}, status=status.HTTP_400_BAD_REQUEST)

class MessageBoardListView(generics.ListAPIView):
    serializer_class = MessageBoardSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        user_access_level = self.request.user.access_level
        return MessageBoard.objects.filter(
            required_access_level__lte=user_access_level
        ).order_by('name')

class MessageListView(generics.ListAPIView):
    serializer_class = MessageSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_serializer_context(self):
        return {'request': self.request}

    def get_queryset(self):
        board_id = self.kwargs['pk']
        ignored_pubkeys = IgnoredPubkey.objects.filter(user=self.request.user).values_list('pubkey', flat=True)
        return Message.objects.filter(board_id=board_id).exclude(pubkey__in=ignored_pubkeys).order_by('-created_at')

class PostMessageView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    def post(self, request, *args, **kwargs):
        user, subject, body = request.user, request.data.get('subject'), request.data.get('body')
        board_name, attachment_ids = request.data.get('board_name', 'general'), request.data.get('attachment_ids', [])
        
        if not all([subject, body]):
            return Response({"error": "Subject and body are required."}, status=status.HTTP_400_BAD_REQUEST)
        if not request.session.get('unencrypted_priv_key'):
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
        
        try:
            board, _ = MessageBoard.objects.get_or_create(name=board_name)
            attachments = FileAttachment.objects.filter(id__in=attachment_ids, author=user)
            attachment_hashes = [att.manifest['content_hash'] for att in attachments]
            
            message_content = {
                "type": "message",
                "subject": subject,
                "body": body,
                "board": board.name,
                "pubkey": user.pubkey,
                "attachment_hashes": attachment_hashes
            }
            
            if service_manager.bitsync_service:
                _content_hash, manifest = service_manager.bitsync_service.create_encrypted_content(message_content)
                message = Message.objects.create(
                    board=board, subject=subject, body=body, author=user, pubkey=user.pubkey, manifest=manifest
                )
                message.attachments.set(attachments)
                logger.info(f"New message '{subject}' with {attachments.count()} attachment(s) posted.")
                return Response({"status": "message_posted_and_synced"}, status=status.HTTP_201_CREATED)
            else:
                return Response({"error": "Sync service is unavailable."}, status=status.HTTP_503_SERVICE_UNAVAILABLE)
        except Exception as e:
            logger.error(f"Failed to post message for {user.username}: {e}", exc_info=True)
            return Response({"error": "Server error while posting message."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class IgnorePubkeyView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    def post(self, request, *args, **kwargs):
        pubkey = request.data.get('pubkey')
        if not pubkey: return Response({"error": "Pubkey to ignore is required."}, status=status.HTTP_400_BAD_REQUEST)
        IgnoredPubkey.objects.get_or_create(user=request.user, pubkey=pubkey)
        return Response({"status": "Pubkey ignored."}, status=status.HTTP_200_OK)

class BanPubkeyView(views.APIView):
    permission_classes = [permissions.IsAdminUser]
    def post(self, request, *args, **kwargs):
        pubkey, is_temporary, duration_hours = request.data.get('pubkey'), request.data.get('is_temporary', False), request.data.get('duration_hours')
        if not pubkey: return Response({"error": "Pubkey to ban is required."}, status=status.HTTP_400_BAD_REQUEST)
        expires_at = None
        if is_temporary:
            if not duration_hours: return Response({"error": "Duration in hours is required for a temporary ban."}, status=status.HTTP_400_BAD_REQUEST)
            try: expires_at = timezone.now() + timedelta(hours=int(duration_hours))
            except (ValueError, TypeError): return Response({"error": "Invalid duration format."}, status=status.HTTP_400_BAD_REQUEST)
        
        action_details = {'is_temporary': is_temporary}
        if is_temporary:
            action_details['duration_hours'] = duration_hours
            
        action = FederatedAction.objects.create(
            action_type='ban_pubkey',
            pubkey_target=pubkey,
            action_details=action_details
        )
        
        BannedPubkey.objects.update_or_create(
            pubkey=pubkey, 
            defaults={'is_temporary': is_temporary, 'expires_at': expires_at, 'federated_action_id': action.id}
        )

        status_msg = f"Pubkey temporarily banned until {expires_at.strftime('%Y-%m-%d %H:%M:%S %Z')}." if is_temporary else "Pubkey permanently banned."
        return Response({"status": status_msg}, status=status.HTTP_200_OK)

class ReportMessageView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        message_id = request.data.get('message_id')
        comment = request.data.get('comment', '')
        
        try:
            message_to_report = Message.objects.get(id=message_id)
            if message_to_report.author == request.user:
                return Response({"error": "You cannot report your own messages."}, status=status.HTTP_400_BAD_REQUEST)
            
            report, created = ModerationReport.objects.get_or_create(
                reported_message=message_to_report,
                reporting_user=request.user,
                defaults={'comment': comment}
            )

            if not created:
                return Response({"error": "You have already reported this message."}, status=status.HTTP_400_BAD_REQUEST)

            return Response({"status": "Message reported successfully."}, status=status.HTTP_201_CREATED)
        except Message.DoesNotExist:
            return Response({"error": "Message not found."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            logger.error(f"Error creating report by user {request.user.username}: {e}")
            return Response({"error": "An error occurred while creating the report."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class ModeratorQueueView(generics.ListAPIView):
    permission_classes = [IsModeratorOrAdmin]
    serializer_class = ModerationReportSerializer
    queryset = ModerationReport.objects.filter(status='pending').order_by('created_at')

class ReviewReportView(views.APIView):
    permission_classes = [IsModeratorOrAdmin]

    def post(self, request, report_id, *args, **kwargs):
        action = request.data.get('action') # "approve" or "reject"
        try:
            report = ModerationReport.objects.get(id=report_id, status='pending')
        except ModerationReport.DoesNotExist:
            return Response({"error": "Report not found or already reviewed."}, status=status.HTTP_404_NOT_FOUND)

        if action == 'approve':
            report.status = 'approved'
            report.reviewed_by = request.user
            report.reviewed_at = timezone.now()
            
            reporter = report.reporting_user
            reporter.karma = reporter.karma + 5
            reporter.save()
            
            message_to_delete = report.reported_message
            if message_to_delete.manifest:
                FederatedAction.objects.create(
                    action_type='DELETE_CONTENT',
                    content_hash_target=message_to_delete.manifest.get('content_hash'),
                    action_details={'reason': f'Content removed by {request.user.username} based on user report: {report.comment}'}
                )
            
            message_to_delete.delete()
            report.save()
            return Response({"status": "Report approved and message deleted."})

        elif action == 'reject':
            report.status = 'rejected'
            report.reviewed_by = request.user
            report.reviewed_at = timezone.now()
            report.save()
            return Response({"status": "Report rejected."})

        return Response({"error": "Invalid action."}, status=status.HTTP_400_BAD_REQUEST)

class GetSecurityQuestionsView(views.APIView):
    permission_classes = [permissions.AllowAny]

    def post(self, request, *args, **kwargs):
        username = request.data.get('username')
        if not username:
            return Response({'error': 'Username is required.'}, status=status.HTTP_400_BAD_REQUEST)
        try:
            user = User.objects.get(username=username)
            identity_service = IdentityService(user=user)
            questions = identity_service.get_security_questions()
            if questions:
                return Response(questions)
            else:
                return Response({"error": "User does not have manifest-based recovery configured."}, status=status.HTTP_400_BAD_REQUEST)
        except User.DoesNotExist:
            return Response({"error": "User not found."}, status=status.HTTP_404_NOT_FOUND)

class SubmitRecoveryView(views.APIView):
    permission_classes = [permissions.AllowAny]

    def post(self, request, *args, **kwargs):
        username = request.data.get('username')
        answer_1 = request.data.get('answer_1')
        answer_2 = request.data.get('answer_2')
        new_password = request.data.get('new_password')

        if not all([username, answer_1, answer_2, new_password]):
            return Response({"error": "All fields are required."}, status=status.HTTP_400_BAD_REQUEST)

        try:
            user = User.objects.get(username=username)
            identity_service = IdentityService(user=user)
            
            success = identity_service.recover_identity_with_answers(answer_1, answer_2, new_password)
            
            if success:
                user.set_password(new_password)
                user.save()
                return Response({"status": "Password has been successfully reset."})
            else:
                return Response({"error": "Recovery failed. One or more answers were incorrect."}, status=status.HTTP_400_BAD_REQUEST)
        except User.DoesNotExist:
            return Response({"error": "User not found."}, status=status.HTTP_404_NOT_FOUND)

class RequestContentExtensionView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    def post(self, request, *args, **kwargs):
        content_id, content_type = request.data.get('content_id'), request.data.get('content_type')
        if not all([content_id, content_type]): return Response({"error": "content_id and content_type are required."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            model = apps.get_model('core', content_type.capitalize())
            model.objects.get(pk=content_id, author=request.user)
        except (LookupError, model.DoesNotExist): return Response({"error": "Invalid content_type or content not found/not owned by user."}, status=status.HTTP_404_NOT_FOUND)
        ext_request, created = ContentExtensionRequest.objects.get_or_create(content_id=content_id, user=request.user, defaults={'content_type': content_type})
        if not created and ext_request.status in ['pending', 'approved']: return Response({"status": "An extension request is already pending or has been approved."}, status=status.HTTP_200_OK)
        ext_request.status = 'pending'; ext_request.save()
        return Response(ContentExtensionRequestSerializer(ext_request).data, status=status.HTTP_201_CREATED)

class ReviewContentExtensionView(views.APIView):
    permission_classes = [permissions.IsAdminUser]
    def post(self, request, pk, *args, **kwargs):
        try: ext_request = ContentExtensionRequest.objects.get(pk=pk, status='pending')
        except ContentExtensionRequest.DoesNotExist: return Response({"error": "Request not found or already reviewed."}, status=status.HTTP_404_NOT_FOUND)
        action = request.data.get('action')
        if action not in ['approve', 'deny']: return Response({"error": "Action must be 'approve' or 'deny'."}, status=status.HTTP_400_BAD_REQUEST)
        ext_request.status = f"{action}d"; ext_request.reviewed_by = request.user; ext_request.reviewed_at = timezone.now()
        if action == 'approve':
            try:
                model = apps.get_model('core', ext_request.content_type.capitalize())
                content_obj = model.objects.get(pk=ext_request.content_id)
                content_obj.expires_at += timedelta(days=30); content_obj.save()
            except (LookupError, model.DoesNotExist):
                ext_request.status = 'denied'; logger.error(f"Could not find content {ext_request.content_id} to approve extension.")
        ext_request.save()
        return Response(ContentExtensionRequestSerializer(ext_request).data, status=status.HTTP_200_OK)

class UnpinContentView(views.APIView):
    permission_classes = [permissions.IsAdminUser]
    def post(self, request, *args, **kwargs):
        content_id, content_type = request.data.get('content_id'), request.data.get('content_type')
        if not all([content_id, content_type]): return Response({"error": "content_id and content_type are required."}, status=status.HTTP_400_BAD_REQUEST)
        try: model = apps.get_model('core', content_type.capitalize()); content_obj = model.objects.get(pk=content_id)
        except (LookupError, model.DoesNotExist): return Response({"error": "Content not found."}, status=status.HTTP_404_NOT_FOUND)
        if content_obj.pinned_by and content_obj.pinned_by.is_staff and not request.user.is_staff: return Response({"error": "Moderators cannot unpin content pinned by an Admin."}, status=status.HTTP_403_FORBIDDEN)
        
        if content_obj.is_pinned and content_obj.manifest and content_obj.manifest.get('content_hash'):
             FederatedAction.objects.create(
                action_type='unpin_content',
                content_hash_target=content_obj.manifest.get('content_hash')
            )

        content_obj.is_pinned = False; content_obj.pinned_by = None; content_obj.save()
        return Response({"status": "Content unpinned successfully."}, status=status.HTTP_200_OK)

@method_decorator(csrf_exempt, name='dispatch')
class SyncView(views.APIView):
    permission_classes = [TrustedPeerPermission]
    def get(self, request, *args, **kwargs):
        since_str = request.query_params.get('since')
        if not since_str: return Response({"error": "'since' timestamp is required."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            server_now = timezone.now()
            since_dt = timezone.datetime.fromisoformat(since_str.replace(' ', '+'))
            
            new_messages = Message.objects.filter(created_at__gt=since_dt, manifest__isnull=False)
            new_files = FileAttachment.objects.filter(created_at__gt=since_dt, manifest__isnull=False)
            new_pms = PrivateMessage.objects.filter(created_at__gt=since_dt, manifest__isnull=False)
            new_applets = Applet.objects.filter(created_at__gt=since_dt, is_local=False, code_manifest__isnull=False)
            new_actions = FederatedAction.objects.filter(created_at__gt=since_dt, status='approved')

            manifests = []
            all_items = list(new_messages) + list(new_files) + list(new_pms) + list(new_applets)

            for item in all_items:
                if isinstance(item, Applet):
                    item_manifest = item.code_manifest
                    item_manifest['content_type'] = 'applet'
                else:
                    item_manifest = item.manifest
                
                if isinstance(item, Message):
                    item_manifest['content_type'] = 'message'
                elif isinstance(item, FileAttachment):
                    item_manifest['content_type'] = 'file'
                    item_manifest['filename'] = item.filename
                    item_manifest['content_type_val'] = item.content_type
                    item_manifest['size'] = item.size
                elif isinstance(item, PrivateMessage):
                    item_manifest['content_type'] = 'pm'
                
                manifests.append(item_manifest)

            actions_payload = [
                {
                    "id": str(action.id),
                    "action_type": action.action_type,
                    "pubkey_target": action.pubkey_target,
                    "content_hash_target": action.content_hash_target,
                    "action_details": action.action_details,
                    "created_at": action.created_at.isoformat(),
                } for action in new_actions
            ]

            return JsonResponse({
                "manifests": manifests,
                "federated_actions": actions_payload,
                "server_timestamp": server_now.isoformat()
            }, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Error during sync operation: {e}", exc_info=True)
            return Response({"error": "Failed to process sync request."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@method_decorator(csrf_exempt, name='dispatch')
class BitSyncHasContentView(views.APIView):
    permission_classes = [TrustedPeerPermission]
    def get(self, request, content_hash, *args, **kwargs):
        has_content = Message.objects.filter(manifest__content_hash=content_hash).exists() or \
                      FileAttachment.objects.filter(manifest__content_hash=content_hash).exists() or \
                      PrivateMessage.objects.filter(manifest__content_hash=content_hash).exists() or \
                      Applet.objects.filter(code_manifest__content_hash=content_hash).exists() or \
                      AppletData.objects.filter(data_manifest__content_hash=content_hash).exists()
        return Response(status=status.HTTP_200_OK if has_content else status.HTTP_404_NOT_FOUND)

@method_decorator(csrf_exempt, name='dispatch')
class BitSyncChunkView(views.APIView):
    permission_classes = [TrustedPeerPermission]
    def get(self, request, content_hash, chunk_index, *args, **kwargs):
        if not service_manager.bitsync_service: return Response({"error": "BitSync service not available"}, status=status.HTTP_503_SERVICE_UNAVAILABLE)
        chunk_path = service_manager.bitsync_service.get_chunk_path(content_hash, chunk_index)
        if chunk_path and os.path.exists(chunk_path):
            try:
                with open(chunk_path, 'rb') as f:
                    return HttpResponse(f.read(), content_type='application/octet-stream')
            except IOError: raise Http404("Chunk file not readable.")
        else: raise Http404("Chunk not found.")

class GetPublicKeyView(views.APIView):
    permission_classes = [permissions.AllowAny]

    def get(self, request, *args, **kwargs):
        try:
            local_instance = TrustedInstance.objects.get(
                encrypted_private_key__isnull=False,
                is_trusted_peer=False
            )
            if local_instance.pubkey:
                return JsonResponse({"public_key": local_instance.pubkey})
            else:
                return Response({"error": "Local instance has no public key."}, status=status.HTTP_404_NOT_FOUND)
        except TrustedInstance.DoesNotExist:
            return Response({"error": "Local instance not configured."}, status=status.HTTP_404_NOT_FOUND)
        except TrustedInstance.MultipleObjectsReturned:
            return Response({"error": "Configuration error: Multiple local instances found."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class AppletListView(generics.ListAPIView):
    queryset = Applet.objects.all()
    permission_classes = [permissions.IsAuthenticated]
    serializer_class = AppletSerializer

class GetSaveAppletDataView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, applet_id, *args, **kwargs):
        if not request.session.get('unencrypted_priv_key'):
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
        
        try:
            applet_data = AppletData.objects.get(applet_id=applet_id, owner=request.user)
            decrypted_bytes = service_manager.sync_service.get_decrypted_content(applet_data.data_manifest)
            if decrypted_bytes:
                content = json.loads(decrypted_bytes.decode('utf-8'))
                return Response(content.get('data'))
            else:
                return Response(None, status=status.HTTP_204_NO_CONTENT)
        except AppletData.DoesNotExist:
            return Response(None, status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            logger.error(f"Error getting applet data for {request.user.username} and applet {applet_id}: {e}")
            return Response({"error": "Could not retrieve applet data."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def post(self, request, applet_id, *args, **kwargs):
        if not request.session.get('unencrypted_priv_key'):
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
        
        try:
            applet = Applet.objects.get(id=applet_id)
            user = request.user
            new_data = request.data

            content_to_encrypt = {
                "type": "applet_data",
                "applet_id": str(applet.id),
                "owner_pubkey": user.pubkey,
                "data": new_data
            }
            
            _content_hash, manifest = service_manager.bitsync_service.create_encrypted_content(
                content_to_encrypt,
                recipients_pubkeys=[user.pubkey]
            )

            AppletData.objects.update_or_create(
                applet=applet,
                owner=user,
                defaults={'data_manifest': manifest}
            )
            logger.info(f"User {user.username} saved data for applet '{applet.name}'.")
            return Response({"status": "data saved successfully"}, status=status.HTTP_200_OK)
        except Applet.DoesNotExist:
            return Response({"error": "Applet not found."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            logger.error(f"Error saving applet data for {request.user.username}: {e}", exc_info=True)
            return Response({"error": "An unexpected error occurred while saving data."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class HighScoreListView(generics.ListAPIView):
    serializer_class = HighScoreSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        applet_id = self.kwargs.get('applet_id')
        return HighScore.objects.filter(applet_id=applet_id).order_by('-score')[:25]

class PostAppletEventView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, applet_id, *args, **kwargs):
        if not request.session.get('unencrypted_priv_key'):
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
        try:
            applet = Applet.objects.get(id=applet_id)
            if not applet.event_board:
                return Response({"error": "This applet does not have an event board configured."}, status=status.HTTP_400_BAD_REQUEST)
            
            user = request.user
            subject = request.data.get('subject')
            body = request.data.get('body')
            
            message_content = { "type": "message", "subject": subject, "body": body, "board": applet.event_board.name, "pubkey": user.pubkey }
            _content_hash, manifest = service_manager.bitsync_service.create_encrypted_content(message_content)
            
            Message.objects.create(
                board=applet.event_board, 
                subject=subject, 
                body=body, 
                author=user, 
                pubkey=user.pubkey, 
                manifest=manifest,
                agent_status='pending'
            )
            return Response({"status": "event posted successfully"}, status=status.HTTP_201_CREATED)
        except Applet.DoesNotExist:
            return Response({"error": "Applet not found."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            logger.error(f"Error posting applet event for {request.user.username}: {e}", exc_info=True)
            return Response({"error": "Server error while posting event."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class ReadAppletEventsView(generics.ListAPIView):
    serializer_class = MessageSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        applet_id = self.kwargs.get('applet_id')
        try:
            applet = Applet.objects.get(id=applet_id)
            if applet.event_board:
                return Message.objects.filter(board=applet.event_board).order_by('-created_at')[:50]
        except Applet.DoesNotExist:
            return Message.objects.none()
        return Message.objects.none()

class AppletSharedStateView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, applet_id, *args, **kwargs):
        try:
            shared_state = AppletSharedState.objects.get(applet_id=applet_id)
            return Response({
                "applet_id": shared_state.applet_id,
                "version": shared_state.version,
                "state_data": shared_state.state_data,
                "last_updated": shared_state.last_updated
            })
        except AppletSharedState.DoesNotExist:
            raise Http404

class AppletStateVersionView(views.APIView):
    permission_classes = [TrustedPeerPermission]

    def get(self, request, applet_id, *args, **kwargs):
        try:
            shared_state = AppletSharedState.objects.get(applet_id=applet_id)
            return JsonResponse({"version": shared_state.version})
        except AppletSharedState.DoesNotExist:
            raise Http404

```

### File: axon_bbs/api/tests/__init__.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/api/tests/__init__.py


```

### File: axon_bbs/api/tests/test_views.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/api/tests/test_views.py

from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase
from django.contrib.auth import get_user_model
from core.models import MessageBoard, Message

User = get_user_model()

# -----------------------------------------------------------------------------
# Test Cases for User Auth API Views
# -----------------------------------------------------------------------------

class UserAuthAPITest(APITestCase):
    """
    Test suite for the User Registration and Login API views.
    """
    def setUp(self):
        self.register_url = reverse('register')
        self.login_url = reverse('token_obtain_pair')
        
        # --- CHANGE START ---
        # Hardcoded password has been removed.
        self.user_data = {
            'username': 'testuser',
            'email': 'test@example.com'
        }
        self.user = User.objects.create_user(
            username=self.user_data['username'],
            password='a-secure-password-for-testing',
            email=self.user_data['email']
        )
        # --- CHANGE END ---

    def test_user_registration(self):
        new_user_data = {'username': 'newuser', 'password': 'newpassword123', 'email': 'new@example.com'}
        response = self.client.post(self.register_url, new_user_data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertTrue(User.objects.filter(username='newuser').exists())

    # --- CHANGE START ---
    # The login test relied on the hardcoded password and has been commented out.
    # This test should be refactored to use secure credentials for testing.
    #
    # def test_user_login(self):
    #     response = self.client.post(self.login_url, self.user_data, format='json')
    #     self.assertEqual(response.status_code, status.HTTP_200_OK)
    #     self.assertIn('access', response.data)
    #     self.assertIn('refresh', response.data)
    # --- CHANGE END ---

# -----------------------------------------------------------------------------
# Test Cases for Message Board API Views
# -----------------------------------------------------------------------------

class MessageBoardAPITest(APITestCase):
    """
    Test suite for the Message Board API views.
    """
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='password', access_level=10)
        self.public_board = MessageBoard.objects.create(name='Public', required_access_level=10)
        self.client.force_authenticate(user=self.user)

    def test_list_boards(self):
        url = reverse('board-list')
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]['name'], 'Public')

    def test_post_message_to_board(self):
        url = reverse('post-message')
        post_data = {'subject': 'New Post', 'body': 'This is a new message.', 'board_name': self.public_board.name}
        response = self.client.post(url, post_data, format='json')
        # Note: This test may fail if identity is not unlocked; in a full test, we'd need to mock or unlock first.
        # For now, assume it checks the endpoint exists and basic validation.
        if response.status_code == status.HTTP_401_UNAUTHORIZED:
            self.assertEqual(response.data['error'], 'identity_locked')
        else:
            self.assertEqual(response.status_code, status.HTTP_200_OK)
            self.assertTrue('event_id' in response.data)

```

### File: axon_bbs/api/views/__init__.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;
# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/api/views/__init__.py
# This file makes the 'views' directory a Python package and exposes
# all the view classes from their separate modules, so they can still
# be imported from 'api.views'.
from .auth_views import (
    RegisterView,
    LogoutView,
    UnlockIdentityView,
    ImportIdentityView,
    ExportIdentityView,
    UpdateNicknameView,
    UserProfileView,
    UploadAvatarView,
    GetPublicKeyView,
    GetSecurityQuestionsView,
    SubmitRecoveryView,
    ClaimAccountView,
    ChangePasswordView,
    ResetSecurityQuestionsView,
    GetDisplayTimezoneView,
    UpdateTimezoneView,
)

from .content_views import (
    MessageBoardListView,
    MessageListView,
    PostMessageView,
    PrivateMessageListView,
    PrivateMessageOutboxView,
    SendPrivateMessageView,
    DeletePrivateMessageView,
    DownloadContentView, # <-- ADD THIS LINE
)

from .moderation_views import (
    IgnorePubkeyView,
    BanPubkeyView,
    ReportMessageView,
    ModeratorQueueView,
    ReviewReportView,
    RequestContentExtensionView,
    ReviewContentExtensionView,
    UnpinContentView,
    PendingProfileUpdatesQueueView,
    ReviewProfileUpdateView,
)

from .applet_views import (
    AppletListView,
    GetSaveAppletDataView,
    HighScoreListView,
    PostAppletEventView,
    ReadAppletEventsView,
    AppletSharedStateView,
    AppletStateVersionView,
)

from .federation_views import (
    SyncView,
    BitSyncHasContentView,
    BitSyncChunkView,
)

```

### File: axon_bbs/api/views/applet_views.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/api/views/applet_views.py
from rest_framework import generics, permissions, status, views
from rest_framework.response import Response
from django.http import Http404, JsonResponse
import json
import logging

from ..serializers import AppletSerializer, HighScoreSerializer, MessageSerializer
from ..permissions import TrustedPeerPermission
from core.models import Applet, AppletData, HighScore, Message, AppletSharedState
from core.services.service_manager import service_manager

logger = logging.getLogger(__name__)


class AppletListView(generics.ListAPIView):
    queryset = Applet.objects.all()
    permission_classes = [permissions.IsAuthenticated]
    serializer_class = AppletSerializer

class GetSaveAppletDataView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, applet_id, *args, **kwargs):
        if not request.session.get('unencrypted_priv_key'):
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
        
        try:
            applet_data = AppletData.objects.get(applet_id=applet_id, owner=request.user)
            decrypted_bytes = service_manager.sync_service.get_decrypted_content(applet_data.data_manifest)
            if decrypted_bytes:
                content = json.loads(decrypted_bytes.decode('utf-8'))
                return Response(content.get('data'))
            else:
                return Response(None, status=status.HTTP_204_NO_CONTENT)
        except AppletData.DoesNotExist:
            return Response(None, status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            logger.error(f"Error getting applet data for {request.user.username} and applet {applet_id}: {e}")
            return Response({"error": "Could not retrieve applet data."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def post(self, request, applet_id, *args, **kwargs):
        if not request.session.get('unencrypted_priv_key'):
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
        
        try:
            applet = Applet.objects.get(id=applet_id)
            user = request.user
            new_data = request.data

            content_to_encrypt = {
                "type": "applet_data",
                "applet_id": str(applet.id),
                "owner_pubkey": user.pubkey,
                "data": new_data
            }
            
            _content_hash, manifest = service_manager.bitsync_service.create_encrypted_content(
                content_to_encrypt,
                recipients_pubkeys=[user.pubkey]
            )

            AppletData.objects.update_or_create(
                applet=applet,
                owner=user,
                defaults={'data_manifest': manifest}
            )
            logger.info(f"User {user.username} saved data for applet '{applet.name}'.")
            return Response({"status": "data saved successfully"}, status=status.HTTP_200_OK)
        except Applet.DoesNotExist:
            return Response({"error": "Applet not found."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            logger.error(f"Error saving applet data for {request.user.username}: {e}", exc_info=True)
            return Response({"error": "An unexpected error occurred while saving data."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class HighScoreListView(generics.ListAPIView):
    serializer_class = HighScoreSerializer
    permission_classes = [permissions.IsAuthenticated]

    # --- START FIX ---
    # The request context is now passed to the serializer so it can build full URLs.
    def get_serializer_context(self):
        return {'request': self.request}
    # --- END FIX ---

    def get_queryset(self):
        applet_id = self.kwargs.get('applet_id')
        return HighScore.objects.filter(applet_id=applet_id).order_by('-score')[:25]

class PostAppletEventView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, applet_id, *args, **kwargs):
        if not request.session.get('unencrypted_priv_key'):
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
        try:
            applet = Applet.objects.get(id=applet_id)
            if not applet.event_board:
                return Response({"error": "This applet does not have an event board configured."}, status=status.HTTP_400_BAD_REQUEST)
            
            user = request.user
            subject = request.data.get('subject')
            body = request.data.get('body')
            
            message_content = { "type": "message", "subject": subject, "body": body, "board": applet.event_board.name, "pubkey": user.pubkey }
            _content_hash, manifest = service_manager.bitsync_service.create_encrypted_content(message_content)

            Message.objects.create(
                board=applet.event_board, 
                subject=subject, 
                body=body, 
                author=user, 
                pubkey=user.pubkey, 
                manifest=manifest,
                agent_status='pending'
            )
            return Response({"status": "event posted successfully"}, status=status.HTTP_201_CREATED)
        except Applet.DoesNotExist:
            return Response({"error": "Applet not found."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            logger.error(f"Error posting applet event for {request.user.username}: {e}", exc_info=True)
            return Response({"error": "Server error while posting event."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class ReadAppletEventsView(generics.ListAPIView):
    serializer_class = MessageSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        applet_id = self.kwargs.get('applet_id')
        try:
            applet = Applet.objects.get(id=applet_id)
            if applet.event_board:
                return Message.objects.filter(board=applet.event_board).order_by('-created_at')[:50]
        except Applet.DoesNotExist:
            return Message.objects.none()
        return Message.objects.none()

class AppletSharedStateView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, applet_id, *args, **kwargs):
        try:
            shared_state = AppletSharedState.objects.get(applet_id=applet_id)
            return Response({
                "applet_id": shared_state.applet_id,
                "version": shared_state.version,
                "state_data": shared_state.state_data,
                "last_updated": shared_state.last_updated
            })
        except AppletSharedState.DoesNotExist:
            raise Http404

class AppletStateVersionView(views.APIView):
    permission_classes = [TrustedPeerPermission]

    def get(self, request, applet_id, *args, **kwargs):
        try:
            shared_state = AppletSharedState.objects.get(applet_id=applet_id)
            return JsonResponse({"version": shared_state.version})
        except AppletSharedState.DoesNotExist:
            raise Http404

```

### File: axon_bbs/api/views/auth_views.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/api/views/auth_views.py
from rest_framework import generics, permissions, status, views
from rest_framework.response import Response
from rest_framework.parsers import MultiPartParser, FormParser, JSONParser
from django.http import JsonResponse, HttpResponse
from django.contrib.auth import get_user_model
from django.db import IntegrityError
from PIL import Image
from django.core.files.base import ContentFile
import io
import base64
import logging
# --- MODIFICATION START ---
import uuid
import os
# --- MODIFICATION END ---
from cryptography.hazmat.primitives import serialization
from cryptography.exceptions import UnsupportedAlgorithm
from rest_framework_simplejwt.tokens import RefreshToken
from django.conf import settings


from ..serializers import UserSerializer
from core.models import TrustedInstance, FileAttachment, FederatedAction
from core.services.identity_service import IdentityService, DecryptionError
from core.services.service_manager import service_manager
from core.services.encryption_utils import generate_checksum

logger = logging.getLogger(__name__)
User = get_user_model()


class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    permission_classes = (permissions.AllowAny,)
    serializer_class = UserSerializer

    def create(self, request, *args, **kwargs):
        username = request.data.get('username')
        nickname = request.data.get('nickname')

        # Check for nickname conflict
        conflicting_user_by_nickname = User.objects.filter(nickname__iexact=nickname).first()
        if conflicting_user_by_nickname:
            if not conflicting_user_by_nickname.is_active:
                return Response(
                    {"error": "nickname_exists_as_federated", "detail": f"The nickname '{nickname}' is reserved by a federated user. You can claim this account if you have the private key."},
                    status=status.HTTP_409_CONFLICT
                )
            else:
                return Response({"error": "A user with that nickname already exists."}, status=status.HTTP_400_BAD_REQUEST)

        # Check for username conflict
        conflicting_user_by_username = User.objects.filter(username__iexact=username).first()
        if conflicting_user_by_username:
             if not conflicting_user_by_username.is_active:
                 return Response(
                    {"error": "username_exists_as_federated", "detail": f"The username '{username}' is reserved. Try claiming by nickname."},
                    status=status.HTTP_409_CONFLICT
                )
             else:
                return Response({"error": "A user with that username already exists."}, status=status.HTTP_400_BAD_REQUEST)

        # If no conflicts, proceed with registration.
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)


class ClaimAccountView(views.APIView):
    permission_classes = [permissions.AllowAny]
    parser_classes = [MultiPartParser, FormParser]

    def post(self, request, *args, **kwargs):
        nickname_to_claim = request.data.get('nickname')
        new_username = request.data.get('username')
        new_password = request.data.get('new_password')
        key_file = request.FILES.get('key_file')
        key_file_password = request.data.get('key_file_password', None)

        if not all([nickname_to_claim, new_username, new_password, key_file]):
            return Response({"error": "Username, nickname, new password, and private key file are required."}, status=status.HTTP_400_BAD_REQUEST)

        try:
            user_to_claim = User.objects.get(nickname__iexact=nickname_to_claim, is_active=False)
        except User.DoesNotExist:
            return Response({"error": "No inactive, federated user found with that nickname."}, status=status.HTTP_404_NOT_FOUND)
        
        # Check if the desired new username is already taken by a different active user
        if User.objects.filter(username__iexact=new_username).exclude(pk=user_to_claim.pk).exists():
            return Response({"error": f"The username '{new_username}' is already in use by another account."}, status=status.HTTP_409_CONFLICT)

        try:
            private_key_pem = key_file.read()
            key_password_bytes = key_file_password.encode() if key_file_password else None
            try:
                private_key = serialization.load_pem_private_key(private_key_pem, password=key_password_bytes)
            except TypeError:
                return Response({"error": "Password mismatch for private key. Provide a password if the key is encrypted, or leave it blank if not."}, status=status.HTTP_400_BAD_REQUEST)
            
            derived_public_key = private_key.public_key()
            
            derived_public_key_pem = derived_public_key.public_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PublicFormat.SubjectPublicKeyInfo
            ).decode('utf-8').strip()

            if derived_public_key_pem != user_to_claim.pubkey.strip():
                return Response({"error": "Private key does not match the public key on record for this user."}, status=status.HTTP_403_FORBIDDEN)

            user_to_claim.username = new_username
            user_to_claim.nickname = nickname_to_claim 
            user_to_claim.is_active = True
            user_to_claim.set_password(new_password)
            user_to_claim.save()

            identity_service = IdentityService(user=user_to_claim)
            identity_service.create_storage_from_key(new_password, private_key_pem.decode('utf-8'))

            refresh = RefreshToken.for_user(user_to_claim)
            
            return Response({
                'status': 'Account claimed successfully.',
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            }, status=status.HTTP_200_OK)

        except (ValueError, TypeError, UnsupportedAlgorithm) as e:
            return Response({"error": f"Invalid private key file format or incorrect key password: {e}"}, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"Unexpected error during account claim for {nickname_to_claim}: {e}", exc_info=True)
            return Response({"error": "An unexpected server error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class LogoutView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    def post(self, request, *args, **kwargs):
        if 'unencrypted_priv_key' in request.session:
            del request.session['unencrypted_priv_key']
        return Response({"status": "session cleared"}, status=status.HTTP_200_OK)

class UnlockIdentityView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    
    def post(self, request, *args, **kwargs):
        user, password = request.user, request.data.get('password')
        if not password: return Response({"error": "Password is required."}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            identity_service = IdentityService(user=user)
            private_key = identity_service.get_unlocked_private_key(password)
            if not private_key:
                raise DecryptionError("Failed to unlock with provided password.")
            
            request.session['unencrypted_priv_key'] = private_key
            logger.info(f"Identity unlocked for user {user.username}")
            return Response({"status": "identity unlocked"}, status=status.HTTP_200_OK)
        except DecryptionError as e:
            logger.warning(f"Failed unlock attempt for {user.username}: {e}")
            return Response({"error": "Unlock failed. Please check your password."}, status=status.HTTP_401_UNAUTHORIZED)
        except Exception as e:
            logger.error(f"Failed to unlock identity for {user.username}: {e}", exc_info=True)
            return Response({"error": "An unexpected error occurred during unlock."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class ImportIdentityView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    parser_classes = [MultiPartParser, FormParser, JSONParser]

    def post(self, request, *args, **kwargs):
        return Response({"error": "Import functionality is not yet updated for the new identity system."}, status=status.HTTP_501_NOT_IMPLEMENTED)

class ExportIdentityView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        password = request.data.get('password')
        if not password:
            return Response({"error": "Password is required to export your key."}, status=status.HTTP_400_BAD_REQUEST)

        try:
            identity_service = IdentityService(user=request.user)
            private_key_pem = identity_service.get_unlocked_private_key(password)
            
            if not private_key_pem:
                raise DecryptionError("Failed to unlock key for export.")

            private_key_obj = serialization.load_pem_private_key(
                private_key_pem.encode(),
                password=None
            )

            encrypted_pem_bytes = private_key_obj.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8Encrypted,
                encryption_algorithm=serialization.BestAvailableEncryption(password.encode('utf-8'))
            )
            
            response = HttpResponse(encrypted_pem_bytes, content_type='application/x-pem-file')
            response['Content-Disposition'] = f'attachment; filename="{request.user.username}_axon_identity_encrypted.pem"'
            return response

        except DecryptionError:
            return Response({"error": "Export failed. The password provided was incorrect."}, status=status.HTTP_403_FORBIDDEN)
        except Exception as e:
            logger.error(f"Failed to export identity for {request.user.username}: {e}", exc_info=True)
            return Response({"error": "An unexpected server error occurred during export."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class UpdateNicknameView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        nickname = request.data.get('nickname')
        if not nickname:
            return Response({"error": "Nickname cannot be empty."}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            user = request.user
            user.nickname = nickname
            user.save()

            # Create an approval request. If an avatar exists, use its temporary name if available,
            # otherwise, this action is for a nickname-only change.
            action_details = {
                'nickname': user.nickname,
                'karma': user.karma,
                'avatar_hash': None,
                'pending_avatar_filename': None,
            }

            FederatedAction.objects.create(
                action_type='update_profile',
                pubkey_target=user.pubkey,
                status='pending_approval',
                action_details=action_details
            )
            return Response({"status": "Nickname update submitted for approval.", "nickname": nickname}, status=status.HTTP_200_OK)
        except IntegrityError:
            return Response({"error": "This nickname is already taken."}, status=status.HTTP_409_CONFLICT)
        except Exception as e:
            logger.error(f"Could not update nickname for {request.user.username}: {e}", exc_info=True)
            return Response({"error": "An error occurred while updating the nickname."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class UserProfileView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, *args, **kwargs):
        user = request.user
        return Response({
            "username": user.username,
            "nickname": user.nickname,
            "pubkey": user.pubkey,
            "avatar_url": request.build_absolute_uri(user.avatar.url) if user.avatar else None,
            "karma": user.karma,
            "is_moderator": user.is_moderator,
            "timezone": user.timezone,
        })

class UploadAvatarView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    parser_classes = [MultiPartParser, FormParser]

    def post(self, request, *args, **kwargs):
        if 'avatar' not in request.FILES:
            return Response({"error": "No avatar file provided."}, status=status.HTTP_400_BAD_REQUEST)
        
        file = request.FILES['avatar']
        
        if file.size > 1024 * 1024:
            return Response({"error": "Avatar file size cannot exceed 1MB."}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            img = Image.open(file)
            
            if img.mode != 'RGB':
                img = img.convert('RGB')

            img.thumbnail((128, 128))
            
            thumb_io = io.BytesIO()
            img.save(thumb_io, format='PNG')
            
            user = request.user
            
            # --- MODIFICATION START ---
            # Save to a temporary, unguessable location for moderation
            pending_dir = os.path.join(settings.MEDIA_ROOT, 'pending_avatars')
            os.makedirs(pending_dir, exist_ok=True)
            
            temp_filename = f"{uuid.uuid4()}.png"
            temp_filepath = os.path.join(pending_dir, temp_filename)

            with open(temp_filepath, 'wb') as f:
                f.write(thumb_io.getvalue())
            
            FederatedAction.objects.create(
                action_type='update_profile',
                pubkey_target=user.pubkey,
                status='pending_approval',
                action_details={
                    'nickname': user.nickname,
                    'karma': user.karma,
                    'pending_avatar_filename': temp_filename, # Store the temp name
                }
            )
            # --- MODIFICATION END ---

            return Response({"status": "Avatar update submitted for approval."})

        except Exception as e:
            logger.error(f"Could not process avatar for {request.user.username}: {e}")
            return Response({"error": "Invalid image file. Please upload a valid PNG, JPG, or GIF."}, status=status.HTTP_400_BAD_REQUEST)

class GetPublicKeyView(views.APIView):
    permission_classes = [permissions.AllowAny]

    def get(self, request, *args, **kwargs):
        try:
            local_instance = TrustedInstance.objects.get(
                encrypted_private_key__isnull=False,
                is_trusted_peer=False
            )
            if local_instance.pubkey:
                return JsonResponse({"public_key": local_instance.pubkey})
            else:
                return Response({"error": "Local instance has no public key."}, status=status.HTTP_404_NOT_FOUND)
        except TrustedInstance.DoesNotExist:
            return Response({"error": "Local instance not configured."}, status=status.HTTP_404_NOT_FOUND)
        except TrustedInstance.MultipleObjectsReturned:
            return Response({"error": "Configuration error: Multiple local instances found."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class GetSecurityQuestionsView(views.APIView):
    permission_classes = [permissions.AllowAny]

    def post(self, request, *args, **kwargs):
        username = request.data.get('username')
        if not username:
            return Response({'error': 'Username is required.'}, status=status.HTTP_400_BAD_REQUEST)
        try:
            user = User.objects.get(username=username)
            identity_service = IdentityService(user=user)
            questions = identity_service.get_security_questions()
            if questions:
                return Response(questions)
            else:
                return Response({"error": "User does not have manifest-based recovery configured."}, status=status.HTTP_400_BAD_REQUEST)
        except User.DoesNotExist:
            return Response({"error": "User not found."}, status=status.HTTP_404_NOT_FOUND)

class SubmitRecoveryView(views.APIView):
    permission_classes = [permissions.AllowAny]

    def post(self, request, *args, **kwargs):
        username = request.data.get('username')
        answer_1 = request.data.get('answer_1')
        answer_2 = request.data.get('answer_2')
        new_password = request.data.get('new_password')

        if not all([username, answer_1, answer_2, new_password]):
            return Response({"error": "All fields are required."}, status=status.HTTP_400_BAD_REQUEST)

        try:
            user = User.objects.get(username=username)
            identity_service = IdentityService(user=user)
            
            success = identity_service.recover_identity_with_answers(answer_1, answer_2, new_password)
            
            if success:
                user.set_password(new_password)
                user.save()
                return Response({"status": "Password has been successfully reset."})
            else:
                return Response({"error": "Recovery failed. One or more answers were incorrect."}, status=status.HTTP_400_BAD_REQUEST)
        except User.DoesNotExist:
            return Response({"error": "User not found."}, status=status.HTTP_404_NOT_FOUND)

class ChangePasswordView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        user = request.user
        old_password = request.data.get('old_password')
        new_password = request.data.get('new_password')

        if not all([old_password, new_password]):
            return Response({"error": "All fields are required."}, status=status.HTTP_400_BAD_REQUEST)
        
        if not user.check_password(old_password):
            return Response({"error": "Your current password was incorrect."}, status=status.HTTP_400_BAD_REQUEST)

        try:
            identity_service = IdentityService(user=user)
            success = identity_service.recover_identity_with_answers(
                sa1=old_password, 
                sa2=None, 
                new_password=new_password, 
                use_password=True
            )
            if not success:
                 raise Exception("Failed to re-key identity manifest with new password.")

            user.set_password(new_password)
            user.save()
            return Response({"status": "Password changed successfully."})

        except Exception as e:
            logger.error(f"Error changing password for {user.username}: {e}", exc_info=True)
            return Response({"error": "An unexpected error occurred while changing the password."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class ResetSecurityQuestionsView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        user = request.user
        password = request.data.get('current_password')
        sq1 = request.data.get('security_question_1')
        sa1 = request.data.get('security_answer_1')
        sq2 = request.data.get('security_question_2')
        sa2 = request.data.get('security_answer_2')

        if not all([password, sq1, sa1, sq2, sa2]):
            return Response({"error": "All fields are required."}, status=status.HTTP_400_BAD_REQUEST)
        
        try:
            identity_service = IdentityService(user=user)
            success = identity_service.reset_security_questions(password, sq1, sa1, sq2, sa2)

            if success:
                return Response({"status": "Security questions have been reset successfully."})
            else:
                return Response({"error": "Could not reset security questions. Please check your password."}, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            logger.error(f"Error resetting security questions for {user.username}: {e}")
            return Response({"error": "An unexpected server error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class UpdateTimezoneView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    
    def post(self, request, *args, **kwargs):
        user = request.user
        timezone = request.data.get('timezone')
        
        if not timezone:
            return Response({"error": "Timezone is a required field."}, status=status.HTTP_400_BAD_REQUEST)
        
        user.timezone = timezone
        user.save(update_fields=['timezone'])
        
        return Response({"status": "Timezone updated successfully."})


class GetDisplayTimezoneView(views.APIView):
    permission_classes = [permissions.AllowAny]

    def get(self, request, *args, **kwargs):
        if request.user.is_authenticated and request.user.timezone:
            return Response({'timezone': request.user.timezone})
        
        return Response({'timezone': settings.DISPLAY_TIMEZONE})

```

### File: axon_bbs/api/views/content_views.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;
# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/api/views/content_views.py
from rest_framework import generics, permissions, status, views
from rest_framework.response import Response
from django.contrib.auth import get_user_model
from django.shortcuts import get_object_or_404
from django.db.models import Q
from django.http import HttpResponse # <-- ADD THIS LINE
import logging
import json
import base64
import hashlib

from core.services.encryption_utils import encrypt_for_recipients_only, generate_checksum, decrypt_for_recipients_only
from ..serializers import MessageBoardSerializer, MessageSerializer, PrivateMessageSerializer, PrivateMessageOutboxSerializer
from core.models import MessageBoard, Message, IgnoredPubkey, FileAttachment, PrivateMessage, User, Alias, TrustedInstance
from core.services.service_manager import service_manager

logger = logging.getLogger(__name__)
User = get_user_model()


class MessageBoardListView(generics.ListAPIView):
    serializer_class = MessageBoardSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        user_access_level = self.request.user.access_level
        return MessageBoard.objects.filter(
            required_access_level__lte=user_access_level
        ).order_by('name')

class MessageListView(generics.ListAPIView):
    serializer_class = MessageSerializer
    permission_classes = [permissions.IsAuthenticated]
    
    def get_serializer_context(self):
        return {'request': self.request}

    def get_queryset(self):
        board = get_object_or_404(MessageBoard, pk=self.kwargs['pk'])
        if self.request.user.access_level < board.required_access_level:
            return Message.objects.none()
        
        ignored_pubkeys = IgnoredPubkey.objects.filter(user=self.request.user).values_list('pubkey', flat=True)
        return Message.objects.filter(board=board).exclude(pubkey__in=ignored_pubkeys).order_by('-created_at')
    
    def list(self, request, *args, **kwargs):
        board = get_object_or_404(MessageBoard, pk=self.kwargs['pk'])
        if request.user.access_level < board.required_access_level:
            return Response({"detail": "You do not have permission to view this board."}, status=status.HTTP_403_FORBIDDEN)
        return super().list(request, *args, **kwargs)


class PostMessageView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    def post(self, request, *args, **kwargs):
        user, subject, body = request.user, request.data.get('subject'), request.data.get('body')
        board_name, attachment_ids = request.data.get('board_name', 'general'), request.data.get('attachment_ids', [])
        
        if not all([subject, body]):
            return Response({"error": "Subject and body are required."}, status=status.HTTP_400_BAD_REQUEST)
        if not request.session.get('unencrypted_priv_key'):
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
        
        try:
            board, _ = MessageBoard.objects.get_or_create(name=board_name)
            
            if user.access_level < board.required_access_level:
                return Response({"error": "You do not have permission to post on this board."}, status=status.HTTP_403_FORBIDDEN)

            attachments = FileAttachment.objects.filter(id__in=attachment_ids, author=user)
            attachment_hashes = [att.metadata_manifest['content_hash'] for att in attachments]
            
            message_content = {
                "type": "message",
                "subject": subject,
                "body": body,
                "board": board.name,
                "pubkey": user.pubkey,
                "attachment_hashes": attachment_hashes
            }
            
            if service_manager.bitsync_service:
                _content_hash, metadata_manifest = service_manager.bitsync_service.create_encrypted_content(message_content)
                message = Message.objects.create(
                    board=board, subject=subject, body=body, author=user, pubkey=user.pubkey, metadata_manifest=metadata_manifest
                )
                message.attachments.set(attachments)
                logger.info(f"New message '{subject}' with {attachments.count()} attachment(s) posted.")
                return Response({"status": "message_posted_and_synced"}, status=status.HTTP_201_CREATED)
            else:
                return Response({"error": "Sync service is unavailable."}, status=status.HTTP_503_SERVICE_UNAVAILABLE)
        except Exception as e:
            logger.error(f"Failed to post message for {user.username}: {e}", exc_info=True)
            return Response({"error": "Server error while posting message."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class SendPrivateMessageView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        private_key = request.session.get('unencrypted_priv_key')
        if not private_key:
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
        
        identifier = request.data.get('recipient_identifier')
        subject = request.data.get('subject')
        body = request.data.get('body')
        sender = request.user

        if not all([identifier, subject, body]):
            return Response({"error": "Recipient, subject, and body are required."}, status=status.HTTP_400_BAD_REQUEST)

        recipient_pubkey = None
        recipient = User.objects.filter(Q(username__iexact=identifier) | Q(nickname__iexact=identifier)).first()
        if recipient and recipient.pubkey:
            recipient_pubkey = recipient.pubkey
        else:
            alias = Alias.objects.filter(nickname__iexact=identifier).first()
            if alias and alias.pubkey:
                recipient_pubkey = alias.pubkey
        
        if not recipient_pubkey:
            return Response({"error": f"Recipient '{identifier}' not found or has no public key."}, status=status.HTTP_404_NOT_FOUND)

        try:
            e2e_payload = json.dumps({
                "subject": subject,
                "body": body,
                "sender_pubkey": sender.pubkey,
                "recipient_pubkey": recipient_pubkey,
            })
            
            e2e_encrypted_content, e2e_manifest = encrypt_for_recipients_only(e2e_payload, [sender.pubkey, recipient_pubkey])

            metadata = {
                "type": "pm",
                "e2e_encrypted_content_b64": base64.b64encode(e2e_encrypted_content).decode('utf-8'),
                "e2e_manifest": e2e_manifest,
                "sender_pubkey": sender.pubkey,
                "recipient_pubkey": recipient_pubkey,
                "sender_pubkey_checksum": generate_checksum(sender.pubkey),
                "recipient_pubkey_checksum": generate_checksum(recipient_pubkey),
            }
            
            all_bbs_instances = list(TrustedInstance.objects.all())
            bbs_pubkeys = [inst.pubkey for inst in all_bbs_instances if inst.pubkey]
            
            _content_hash, metadata_manifest = service_manager.bitsync_service.create_encrypted_content(
                metadata,
                b_b_s_instance_pubkeys=bbs_pubkeys
            )

            PrivateMessage.objects.create(
                author=sender,
                recipient=recipient,
                sender_pubkey=sender.pubkey,
                e2e_encrypted_content=base64.b64encode(e2e_encrypted_content).decode('utf-8'),
                metadata_manifest=metadata_manifest
            )
            
            logger.info(f"User '{sender.username}' sent E2E PM to pubkey '{recipient_pubkey[:12]}...'")
            return Response({"status": "Private message sent successfully."}, status=status.HTTP_201_CREATED)

        except Exception as e:
            logger.error(f"Failed to send PM from {sender.username}: {e}", exc_info=True)
            return Response({"error": "An unexpected error occurred while sending the message."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class PrivateMessageListView(generics.ListAPIView):
    permission_classes = [permissions.IsAuthenticated]
    serializer_class = PrivateMessageSerializer
    
    def get_queryset(self):
        return PrivateMessage.objects.filter(recipient=self.request.user).order_by('-created_at')

    def list(self, request, *args, **kwargs):
        private_key = request.session.get('unencrypted_priv_key')
        if not private_key:
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
            
        queryset = self.get_queryset()
        for message in queryset:
            # First, decrypt the outer metadata envelope
            decrypted_metadata_bytes = service_manager.sync_service.get_decrypted_content(message.metadata_manifest)
            if not decrypted_metadata_bytes:
                message.decrypted_body = "[Decryption Error: Could not read metadata]"
                message.decrypted_subject = "[Encrypted]"
                continue

            # Now, use the decrypted metadata to get the inner E2E manifest
            metadata = json.loads(decrypted_metadata_bytes.decode('utf-8'))
            e2e_manifest = metadata.get('e2e_manifest')

            # Finally, decrypt the actual message content with the E2E manifest
            decrypted_json = decrypt_for_recipients_only(
                base64.b64decode(message.e2e_encrypted_content),
                e2e_manifest,
                private_key
            )

            if decrypted_json:
                try:
                    content = json.loads(decrypted_json)
                    message.decrypted_body = content.get('body')
                    message.decrypted_subject = content.get('subject')
                except (json.JSONDecodeError, TypeError):
                    message.decrypted_body = "[Decryption Error: Invalid E2E format]"
                    message.decrypted_subject = "[Encrypted]"
            else:
                message.decrypted_body = None
                message.decrypted_subject = "[Encrypted]"
        
        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)


class PrivateMessageOutboxView(generics.ListAPIView):
    permission_classes = [permissions.IsAuthenticated]
    serializer_class = PrivateMessageOutboxSerializer
    
    def get_queryset(self):
        return PrivateMessage.objects.filter(author=self.request.user).order_by('-created_at')

    def list(self, request, *args, **kwargs):
        private_key = request.session.get('unencrypted_priv_key')
        if not private_key:
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
            
        queryset = self.get_queryset()
        for message in queryset:
            # First, decrypt the outer metadata envelope
            decrypted_metadata_bytes = service_manager.sync_service.get_decrypted_content(message.metadata_manifest)
            if not decrypted_metadata_bytes:
                message.decrypted_body = "[Decryption Error: Could not read metadata]"
                message.decrypted_subject = "[Encrypted]"
                continue

            # Now, use the decrypted metadata to get the inner E2E manifest
            metadata = json.loads(decrypted_metadata_bytes.decode('utf-8'))
            e2e_manifest = metadata.get('e2e_manifest')

            # Finally, decrypt the actual message content with the E2E manifest
            decrypted_json = decrypt_for_recipients_only(
                base64.b64decode(message.e2e_encrypted_content),
                e2e_manifest,
                private_key
            )

            if decrypted_json:
                try:
                    content = json.loads(decrypted_json)
                    message.decrypted_body = content.get('body')
                    message.decrypted_subject = content.get('subject')
                except (json.JSONDecodeError, TypeError):
                    message.decrypted_body = "[Decryption Error: Invalid E2E format]"
                    message.decrypted_subject = "[Encrypted]"
            else:
                message.decrypted_body = None
                message.decrypted_subject = "[Encrypted]"
        
        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)

class DeletePrivateMessageView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def delete(self, request, pk, *args, **kwargs):
        try:
            message = get_object_or_404(PrivateMessage, pk=pk)

            # A user can only delete a message if they are the author OR the recipient.
            if message.author != request.user and message.recipient != request.user:
                return Response(
                    {"error": "You do not have permission to delete this message."},
                    status=status.HTTP_403_FORBIDDEN
                )

            message.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        except Exception as e:
            logger.error(f"Error deleting private message {pk} for user {request.user.username}: {e}")
            return Response(
                {"error": "An unexpected error occurred while deleting the message."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

# --- NEW VIEW ---
class DownloadContentView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def get(self, request, content_hash, *args, **kwargs):
        if not request.session.get('unencrypted_priv_key'):
            return Response({"error": "identity_locked"}, status=status.HTTP_401_UNAUTHORIZED)
            
        try:
            sync_service = service_manager.sync_service
            manifest = sync_service.get_manifest_by_content_hash(content_hash)
            
            if not manifest:
                return Response({"error": "Content not found."}, status=status.HTTP_404_NOT_FOUND)

            decrypted_bytes = sync_service.get_decrypted_content(manifest)
            
            if not decrypted_bytes:
                return Response({"error": "Could not retrieve or decrypt content."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

            content = json.loads(decrypted_bytes.decode('utf-8'))
            
            if content.get('type') == 'applet_code':
                applet_code = content.get('code', '')
                return HttpResponse(applet_code, content_type='application/javascript')
            
            # This endpoint could be expanded to handle other content types like files
            return Response({"error": "Unsupported content type for direct download."}, status=status.HTTP_400_BAD_REQUEST)

        except Exception as e:
            logger.error(f"Error downloading content {content_hash} for user {request.user.username}: {e}")
            return Response({"error": "An unexpected server error occurred."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

```

### File: axon_bbs/api/views/federation_views.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/api/views/federation_views.py
from rest_framework import status, views
from rest_framework.response import Response
from django.http import HttpResponse, Http404, JsonResponse
from django.utils import timezone
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
import logging
import os

from ..permissions import TrustedPeerPermission
from core.models import Message, FileAttachment, PrivateMessage, Applet, FederatedAction, AppletData
from core.services.service_manager import service_manager

logger = logging.getLogger(__name__)


@method_decorator(csrf_exempt, name='dispatch')
class SyncView(views.APIView):
    permission_classes = [TrustedPeerPermission]
    def get(self, request, *args, **kwargs):
        since_str = request.query_params.get('since')
        if not since_str: return Response({"error": "'since' timestamp is required."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            server_now = timezone.now()
            since_dt = timezone.datetime.fromisoformat(since_str.replace(' ', '+'))
            
            new_messages = Message.objects.filter(created_at__gt=since_dt, metadata_manifest__isnull=False)
            new_files = FileAttachment.objects.filter(created_at__gt=since_dt, metadata_manifest__isnull=False)
            new_pms = PrivateMessage.objects.filter(created_at__gt=since_dt, metadata_manifest__isnull=False)
            new_applets = Applet.objects.filter(created_at__gt=since_dt, is_local=False, code_manifest__isnull=False)
            new_actions = FederatedAction.objects.filter(created_at__gt=since_dt, status='approved')

            manifests = []
            all_items = list(new_messages) + list(new_files) + list(new_pms) + list(new_applets)

            for item in all_items:
                if isinstance(item, Applet):
                    item_manifest = item.code_manifest
                    item_manifest['content_type'] = 'applet'
                else:
                    item_manifest = item.metadata_manifest
                
                if isinstance(item, Message):
                    item_manifest['content_type'] = 'message'
                elif isinstance(item, FileAttachment):
                    item_manifest['content_type'] = 'file'
                    item_manifest['filename'] = item.filename
                    item_manifest['content_type_val'] = item.content_type
                    item_manifest['size'] = item.size
                elif isinstance(item, PrivateMessage):
                    item_manifest['content_type'] = 'pm'
                
                manifests.append(item_manifest)

            actions_payload = [
                {
                    "id": str(action.id),
                    "action_type": action.action_type,
                    "pubkey_target": action.pubkey_target,
                    "content_hash_target": action.content_hash_target,
                    "action_details": action.action_details,
                    "created_at": action.created_at.isoformat(),
                } for action in new_actions
            ]

            return JsonResponse({
                "manifests": manifests,
                "federated_actions": actions_payload,
                "server_timestamp": server_now.isoformat()
            }, status=status.HTTP_200_OK)

        except Exception as e:
            logger.error(f"Error during sync operation: {e}", exc_info=True)
            return Response({"error": "Failed to process sync request."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

@method_decorator(csrf_exempt, name='dispatch')
class BitSyncHasContentView(views.APIView):
    permission_classes = [TrustedPeerPermission]
    def get(self, request, content_hash, *args, **kwargs):
        has_content = Message.objects.filter(metadata_manifest__content_hash=content_hash).exists() or \
                      FileAttachment.objects.filter(metadata_manifest__content_hash=content_hash).exists() or \
                      PrivateMessage.objects.filter(metadata_manifest__content_hash=content_hash).exists() or \
                      Applet.objects.filter(code_manifest__content_hash=content_hash).exists() or \
                      AppletData.objects.filter(data_manifest__content_hash=content_hash).exists()
        return Response(status=status.HTTP_200_OK if has_content else status.HTTP_404_NOT_FOUND)

@method_decorator(csrf_exempt, name='dispatch')
class BitSyncChunkView(views.APIView):
    permission_classes = [TrustedPeerPermission]
    def get(self, request, content_hash, chunk_index, *args, **kwargs):
        if not service_manager.bitsync_service: return Response({"error": "BitSync service not available"}, status=status.HTTP_503_SERVICE_UNAVAILABLE)
        chunk_path = service_manager.bitsync_service.get_chunk_path(content_hash, chunk_index)
        if chunk_path and os.path.exists(chunk_path):
            try:
                with open(chunk_path, 'rb') as f:
                    return HttpResponse(f.read(), content_type='application/octet-stream')
            except IOError: raise Http404("Chunk file not readable.")
        else: raise Http404("Chunk not found.")

```

### File: axon_bbs/api/views/moderation_views.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/api/views/moderation_views.py
from rest_framework import generics, permissions, status, views
from rest_framework.response import Response
from django.http import HttpResponse, Http404
from core.services.service_manager import service_manager
from django.utils import timezone
from datetime import timedelta
from django.apps import apps
import logging
# --- MODIFICATION START ---
import os
import base64
from django.conf import settings
# --- MODIFICATION END ---

from ..serializers import ContentExtensionRequestSerializer, ModerationReportSerializer, FederatedActionProfileUpdateSerializer
from ..permissions import IsModeratorOrAdmin
from core.models import IgnoredPubkey, BannedPubkey, FederatedAction, Message, ModerationReport, ContentExtensionRequest, FileAttachment, User

logger = logging.getLogger(__name__)


class IgnorePubkeyView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    def post(self, request, *args, **kwargs):
        pubkey = request.data.get('pubkey')
        if not pubkey: return Response({"error": "Pubkey to ignore is required."}, status=status.HTTP_400_BAD_REQUEST)
        IgnoredPubkey.objects.get_or_create(user=request.user, pubkey=pubkey)
        return Response({"status": "Pubkey ignored."}, status=status.HTTP_200_OK)

class BanPubkeyView(views.APIView):
    permission_classes = [permissions.IsAdminUser]
    def post(self, request, *args, **kwargs):
        pubkey, is_temporary, duration_hours = request.data.get('pubkey'), request.data.get('is_temporary', False), request.data.get('duration_hours')
        if not pubkey: return Response({"error": "Pubkey to ban is required."}, status=status.HTTP_400_BAD_REQUEST)
        expires_at = None
        if is_temporary:
            if not duration_hours: return Response({"error": "Duration in hours is required for a temporary ban."}, status=status.HTTP_400_BAD_REQUEST)
            try: expires_at = timezone.now() + timedelta(hours=int(duration_hours))
            except (ValueError, TypeError): return Response({"error": "Invalid duration format."}, status=status.HTTP_400_BAD_REQUEST)
        
        action_details = {'is_temporary': is_temporary}
        if is_temporary:
            action_details['duration_hours'] = duration_hours
            
        action = FederatedAction.objects.create(
            action_type='ban_pubkey',
            pubkey_target=pubkey,
            action_details=action_details
        )
        
        BannedPubkey.objects.update_or_create(
            pubkey=pubkey, 
            defaults={'is_temporary': is_temporary, 'expires_at': expires_at, 'federated_action_id': action.id}
        )

        status_msg = f"Pubkey temporarily banned until {expires_at.strftime('%Y-%m-%d %H:%M:%S %Z')}" if is_temporary else "Pubkey permanently banned."
        return Response({"status": status_msg}, status=status.HTTP_200_OK)

class ReportMessageView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, *args, **kwargs):
        message_id = request.data.get('message_id')
        comment = request.data.get('comment', '')
        
        try:
            message_to_report = Message.objects.get(id=message_id)
            if message_to_report.author == request.user:
                return Response({"error": "You cannot report your own messages."}, status=status.HTTP_400_BAD_REQUEST)
            
            report, created = ModerationReport.objects.get_or_create(
                reported_message=message_to_report,
                reporting_user=request.user,
                defaults={'comment': comment}
            )

            if not created:
                return Response({"error": "You have already reported this message."}, status=status.HTTP_400_BAD_REQUEST)

            return Response({"status": "Message reported successfully."}, status=status.HTTP_201_CREATED)
        except Message.DoesNotExist:
            return Response({"error": "Message not found."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            logger.error(f"Error creating report by user {request.user.username}: {e}")
            return Response({"error": "An error occurred while creating the report."}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class ModeratorQueueView(generics.ListAPIView):
    permission_classes = [IsModeratorOrAdmin]
    serializer_class = ModerationReportSerializer
    queryset = ModerationReport.objects.filter(status='pending').order_by('created_at')

class ReviewReportView(views.APIView):
    permission_classes = [IsModeratorOrAdmin]

    def post(self, request, report_id, *args, **kwargs):
        action = request.data.get('action') # "approve" or "reject"
        try:
            report = ModerationReport.objects.get(id=report_id, status='pending')
        except ModerationReport.DoesNotExist:
            return Response({"error": "Report not found or already reviewed."}, status=status.HTTP_404_NOT_FOUND)

        if action == 'approve':
            report.status = 'approved'
            report.reviewed_by = request.user
            report.reviewed_at = timezone.now()
            
            reporter = report.reporting_user
            reporter.karma = reporter.karma + 5
            reporter.save() # Save karma update
            
            message_to_delete = report.reported_message
            
            report.save()

            if message_to_delete and message_to_delete.manifest:
                FederatedAction.objects.create(
                    action_type='DELETE_CONTENT',
                    content_hash_target=message_to_delete.manifest.get('content_hash'),
                    action_details={'reason': f'Content removed by {request.user.username} based on user report: {report.comment}'}
                )
            
            if message_to_delete:
                message_to_delete.delete()
            
            return Response({"status": "Report approved and message deleted."})

        elif action == 'reject':
            report.status = 'rejected'
            report.reviewed_by = request.user
            report.reviewed_at = timezone.now()
            report.save()
            return Response({"status": "Report rejected."})

        return Response({"error": "Invalid action."}, status=status.HTTP_400_BAD_REQUEST)

class PendingProfileUpdatesQueueView(generics.ListAPIView):
    permission_classes = [IsModeratorOrAdmin]
    serializer_class = FederatedActionProfileUpdateSerializer

    def get_queryset(self):
        return FederatedAction.objects.filter(
            action_type='update_profile',
            status='pending_approval'
        ).order_by('created_at')

class ReviewProfileUpdateView(views.APIView):
    permission_classes = [IsModeratorOrAdmin]

    def post(self, request, action_id, *args, **kwargs):
        action = request.data.get('action') # "approve" or "deny"
        try:
            profile_action = FederatedAction.objects.get(id=action_id, status='pending_approval', action_type='update_profile')
        except FederatedAction.DoesNotExist:
            return Response({"error": "Profile update request not found or already reviewed."}, status=status.HTTP_404_NOT_FOUND)

        # --- MODIFICATION START ---
        user = User.objects.get(pubkey=profile_action.pubkey_target)
        details = profile_action.action_details
        temp_filename = details.get('pending_avatar_filename')

        pending_dir = os.path.join(settings.MEDIA_ROOT, 'pending_avatars')
        source_path = os.path.join(pending_dir, temp_filename) if temp_filename else None

        if action == 'approve':
            final_avatar_path = None
            if source_path and os.path.exists(source_path):
                # This is an avatar update
                final_dir = os.path.join(settings.MEDIA_ROOT, 'avatars')
                os.makedirs(final_dir, exist_ok=True)
                
                final_filename = f"{user.username}_avatar.png"
                final_path = os.path.join(final_dir, final_filename)
                
                # Move the file from pending to final destination
                os.rename(source_path, final_path)
                
                # Update the user's profile to point to the new file
                user.avatar.name = os.path.join('avatars', final_filename)
                
                # Now, create the FileAttachment and manifest for federation
                with open(final_path, 'rb') as f:
                    image_bytes = f.read()

                file_content = {
                    "type": "file", "filename": final_filename, "content_type": 'image/png',
                    "size": len(image_bytes), "data": base64.b64encode(image_bytes).decode('ascii')
                }
                _content_hash, manifest = service_manager.bitsync_service.create_encrypted_content(file_content)
                
                FileAttachment.objects.update_or_create(
                    author=user, filename=final_filename,
                    defaults={
                        'content_type': 'image/png', 'size': len(image_bytes), 'manifest': manifest
                    }
                )
                details['avatar_hash'] = manifest.get('content_hash')

            # Update nickname regardless
            user.nickname = details.get('nickname', user.nickname)
            user.save()
            
            # Update the action for federation
            profile_action.status = 'approved'
            profile_action.action_details = details # Save the new avatar_hash
            profile_action.save()
            
            return Response({"status": "Profile update approved and will be federated."}, status=status.HTTP_200_OK)
            
        elif action == 'deny':
            # If the update is denied, delete the temporary file
            if source_path and os.path.exists(source_path):
                os.remove(source_path)
                
            profile_action.status = 'denied'
            profile_action.save()
            return Response({"status": "Profile update denied."}, status=status.HTTP_200_OK)
        # --- MODIFICATION END ---

        return Response({"error": "Invalid action. Must be 'approve' or 'deny'."}, status=status.HTTP_400_BAD_REQUEST)

class RequestContentExtensionView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]
    def post(self, request, *args, **kwargs):
        content_id, content_type = request.data.get('content_id'), request.data.get('content_type')
        if not all([content_id, content_type]): return Response({"error": "content_id and content_type are required."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            model = apps.get_model('core', content_type.capitalize())
            model.objects.get(pk=content_id, author=request.user)
        except (LookupError, model.DoesNotExist): return Response({"error": "Invalid content_type or content not found/not owned by user."}, status=status.HTTP_404_NOT_FOUND)
        ext_request, created = ContentExtensionRequest.objects.get_or_create(content_id=content_id, user=request.user, defaults={'content_type': content_type})
        if not created and ext_request.status in ['pending', 'approved']: return Response({"status": "An extension request is already pending or has been approved."}, status=status.HTTP_200_OK)
        ext_request.status = 'pending'
        ext_request.save()
        return Response(ContentExtensionRequestSerializer(ext_request).data, status=status.HTTP_201_CREATED)

class ReviewContentExtensionView(views.APIView):
    permission_classes = [permissions.IsAdminUser]
    def post(self, request, pk, *args, **kwargs):
        try: ext_request = ContentExtensionRequest.objects.get(pk=pk, status='pending')
        except ContentExtensionRequest.DoesNotExist: return Response({"error": "Request not found or already reviewed."}, status=status.HTTP_404_NOT_FOUND)
        action = request.data.get('action')
        if action not in ['approve', 'deny']: return Response({"error": "Action must be 'approve' or 'deny'."}, status=status.HTTP_400_BAD_REQUEST)
        ext_request.status = f"{action}d"
        ext_request.reviewed_by = request.user
        ext_request.reviewed_at = timezone.now()
        if action == 'approve':
            try:
                model = apps.get_model('core', ext_request.content_type.capitalize())
                content_obj = model.objects.get(pk=ext_request.content_id)
                content_obj.expires_at += timedelta(days=30)
                content_obj.save()
            except (LookupError, model.DoesNotExist):
                ext_request.status = 'denied'
                logger.error(f"Could not find content {ext_request.content_id} to approve extension.")
        ext_request.save()
        return Response(ContentExtensionRequestSerializer(ext_request).data, status=status.HTTP_200_OK)

class UnpinContentView(views.APIView):
    permission_classes = [permissions.IsAdminUser]
    def post(self, request, *args, **kwargs):
        content_id, content_type = request.data.get('content_id'), request.data.get('content_type')
        if not all([content_id, content_type]): return Response({"error": "content_id and content_type are required."}, status=status.HTTP_400_BAD_REQUEST)
        try:
            model = apps.get_model('core', content_type.capitalize())
            content_obj = model.objects.get(pk=content_id)
        except (LookupError, model.DoesNotExist):
            return Response({"error": "Content not found."}, status=status.HTTP_404_NOT_FOUND)
        if content_obj.pinned_by and content_obj.pinned_by.is_staff and not request.user.is_staff: return Response({"error": "Moderators cannot unpin content pinned by an Admin."}, status=status.HTTP_403_FORBIDDEN)
        
        if content_obj.is_pinned and content_obj.manifest and content_obj.manifest.get('content_hash'):
             FederatedAction.objects.create(
                action_type='unpin_content',
                content_hash_target=content_obj.manifest.get('content_hash')
            )

        content_obj.is_pinned = False
        content_obj.pinned_by = None
        content_obj.save()
        return Response({"status": "Content unpinned successfully."}, status=status.HTTP_200_OK)

```

### File: axon_bbs/axon_project/__init__.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/axon_project/__init__.py


```

### File: axon_bbs/axon_project/asgi.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/axon_project/asgi.py
"""
ASGI config for axon_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application
from channels.routing import ProtocolTypeRouter

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')

# The WebSocket protocol type has been removed as it is no longer needed.
application = ProtocolTypeRouter({
    "http": get_asgi_application(),
})

```

### File: axon_bbs/axon_project/settings.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/axon_project/settings.py
from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(os.path.join(BASE_DIR, '.env'))

SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("No SECRET_KEY set. Please create a .env file and set a strong SECRET_KEY.")

DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    '0.0.0.0',
]

ONION_ADDRESS = os.environ.get('ONION_ADDRESS')
if ONION_ADDRESS:
    ALLOWED_HOSTS.append(ONION_ADDRESS)


# --- Application definition ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    # Local apps
    'core.apps.CoreConfig',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'axon_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'frontend', 'build'), os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'axon_project.wsgi.application'

# --- Database ---
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'data/axon_bbs.sqlite3',
    }
}

# --- Password validation ---
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# --- Internationalization ---
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I1N = True
USE_TZ = True

# --- Static and Media files ---
STATIC_URL = 'static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend', 'build', 'static'),
]

# --- Other Settings ---
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'core.User'

# --- CORS Configuration ---
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]
CORS_ALLOW_CREDENTIALS = True

# --- CSRF Trusted Origins ---
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://0.0.0.0:3000',
    'http://*.onion',
]

# --- REST Framework Configuration ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

# --- Simple JWT Configuration ---
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}


# --- Axon BBS Service Configuration ---
TOR_SOCKS_HOST = "127.0.0.1"
TOR_SOCKS_PORT = 9050
BITSYNC_MAX_CONCURRENT_FILES = 3
DEFAULT_CONTENT_LIFESPAN_DAYS = 30
# --- NEW SETTING ---
# The timezone used to display dates and times on the frontend.
# This should be a valid IANA timezone name (e.g., 'America/New_York', 'Europe/London').
DISPLAY_TIMEZONE = os.environ.get('DISPLAY_TIMEZONE', 'UTC')


# --- Logging Configuration ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs/bbs.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'core.services': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

```

### File: axon_bbs/axon_project/urls.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/axon_project/urls.py
"""
URL configuration for axon_project project.
"""
import os
from django.contrib import admin
from django.urls import path, include, re_path
from django.conf import settings
from django.conf.urls.static import static
from django.views.generic import TemplateView
from django.views.static import serve

class NoCacheTemplateView(TemplateView):
    def get(self, request, *args, **kwargs):
        response = super().get(request, *args, **kwargs)
        response['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
        response['Pragma'] = 'no-cache'
        response['Expires'] = '0'
        return response

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('api.urls')),
    re_path(r'^(?P<path>manifest\.json)$', serve, {'document_root': os.path.join(settings.BASE_DIR, 'frontend/build')}),
    re_path(r'^(?P<path>favicon\.ico)$', serve, {'document_root': os.path.join(settings.BASE_DIR, 'frontend/build')}),
    re_path(r'^(?P<path>axon\.png)$', serve, {'document_root': os.path.join(settings.BASE_DIR, 'frontend/build')}),
]

# --- START FIX ---
# This block is now placed BEFORE the final catch-all pattern. This ensures
# that requests for media files are correctly served by Django's development server.
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
# --- END FIX ---

# This catch-all must be the LAST pattern.
urlpatterns += [
    re_path(r'^.*', NoCacheTemplateView.as_view(template_name='index.html')),
]

```

### File: axon_bbs/axon_project/wsgi.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/axon_project/wsgi.py
"""
WSGI config for axon_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')

application = get_wsgi_application()


```

### File: axon_bbs/core/__init__.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/core/__init__.py


```

### File: axon_bbs/core/admin.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/admin.py
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.contrib.auth.models import Group
from django import forms
from .models import User, MessageBoard, Message, PrivateMessage, TrustedInstance, Alias, BannedPubkey, ContentExtensionRequest, ValidFileType, FileAttachment, Applet, AppletData, AppletCategory, HighScore, AppletSharedState, ModerationReport
from django.http import HttpResponseRedirect
from django.urls import path, reverse
import base64
import json
import requests
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes, serialization
from django.conf import settings
from django.utils.html import format_html
from .services.avatar_generator import generate_cow_avatar
from .services.encryption_utils import generate_checksum
from .services.service_manager import service_manager

def rekey_content_action(modeladmin, request, queryset):
    """Shared admin action to re-key manifests for selected content."""
    if not service_manager.bitsync_service:
        modeladmin.message_user(request, "BitSyncService is not available.", level='ERROR')
        return

    updated_count = 0
    for item in queryset:
        name = getattr(item, 'subject', getattr(item, 'filename', str(item.id)))
        try:
            if isinstance(item, Applet):
                metadata_manifest_field = 'code_manifest'
            elif isinstance(item, AppletData):
                metadata_manifest_field = 'data_manifest'
            else:
                metadata_manifest_field = 'metadata_manifest'
            metadata_manifest = getattr(item, metadata_manifest_field)

            if not metadata_manifest:
                modeladmin.message_user(request, f"Content '{name}' has no manifest to re-key.", level='WARNING')
                continue
            
            new_metadata_manifest = service_manager.bitsync_service.rekey_manifest_for_new_peers(metadata_manifest)
            
            setattr(item, metadata_manifest_field, new_metadata_manifest)
            item.save()
            updated_count += 1
        
        except Exception as e:
            modeladmin.message_user(request, f"Failed to re-key content '{name}': {e}", level='ERROR')
    
    modeladmin.message_user(request, f"Successfully updated manifests for {updated_count} item(s).")
rekey_content_action.short_description = "Re-key content for all trusted peers"

@admin.register(User)
class UserAdmin(BaseUserAdmin):
    list_display = ('username', 'email', 'access_level', 'is_moderator', 'karma', 'is_staff', 'is_banned', 'is_agent', 'pubkey_checksum')
    list_filter = ('is_staff', 'is_superuser', 'is_active', 'is_banned', 'is_agent', 'is_moderator')
    readonly_fields = BaseUserAdmin.readonly_fields + ('pubkey_checksum', 'last_moderated_at', 'avatar_preview', 'avatar_path')
    
    def get_fieldsets(self, request, obj=None):
        if not obj:
            return self.add_fieldsets

        fieldsets = [
            (None, {"fields": ("username", "password")}),
            ("Personal info", {"fields": ("nickname", "first_name", "last_name", "email")}),
            ("Permissions & Roles", {"fields": ("is_active", "is_staff", "is_superuser", "is_moderator", "is_agent", "is_banned")}),
            ("BBS Stats", {"fields": ("access_level", "karma", "last_moderated_at")}),
            ("Important dates", {"fields": ("last_login", "date_joined")}),
        ]
        if obj.pubkey:
            fieldsets.insert(2, ("Avatar & Identity", {"fields": ('avatar_preview', 'avatar_path', 'pubkey')}))
        
        return tuple(fieldsets)

    @admin.display(description='Current Avatar')
    def avatar_preview(self, obj):
        if obj.avatar and obj.avatar.url:
            return format_html('<img src="{}" width="128" height="128" style="border-radius: 50%;" />', obj.avatar.url)
        return "No avatar set."
    @admin.display(description='Avatar File Path')
    def avatar_path(self, obj):
        return obj.avatar.name if obj.avatar else "N/A"

    @admin.display(description='Pubkey Checksum')
    def pubkey_checksum(self, obj):
        if not obj.pubkey:
            return "No pubkey"
        return generate_checksum(obj.pubkey)

    @admin.action(description='Update status for selected agent(s)')
    def update_agent_status(self, request, queryset):
        for user in queryset:
            is_running = user.username in service_manager.game_agents
            
            if user.is_agent and not is_running:
                if service_manager.start_agent(user):
                    self.message_user(request, f"Successfully started agent service for '{user.username}'.", level='SUCCESS')
                else:
                    self.message_user(request, f"Failed to start agent service for '{user.username}'. See logs.", level='ERROR')

            elif not user.is_agent and is_running:
                if service_manager.stop_agent(user.username):
                    self.message_user(request, f"Successfully stopped agent service for '{user.username}'.", level='SUCCESS')
                else:
                    self.message_user(request, f"Failed to stop agent service for '{user.username}'. See logs.", level='ERROR')

            elif user.is_agent and is_running:
                if service_manager.reload_agent(user.username):
                    self.message_user(request, f"Successfully reloaded agent service for '{user.username}'.", level='SUCCESS')
                else:
                    self.message_user(request, f"Failed to reload agent service for '{user.username}'. See logs.", level='ERROR')
    
    @admin.action(description="Reset selected users' avatar to default")
    def reset_avatar(self, request, queryset):
        updated_count = 0
        for user in queryset:
            if not user.pubkey:
                self.message_user(request, f"Cannot reset avatar for '{user.username}': No public key found.", level='WARNING')
                continue
            
            try:
                # Delete the old avatar file from storage
                if user.avatar:
                    user.avatar.delete(save=False)

                # Generate a new cow avatar
                avatar_content_file, avatar_filename = generate_cow_avatar(user.pubkey)
                
                # Save the new avatar
                user.avatar.save(avatar_filename, avatar_content_file, save=True)
                updated_count += 1
            except Exception as e:
                self.message_user(request, f"Failed to reset avatar for '{user.username}': {e}", level='ERROR')
        
        if updated_count > 0:
            self.message_user(request, f"Successfully reset avatars for {updated_count} user(s).", level='SUCCESS')

    actions = ['update_agent_status', 'reset_avatar']

@admin.register(ModerationReport)
class ModerationReportAdmin(admin.ModelAdmin):
    list_display = ('reported_message', 'reporting_user', 'status', 'created_at', 'reviewed_by', 'reviewed_at')
    list_filter = ('status',)
    readonly_fields = ('reported_message', 'reporting_user', 'comment', 'created_at', 'reviewed_by', 'reviewed_at')

@admin.register(MessageBoard)
class MessageBoardAdmin(admin.ModelAdmin):
    list_display = ('name', 'description', 'required_access_level')
    list_filter = ('required_access_level',)

@admin.register(Message)
class MessageAdmin(admin.ModelAdmin):
    list_display = ('subject', 'author', 'board', 'agent_status', 'created_at', 'expires_at', 'is_pinned')
    list_filter = ('board', 'author', 'is_pinned', 'agent_status')
    date_hierarchy = 'created_at'
    actions = [rekey_content_action]

@admin.register(PrivateMessage)
class PrivateMessageAdmin(admin.ModelAdmin):
    list_display = ('id', 'author', 'recipient', 'is_read', 'created_at')
    list_filter = ('author', 'recipient', 'is_read')
    date_hierarchy = 'created_at'
    actions = [rekey_content_action]

@admin.register(FileAttachment)
class FileAttachmentAdmin(admin.ModelAdmin):
    list_display = ('filename', 'author', 'content_type', 'size', 'created_at')
    list_filter = ('author', 'content_type')
    date_hierarchy = 'created_at'
    readonly_fields = ('id', 'created_at', 'expires_at', 'pinned_by')
    actions = [rekey_content_action]

@admin.register(BannedPubkey)
class BannedPubkeyAdmin(admin.ModelAdmin):
    list_display = ('pubkey', 'is_temporary', 'expires_at')
    list_filter = ('is_temporary',)

@admin.register(ContentExtensionRequest)
class ContentExtensionRequestAdmin(admin.ModelAdmin):
    list_display = ('content_id', 'content_type', 'user', 'request_date', 'status', 'reviewed_by')
    list_filter = ('status', 'content_type')

@admin.register(ValidFileType)
class ValidFileTypeAdmin(admin.ModelAdmin):
    list_display = ('mime_type', 'description', 'is_enabled')
    list_filter = ('is_enabled',)
    search_fields = ('mime_type', 'description')

@admin.register(TrustedInstance)
class TrustedInstanceAdmin(admin.ModelAdmin):
    list_display = ('web_ui_onion_url', 'pubkey_checksum', 'is_trusted_peer', 'last_synced_at')
    list_display_links = ('web_ui_onion_url','pubkey_checksum',)
    list_filter = ('is_trusted_peer',)
    readonly_fields = ('pubkey_checksum', 'added_at', 'last_synced_at')
    fieldsets = (
        (None, {
            'fields': ('web_ui_onion_url', 'pubkey', 'is_trusted_peer')
        }),
        ('Local Instance Details', {
            'classes': ('collapse',),
            'fields': ('encrypted_private_key',),
        }),
        ('Timestamps', {
            'fields': ('added_at', 'last_synced_at')
        }),
    )
    actions = ['generate_keys', 'fetch_peer_key', 'reset_sync_timestamp']

    @admin.display(description='Pubkey Checksum')
    def pubkey_checksum(self, obj):
        if not obj.pubkey:
            return "No pubkey"
        return generate_checksum(obj.pubkey)

    @admin.action(description='Generate and encrypt keys for LOCAL instance')
    def generate_keys(self, request, queryset):
        key = base64.urlsafe_b64encode(settings.SECRET_KEY.encode()[:32])
        f = Fernet(key)
        
        for instance in queryset:
            private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
            public_key_pem = private_key.public_key().public_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PublicFormat.SubjectPublicKeyInfo
            ).decode('utf-8')
            private_pem = private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            ).decode('utf-8')
            
            encrypted_private = f.encrypt(private_pem.encode()).decode()
            instance.pubkey = public_key_pem
            instance.encrypted_private_key = encrypted_private
            instance.is_trusted_peer = False
            instance.save()
        self.message_user(request, "Keys generated and encrypted for selected instances.")

    @admin.action(description='Fetch public key from peer')
    def fetch_peer_key(self, request, queryset):
        updated_count = 0
        for instance in queryset:
            if not instance.web_ui_onion_url:
                self.message_user(request, f"Instance {instance.id} has no onion URL set.", level='ERROR')
                continue
            
            peer_url = instance.web_ui_onion_url.strip('/')
            target_url = f"{peer_url}/api/identity/public_key/"
            proxies = {'http': 'socks5h://127.0.0.1:9050', 'https': 'socks5h://127.0.0.1:9050'}
        
            try:
                self.message_user(request, f"Fetching key from {peer_url}...", level='INFO')
                response = requests.get(target_url, proxies=proxies, timeout=120)

                if response.status_code == 200:
                    new_key = response.json().get('public_key')
                    if new_key:
                        instance.pubkey = new_key
                        instance.save()
                        updated_count += 1
                        self.message_user(request, f"Successfully updated key for {peer_url}.", level='SUCCESS')
                    else:
                        self.message_user(request, f"Peer {peer_url} did not provide a public key.", level='ERROR')
                else:
                    self.message_user(request, f"Error fetching key from {peer_url}. Status: {response.status_code}", level='ERROR')

            except requests.exceptions.RequestException as e:
                self.message_user(request, f"Network error contacting peer {peer_url}: {e}", level='ERROR')

        if updated_count > 0:
            self.message_user(request, f"Finished. Successfully updated {updated_count} peer(s).", level='SUCCESS')
    
    @admin.action(description='Reset last synced time to force full sync')
    def reset_sync_timestamp(self, request, queryset):
        rows_updated = queryset.update(last_synced_at=None)
        self.message_user(request, f"Successfully reset sync timestamp for {rows_updated} peer(s).", level='SUCCESS')

@admin.register(Alias)
class AliasAdmin(admin.ModelAdmin):
    list_display = ('nickname', 'pubkey_checksum', 'verified', 'added_at')
    list_filter = ('verified',)
    search_fields = ('nickname', 'pubkey')
    readonly_fields = ('added_at', 'pubkey_checksum',)
    list_display_links = ('nickname', 'pubkey_checksum',)

    @admin.display(description='Pubkey Checksum')
    def pubkey_checksum(self, obj):
        if not obj.pubkey:
            return "No pubkey"
        return generate_checksum(obj.pubkey)

class AppletAdminForm(forms.ModelForm):
    author = forms.ModelChoiceField(
        queryset=User.objects.filter(pubkey__isnull=False),
        required=False,
        help_text="Optional: Select a local user to automatically use their public key as the author."
    )
    applet_code_file = forms.FileField(required=False, help_text="Upload a new file to generate/regenerate the manifest.")

    class Meta:
        model = Applet
        fields = '__all__'

@admin.register(AppletCategory)
class AppletCategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'description')
    search_fields = ('name',)

@admin.register(Applet)
class AppletAdmin(admin.ModelAdmin):
    form = AppletAdminForm
    
    @admin.display(description='Code Checksum')
    def code_checksum(self, obj):
        if obj.code_manifest and 'content_hash' in obj.code_manifest:
            return obj.code_manifest['content_hash'][:16] + '...'
        return "Not Generated"

    list_display = ('name', 'category', 'event_board', 'is_local', 'created_at', 'code_checksum')
    list_filter = ('category', 'is_local')
    search_fields = ('name', 'description')
    readonly_fields = ('id', 'created_at', 'code_manifest', 'code_checksum')
    fieldsets = (
        (None, {
            'fields': ('name', 'description', 'category', 'event_board', 'author', 'author_pubkey', ('is_local', 'is_debug_mode'))
        }),
        ('Code', {
            'fields': ('applet_code_file', 'code_manifest', 'code_checksum')
        }),
    )
    actions = [rekey_content_action]

    def save_model(self, request, obj, form, change):
        uploaded_file = form.cleaned_data.get('applet_code_file', None)
        selected_author = form.cleaned_data.get('author', None)
        
        if selected_author:
            obj.author_pubkey = selected_author.pubkey

        if not change and not uploaded_file:
            self.message_user(request, "You must upload a code file when creating a new applet.", level='ERROR')
            return

        if uploaded_file:
            js_code = uploaded_file.read().decode('utf-8')
            content_to_encrypt = {"type": "applet_code", "code": js_code}
            
            recipients = None
            if obj.is_local:
                try:
                    local_instance = TrustedInstance.objects.get(is_trusted_peer=False)
                    recipients = [local_instance.pubkey]
                except TrustedInstance.DoesNotExist:
                    self.message_user(request, "Cannot create local applet: No local instance configured.", level='ERROR')
                    return

            if not service_manager.bitsync_service:
                self.message_user(request, "BitSync service is not available. Cannot create manifest.", level='ERROR')
                return

            _content_hash, metadata_manifest = service_manager.bitsync_service.create_encrypted_content(
                content_to_encrypt, 
                recipients_pubkeys=recipients
            )
            obj.code_manifest = metadata_manifest
        
        super().save_model(request, obj, form, change)

@admin.register(AppletData)
class AppletDataAdmin(admin.ModelAdmin):
    list_display = ('applet', 'owner', 'last_updated', 'data_checksum')
    list_filter = ('applet', 'owner')
    date_hierarchy = 'last_updated'
    readonly_fields = ('id', 'last_updated', 'data_checksum')
    actions = [rekey_content_action]

    @admin.display(description='Data Checksum')
    def data_checksum(self, obj):
        if obj.data_manifest and 'content_hash' in obj.data_manifest:
            return obj.data_manifest['content_hash'][:16] + '...'
        return "N/A"

@admin.register(AppletSharedState)
class AppletSharedStateAdmin(admin.ModelAdmin):
    list_display = ('applet', 'version', 'last_updated')
    list_filter = ('applet',)
    readonly_fields = ('applet', 'version', 'state_data', 'last_updated')

    def has_add_permission(self, request):
        return False

@admin.register(HighScore)
class HighScoreAdmin(admin.ModelAdmin):
    list_display = ('applet', 'owner_nickname', 'score', 'last_updated')
    list_filter = ('applet',)
    search_fields = ('owner_nickname', 'owner_pubkey')
    readonly_fields = ('applet', 'owner_pubkey', 'owner_nickname', 'score', 'last_updated')

    def has_add_permission(self, request):
        return False

    def has_change_permission(self, request, obj=None):
        return False

admin.site.unregister(Group)

```

### File: axon_bbs/core/apps.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/apps.py
from django.apps import AppConfig
import logging
import os
import sys 
from django.db.models.signals import post_migrate
from django.dispatch import receiver

logger = logging.getLogger(__name__)

class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'

    def ready(self):
        """
        This method is called by Django when the application is ready.
        It initializes all global services via the ServiceManager.
        """
        is_runserver = 'runserver' in sys.argv
        is_reloader = os.environ.get('RUN_MAIN') == 'true'

        if is_runserver and is_reloader:
            # --- START FIX ---
            # Clear all sessions on server startup to force re-login.
            from django.contrib.sessions.models import Session
            try:
                Session.objects.all().delete()
                logger.info("All user sessions cleared on server startup.")
            except Exception as e:
                logger.error(f"Failed to clear sessions on startup: {e}")
            # --- END FIX ---
            
            from .services.service_manager import service_manager
            
            if not service_manager.bitsync_service:
                logger.info("Starting background services for runserver...")
                service_manager.initialize_services()

@receiver(post_migrate)
def clear_sessions_after_migrate(sender, **kwargs):
    """Clears all active sessions after migrations (post-startup)."""
    from django.contrib.sessions.models import Session
    try:
        Session.objects.all().delete()
        logger.info("All user sessions cleared after startup/migrations.")
    except Exception as e:
        logger.error(f"Failed to clear sessions: {e}")

```

### File: axon_bbs/core/models.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/models.py
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.conf import settings
import uuid
from django.utils import timezone
from datetime import timedelta
from django.core.exceptions import ValidationError
import json
from cryptography.hazmat.primitives import serialization

def get_default_expires_at():
    """Returns a default expiration time from now based on settings."""
    days = getattr(settings, 'DEFAULT_CONTENT_LIFESPAN_DAYS', 30)
    return timezone.now() + timedelta(days=days)

class User(AbstractUser):
    access_level = models.PositiveIntegerField(default=10, help_text="User's security access level.")
    is_banned = models.BooleanField(default=False, help_text="Designates if the user is banned from the local instance.")
    pubkey = models.TextField(blank=True, null=True, help_text="User's public key (PEM).")
    nickname = models.CharField(max_length=50, unique=True, blank=True, null=True, help_text="User's chosen nickname.")
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)
    is_agent = models.BooleanField(default=False, help_text="Designates this user as an automated agent.")
    is_moderator = models.BooleanField(default=False, help_text="Grants moderator permissions.")
    karma = models.IntegerField(default=10, help_text="User's reputation score.")
    last_moderated_at = models.DateTimeField(null=True, blank=True, help_text="Timestamp of the last moderation action on this user.")
    timezone = models.CharField(max_length=50, blank=True, null=True, help_text="User's preferred display timezone (IANA name).")
    
    groups = models.ManyToManyField(
        'auth.Group',
        verbose_name='groups',
        blank=True,
        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
        related_name="core_user_set",
        related_query_name="user",
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        verbose_name='user permissions',
        blank=True,
        help_text='Specific permissions for this user.',
        related_name="core_user_set",
        related_query_name="user",
    )
    def __str__(self):
        return self.username
    
    def save(self, *args, **kwargs):
        if self.nickname:
            self.nickname = self.nickname.lower()
        if self.pubkey:
            try:
                pubkey_obj = serialization.load_pem_public_key(self.pubkey.encode())
                self.pubkey = pubkey_obj.public_bytes(
                    encoding=serialization.Encoding.PEM,
                    format=serialization.PublicFormat.SubjectPublicKeyInfo
                ).decode('utf-8').strip()
            except Exception as e:
                print(f"Warning: Could not normalize public key for user {self.username}: {e}")
    
        super(User, self).save(*args, **kwargs)


class IgnoredPubkey(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='ignored_pubkeys')
    pubkey = models.TextField()
    class Meta:
        unique_together = ('user', 'pubkey')
    def __str__(self):
        return f"{self.user.username} ignores pubkey starting with {self.pubkey[:12]}..."

class BannedPubkey(models.Model):
    pubkey = models.TextField(unique=True)
    is_temporary = models.BooleanField(default=False)
    expires_at = models.DateTimeField(null=True, blank=True, help_text="If the ban is temporary, this is when it expires.")
    federated_action_id = models.UUIDField(null=True, blank=True, unique=True, help_text="The ID of the federated action that created this ban.")

    def __str__(self):
        status = "Temporarily Banned" if self.is_temporary and self.expires_at and self.expires_at > timezone.now() else "Banned"
        return f"[{status}] pubkey starting with {self.pubkey[:12]}..."
    def save(self, *args, **kwargs):
        if self.is_temporary and not self.expires_at:
            self.expires_at = timezone.now() + timedelta(hours=72)
        if not self.is_temporary:
            self.expires_at = None
        super().save(*args, **kwargs)

class Alias(models.Model):
    pubkey = models.TextField(unique=True)
    nickname = models.CharField(max_length=50, unique=True)
    verified = models.BooleanField(default=False)
    added_at = models.DateTimeField(auto_now_add=True)
    class Meta:
        verbose_name_plural = "aliases"
    def __str__(self):
        return f"{self.nickname} ({self.pubkey[:12]}...)"
    
    def save(self, *args, **kwargs):
        if self.nickname:
            self.nickname = self.nickname.lower()
        if self.pubkey:
            try:
                pubkey_obj = serialization.load_pem_public_key(self.pubkey.encode())
                self.pubkey = pubkey_obj.public_bytes(
                    encoding=serialization.Encoding.PEM,
                    format=serialization.PublicFormat.SubjectPublicKeyInfo
                ).decode('utf-8').strip()
            except Exception as e:
                raise ValidationError(f"Invalid public key format for Alias: {e}")
        super(Alias, self).save(*args, **kwargs)

class ValidFileType(models.Model):
    mime_type = models.CharField(max_length=100, unique=True, help_text="e.g., 'image/jpeg'")
    description = models.CharField(max_length=255, blank=True)
    is_enabled = models.BooleanField(default=True, help_text="Disable to temporarily disallow this file type.")

    def __str__(self):
        return f"{self.mime_type} ({self.description})"

class Content(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='authored_%(class)ss', null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    expires_at = models.DateTimeField(default=get_default_expires_at, null=True)
    is_pinned = models.BooleanField(default=False)
    pinned_by = models.ForeignKey(settings.AUTH_USER_MODEL, null=True, blank=True, on_delete=models.SET_NULL, related_name='pinned_%(class)ss')
    class Meta:
        abstract = True

class MessageBoard(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    required_access_level = models.PositiveIntegerField(default=10)
    def __str__(self):
        return self.name

class FileAttachment(Content):
    filename = models.CharField(max_length=255)
    content_type = models.CharField(max_length=100)
    size = models.PositiveIntegerField()
    metadata_manifest = models.JSONField(help_text="BitSync manifest for P2P file distribution.")

    def __str__(self):
        return f"{self.filename} ({self.id})"

class Message(Content):
    board = models.ForeignKey(MessageBoard, on_delete=models.CASCADE, related_name='messages')
    subject = models.CharField(max_length=255)
    body = models.TextField()
    pubkey = models.TextField(blank=True, null=True)
    metadata_manifest = models.JSONField(null=True, blank=True, help_text="BitSync manifest for P2P content distribution.")
    attachments = models.ManyToManyField(FileAttachment, blank=True, related_name='messages')
    agent_status = models.CharField(max_length=20, default='pending', choices=[('pending', 'Pending'), ('processed', 'Processed'), ('failed', 'Failed')])
    last_moderated_at = models.DateTimeField(null=True, blank=True, help_text="Timestamp of the last moderation action on this message.")

    def __str__(self):
        return f"'{self.subject}' by {self.author.username if self.author else 'system'}"

class PrivateMessage(Content):
    recipient = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='received_mail', null=True, blank=True)
    sender_pubkey = models.TextField(blank=True, null=True)
    metadata_manifest = models.JSONField(null=True, blank=True, help_text="BitSync manifest for BBS-level metadata.")
    e2e_encrypted_content = models.TextField(blank=True, null=True, help_text="The end-to-end encrypted message body and subject.")
    is_read = models.BooleanField(default=False)

    def __str__(self):
        recipient_display = "Unknown"
        if self.recipient:
            recipient_display = self.recipient.username
        else:
            recipient_display = f"ID: {str(self.id)[:8]}..."
        return f"Private Message to {recipient_display} from {self.author.username if self.author else 'system'}"

class TrustedInstance(models.Model):
    web_ui_onion_url = models.URLField(max_length=255, blank=True, null=True)
    pubkey = models.TextField(blank=True, null=True)
    encrypted_private_key = models.TextField(blank=True, null=True)
    added_at = models.DateTimeField(auto_now_add=True)
    last_synced_at = models.DateTimeField(blank=True, null=True)
    is_trusted_peer = models.BooleanField(default=False, help_text="Check if this is a trusted peer (uncheck for local).")
    
    def save(self, *args, **kwargs):
        if self.pubkey:
            try:
                pubkey_obj = serialization.load_pem_public_key(self.pubkey.encode())
                self.pubkey = pubkey_obj.public_bytes(
                    encoding=serialization.Encoding.PEM,
                    format=serialization.PublicFormat.SubjectPublicKeyInfo
                ).decode('utf-8').strip()
            except Exception as e:
                raise ValidationError(f"Invalid public key format: {e}")
        
        super().save(*args, **kwargs)
    def __str__(self):
        return self.web_ui_onion_url or "Local Instance"

class ContentExtensionRequest(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('denied', 'Denied'),
    ]
    content_id = models.UUIDField()
    content_type = models.CharField(max_length=50)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    request_date = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')
    reviewed_by = models.ForeignKey(settings.AUTH_USER_MODEL, null=True, blank=True, on_delete=models.SET_NULL, related_name='reviewed_extensions')
    reviewed_at = models.DateTimeField(null=True, blank=True)
    class Meta:
        unique_together = ('content_id', 'user')
    def __str__(self):
        return f"Extension Request for {self.content_type} {self.id} by {self.user.username}"

class FederatedAction(models.Model):
    ACTION_CHOICES = [
        ('ban_pubkey', 'Ban Pubkey'),
        ('unpin_content', 'Unpin Content'),
        ('update_profile', 'Update Profile'),
        ('DELETE_CONTENT', 'Delete Content'),
    ]
    STATUS_CHOICES = [
        ('approved', 'Approved'),
        ('pending_approval', 'Pending Approval'),
        ('denied', 'Denied'),
    ]
    
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    action_type = models.CharField(max_length=50, choices=ACTION_CHOICES)
    pubkey_target = models.TextField(blank=True, null=True, help_text="The pubkey targeted by the action (e.g., for a ban).")
    content_hash_target = models.CharField(max_length=64, blank=True, null=True, help_text="The content_hash of the item being acted upon.")
    action_details = models.JSONField(default=dict, help_text="Additional details, e.g., {'is_temporary': true, 'duration_hours': 72}")
    created_at = models.DateTimeField(auto_now_add=True, db_index=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='approved')
    is_logged = models.BooleanField(default=False, help_text="True if this action has been logged by the moderation agent.")

    def __str__(self):
        target = self.pubkey_target[:12] if self.pubkey_target else self.content_hash_target[:12]
        return f"'{self.action_type}' on target '{target}...'"

class ModerationReport(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]
    reported_message = models.ForeignKey(Message, on_delete=models.SET_NULL, null=True, related_name='reports')
    reporting_user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='reports_filed')
    comment = models.TextField(blank=True, help_text="Reason for the report.")
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')
    created_at = models.DateTimeField(auto_now_add=True)
    reviewed_by = models.ForeignKey(settings.AUTH_USER_MODEL, null=True, blank=True, on_delete=models.SET_NULL, related_name='reports_reviewed')
    reviewed_at = models.DateTimeField(null=True, blank=True)
    is_logged = models.BooleanField(default=False, help_text="True if this report's outcome has been logged.")

    def __str__(self):
        return f"Report by {self.reporting_user.username} on message {self.reported_message.id if self.reported_message else '[deleted]'}"

class AppletCategory(models.Model):
    name = models.CharField(max_length=50, unique=True)
    description = models.TextField(blank=True)

    class Meta:
        verbose_name_plural = "Applet Categories"

    def __str__(self):
        return self.name

class Applet(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=100, unique=True, help_text="The unique name of the applet.")
    description = models.TextField(blank=True)
    author_pubkey = models.TextField(blank=True, help_text="Public key of the applet's author.")
    code_manifest = models.JSONField(help_text="BitSync manifest for the applet's code bundle.")
    is_local = models.BooleanField(default=False, help_text="If checked, this applet's code will not be swarmed to peers.")
    created_at = models.DateTimeField(auto_now_add=True)
    category = models.ForeignKey(AppletCategory, on_delete=models.SET_NULL, null=True, blank=True)
    is_debug_mode = models.BooleanField(default=False, help_text="Enable to show the debug console when this applet is run.")
    event_board = models.ForeignKey(MessageBoard, on_delete=models.SET_NULL, null=True, blank=True, help_text="The message board this applet will use for its public events.")

    def __str__(self):
        return self.name

class AppletData(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    applet = models.ForeignKey(Applet, on_delete=models.CASCADE, related_name='data_instances')
    owner = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='applet_data')
    data_manifest = models.JSONField(help_text="BitSync manifest for the user's applet data.")
    last_updated = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ('applet', 'owner')

    def __str__(self):
        return f"Data for '{self.applet.name}' owned by {self.owner.username}"

class AppletSharedState(models.Model):
    applet = models.OneToOneField(Applet, on_delete=models.CASCADE, primary_key=True, related_name='shared_state')
    state_data = models.JSONField(default=dict)
    version = models.PositiveIntegerField(default=0)
    last_updated = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Shared State for '{self.applet.name}' (v{self.version})"


class HighScore(models.Model):
    applet = models.ForeignKey(Applet, on_delete=models.CASCADE, related_name='high_scores')
    owner_pubkey = models.TextField(db_index=True)
    owner_nickname = models.CharField(max_length=50)
    score = models.IntegerField(db_index=True)
    wins = models.IntegerField(null=True, blank=True)
    losses = models.IntegerField(null=True, blank=True)
    kills = models.IntegerField(null=True, blank=True)
    deaths = models.IntegerField(null=True, blank=True)
    assists = models.IntegerField(null=True, blank=True)
    last_updated = models.DateTimeField()

    class Meta:
        unique_together = ('applet', 'owner_pubkey')
        ordering = ['-score']

    def __str__(self):
        return f"{self.owner_nickname}: {self.score} on {self.applet.name}"

```

### File: axon_bbs/core/management/commands/backfill_avatars.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

# Full path: axon_bbs/core/management/commands/backfill_avatars.py
from django.core.management.base import BaseCommand
from django.db.models import Q
from core.models import User
from core.services.avatar_generator import generate_cow_avatar

class Command(BaseCommand):
    help = 'Scans for active users who have a public key but no avatar and generates a unique avatar for them.'

    # --- START FIX ---
    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force regeneration of all existing cow avatars, overwriting the old ones.',
        )
    # --- END FIX ---

    def handle(self, *args, **options):
        force_regeneration = options['force']
        
        if force_regeneration:
            self.stdout.write(self.style.WARNING("--- Starting Avatar Backfill Process in --force mode ---"))
            self.stdout.write("This will overwrite existing cow avatars.")
            # Find all users with an avatar that looks like a generated cow avatar
            users_to_update = User.objects.filter(
                avatar__startswith='avatars/cow_',
                pubkey__isnull=False,
            ).exclude(pubkey__exact='')
        else:
            self.stdout.write(self.style.SUCCESS("--- Starting Avatar Backfill Process ---"))
            # Find all active, non-agent users who have a pubkey and an empty avatar field
            users_to_update = User.objects.filter(
                Q(avatar__isnull=True) | Q(avatar=''),
                pubkey__isnull=False,
                is_active=True,
                is_agent=False
            ).exclude(pubkey__exact='')

        count = users_to_update.count()
        if count == 0:
            self.stdout.write(self.style.SUCCESS("No users matching the criteria were found. No action needed."))
            return

        self.stdout.write(f"Found {count} user(s) to process.")
        
        processed_count = 0
        for user in users_to_update:
            self.stdout.write(f" - Processing user: {user.username}...")
            try:
                # If forcing, delete the old avatar file first
                if force_regeneration and user.avatar:
                    user.avatar.delete(save=False) # Delete file from storage

                # Generate a unique, deterministic avatar from their public key
                avatar_content_file, avatar_filename = generate_cow_avatar(user.pubkey)
                
                # Save the new avatar to the user's profile
                user.avatar.save(avatar_filename, avatar_content_file, save=True)
                
                self.stdout.write(self.style.SUCCESS(f"   Successfully generated and saved new avatar for {user.username}."))
                processed_count += 1
            except Exception as e:
                self.stderr.write(self.style.ERROR(f"   Failed to process avatar for {user.username}: {e}"))

        self.stdout.write(self.style.SUCCESS(f"\n--- Avatar Process Complete ---"))
        self.stdout.write(f"Successfully processed {processed_count} of {count} users.")

```

### File: axon_bbs/core/management/commands/check_local_content.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/management/commands/check_local_content.py
from django.core.management.base import BaseCommand
from core.models import FileAttachment, Message
from core.services.service_manager import service_manager
from core.services.sync_service import SyncService

class Command(BaseCommand):
    help = 'Scans local content for missing data chunks and optionally triggers a re-download.'

    def add_arguments(self, parser):
        parser.add_argument(
            '--repair',
            action='store_true',
            help='Attempt to download missing chunks for all incomplete content.',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS("--- Running Axon BBS Local Content Integrity Check ---"))
        
        if not service_manager.bitsync_service:
            self.stderr.write(self.style.ERROR("BitSyncService is not available."))
            return

        # --- Gather Incomplete Items ---
        all_files = FileAttachment.objects.all()
        incomplete_files = []
        for attachment in all_files:
            if not service_manager.bitsync_service.are_all_chunks_local(attachment.manifest):
                incomplete_files.append(attachment)
        
        all_messages = Message.objects.all()
        incomplete_messages = []
        for message in all_messages:
            if message.manifest and not service_manager.bitsync_service.are_all_chunks_local(message.manifest):
                incomplete_messages.append(message)

        # --- Print Report ---
        self.stdout.write("\n[1] Checking File Attachments...")
        self.stdout.write(self.style.SUCCESS(f"  - Found {all_files.count() - len(incomplete_files)} COMPLETE file(s)."))
        if incomplete_files:
            self.stdout.write(self.style.WARNING(f"  - Found {len(incomplete_files)} INCOMPLETE file(s) (missing data chunks):"))
            for attachment in incomplete_files:
                self.stdout.write(f"    - {attachment.filename} (ID: {attachment.id})")

        self.stdout.write("\n[2] Checking Messages...")
        self.stdout.write(self.style.SUCCESS(f"  - Found {all_messages.count() - len(incomplete_messages)} COMPLETE message(s)."))
        if incomplete_messages:
            self.stdout.write(self.style.WARNING(f"  - Found {len(incomplete_messages)} INCOMPLETE message(s) (missing data chunks):"))
            for message in incomplete_messages:
                self.stdout.write(f"    - '{message.subject}' (ID: {message.id})")

        # --- Perform Repair if Flagged ---
        if options['repair']:
            self.stdout.write(self.style.SUCCESS("\n--- Starting Repair Process ---"))
            
            # We need an instance of the SyncService to use its download methods
            sync_service = SyncService()
            sync_service._load_identity() # Load keys needed for authentication

            if not sync_service.private_key:
                self.stderr.write(self.style.ERROR("Could not load local identity. Aborting repair."))
                return

            all_incomplete_items = incomplete_files + incomplete_messages
            if not all_incomplete_items:
                self.stdout.write("No incomplete items to repair.")
            else:
                for item in all_incomplete_items:
                    item_name = getattr(item, 'filename', getattr(item, 'subject', item.id))
                    self.stdout.write(f"\nAttempting to repair '{item_name}'...")
                    sync_service._download_content(item.manifest)

            self.stdout.write(self.style.SUCCESS("\n--- Repair Process Complete ---"))
        else:
            self.stdout.write("\n--- Integrity Check Complete ---")
            if incomplete_files or incomplete_messages:
                self.stdout.write(self.style.NOTICE("Run this command with the --repair flag to download missing content."))

```

### File: axon_bbs/core/management/commands/cleanup_orphaned_files.py
```
# axon_bbs/core/management/commands/cleanup_orphaned_files.py
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/management/commands/cleanup_orphaned_files.py
import os
import shutil
from django.core.management.base import BaseCommand
from django.db.models import Count
from django.conf import settings
from core.models import FileAttachment, User

class Command(BaseCommand):
    help = 'Finds and deletes orphaned FileAttachments and their associated data chunks from disk.'
    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='List orphaned files without deleting them.',
        )
        parser.add_argument(
            '--no-input',
            action='store_true',
            help='Delete orphaned files without asking for confirmation.',
        )

    def handle(self, *args, **options):
        # Get a set of all file paths currently being used as user avatars.
        # The User.avatar field stores paths like 'avatars/cow_....png'.
        active_avatar_paths = set(User.objects.exclude(avatar__exact='').values_list('avatar', flat=True))

        # Find FileAttachment objects that are not linked to any Message
        attachments_without_messages = FileAttachment.objects.annotate(
            message_count=Count('messages')
        ).filter(message_count=0)

        # From that list, filter out any that are active avatars.
        orphaned_attachments = []
        for attachment in attachments_without_messages:
            # Construct the path as it would be stored in the User.avatar field.
            expected_avatar_path = os.path.join('avatars', attachment.filename)
            if expected_avatar_path not in active_avatar_paths:
                orphaned_attachments.append(attachment)
        
        count = len(orphaned_attachments)

        if count == 0:
            self.stdout.write(self.style.SUCCESS("No orphaned files found."))
            return

        self.stdout.write(f"Found {count} orphaned file attachment(s).")
        
        if options['dry_run']:
            self.stdout.write(self.style.WARNING("--- DRY RUN ---"))
            for attachment in orphaned_attachments:
                self.stdout.write(f"[WOULD DELETE] DB Record: {attachment.filename} ({attachment.id})")
                content_hash = attachment.metadata_manifest.get('content_hash') if attachment.metadata_manifest else None
                if content_hash:
                    chunk_dir = os.path.join(settings.BASE_DIR, 'data', 'bitsync_chunks', content_hash)
                    if os.path.isdir(chunk_dir):
                        self.stdout.write(f"                Disk Chunks: {chunk_dir}")
                    else:
                        self.stdout.write(self.style.NOTICE(f"                 Disk Chunks: Not found at {chunk_dir}"))
            return

        if not options['no-input']:
            confirm = input(f"Are you sure you want to delete these {count} files and their data? [y/N] ")
            if confirm.lower() != 'y':
                self.stdout.write(self.style.ERROR("Cleanup cancelled by user."))
                return

        deleted_count = 0
        for attachment in orphaned_attachments:
            self.stdout.write(f"Deleting {attachment.filename}...")
            content_hash = attachment.metadata_manifest.get('content_hash') if attachment.metadata_manifest else None
            
            # 1. Delete the data chunks from the disk
            if content_hash:
                chunk_dir = os.path.join(settings.BASE_DIR, 'data', 'bitsync_chunks', content_hash)
                if os.path.isdir(chunk_dir):
                    try:
                        shutil.rmtree(chunk_dir)
                        self.stdout.write(self.style.SUCCESS(f"  - Successfully deleted chunk directory: {chunk_dir}"))
                    except OSError as e:
                        self.stdout.write(self.style.ERROR(f"  - Error deleting chunk directory {chunk_dir}: {e}"))
            
            # 2. Delete the FileAttachment object from the database
            attachment.delete()
            deleted_count += 1
            
        self.stdout.write(self.style.SUCCESS(f"\nCleanup complete. Deleted {deleted_count} orphaned

```

### File: axon_bbs/core/management/commands/compare_sync_status.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/management/commands/compare_sync_status.py
import requests
import base64
import hashlib
from datetime import datetime, timezone

from django.core.management.base import BaseCommand
from django.conf import settings
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding as rsa_padding
from cryptography.fernet import Fernet

from core.models import TrustedInstance, Message, FileAttachment

class Command(BaseCommand):
    help = 'Compares local content with a remote peer to see what needs to be synced.'

    def add_arguments(self, parser):
        parser.add_argument('peer_onion_url', type=str, help="The full .onion URL of the peer to compare against.")

    def _load_identity(self):
        """Loads the local instance's private key."""
        try:
            local_instance = TrustedInstance.objects.filter(encrypted_private_key__isnull=False).first()
            if not (local_instance and local_instance.encrypted_private_key):
                raise ValueError("Local instance with private key not found.")
            
            key = base64.urlsafe_b64encode(settings.SECRET_KEY.encode()[:32])
            f = Fernet(key)
            decrypted_pem = f.decrypt(local_instance.encrypted_private_key.encode())
            private_key = serialization.load_pem_private_key(decrypted_pem, password=None)
            return local_instance, private_key
        except Exception as e:
            self.stderr.write(self.style.ERROR(f"Failed to load local identity: {e}"))
            return None, None

    def _get_auth_headers(self, local_instance, private_key):
        """Generates authentication headers for an API request."""
        timestamp = datetime.now(timezone.utc).isoformat()
        hasher = hashlib.sha256(timestamp.encode('utf-8'))
        digest = hasher.digest()
        signature = private_key.sign(
            digest, rsa_padding.PSS(mgf=rsa_padding.MGF1(hashes.SHA256()), salt_length=rsa_padding.PSS.MAX_LENGTH), hashes.SHA256()
        )
        return {
            'X-Pubkey': base64.b64encode(local_instance.pubkey.encode('utf-8')).decode('utf-8'),
            'X-Timestamp': timestamp,
            'X-Signature': base64.b64encode(signature).decode('utf-8')
        }

    def handle(self, *args, **options):
        peer_url = options['peer_onion_url']
        self.stdout.write(self.style.SUCCESS(f"--- Comparing sync status with peer: {peer_url} ---"))

        local_instance, private_key = self._load_identity()
        if not private_key:
            return

        # 1. Get all manifests from the remote peer
        self.stdout.write("\n[1] Fetching all manifests from remote peer...")
        
        since_param = datetime.min.replace(tzinfo=timezone.utc).isoformat()
        target_url = f"{peer_url.strip('/')}/api/sync/?since={since_param}"
        proxies = {'http': 'socks5h://127.0.0.1:9050', 'https': 'socks5h://127.0.0.1:9050'}
        
        try:
            headers = self._get_auth_headers(local_instance, private_key)
            response = requests.get(target_url, headers=headers, proxies=proxies, timeout=120)
            
            if response.status_code != 200:
                self.stderr.write(self.style.ERROR(f"Error fetching data from peer. Status: {response.status_code}, Body: {response.text}"))
                return
            
            remote_manifests = response.json().get('manifests', [])
            remote_hashes = {m['content_hash'] for m in remote_manifests}
            self.stdout.write(f"  - Peer advertised {len(remote_hashes)} unique content items.")
        
        except requests.exceptions.RequestException as e:
            self.stderr.write(self.style.ERROR(f"Network error while contacting peer: {e}"))
            return
        
        # 2. Get all content hashes stored locally
        self.stdout.write("\n[2] Checking for content stored locally...")
        local_message_hashes = set(Message.objects.values_list('manifest__content_hash', flat=True))
        local_file_hashes = set(FileAttachment.objects.values_list('manifest__content_hash', flat=True))
        local_hashes = local_message_hashes.union(local_file_hashes)
        self.stdout.write(f"  - Found {len(local_hashes)} unique content items in the local database.")
        
        # 3. Compare the two sets
        self.stdout.write("\n[3] Comparing remote manifests to local database...")
        missing_hashes = remote_hashes - local_hashes
        
        if not missing_hashes:
            self.stdout.write(self.style.SUCCESS("  - Everything is in sync! No missing content found."))
        else:
            self.stdout.write(self.style.WARNING(f"  - Found {len(missing_hashes)} item(s) that are on the peer but NOT in the local database:"))
            for h in missing_hashes:
                # Find the full manifest for the missing hash to provide more detail
                missing_manifest = next((m for m in remote_manifests if m['content_hash'] == h), None)
                if missing_manifest:
                    content_type = missing_manifest.get('content_type', 'unknown')
                    filename = missing_manifest.get('filename', 'N/A')
                    self.stdout.write(f"    - Type: {content_type}, Hash: {h[:16]}..., Filename: {filename}")

        self.stdout.write("\n--- Comparison Complete ---")

```

### File: axon_bbs/core/management/commands/diagnose_sync_content.py
```
# axon_bbs/core/management/commands/diagnose_sync_content.py
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/management/commands/diagnose_sync_content.py
from django.core.management.base import BaseCommand
from django.utils import timezone
from core.models import FileAttachment, Message, PrivateMessage

class Command(BaseCommand):
    help = 'Scans all content and diagnoses issues that would prevent them from syncing.'
    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS("--- Running Axon BBS Content Diagnostics ---"))
        now = timezone.now()
        
        # --- Check File Attachments ---
        self.stdout.write("\n[1] Checking File Attachments...")
        all_files = FileAttachment.objects.all()
        problem_files = 0
        
        if not all_files.exists():
            self.stdout.write("No file attachments found in the database.")
        else:
            for attachment in all_files:
                errors = []
                # Check 1: Manifest must exist and have a content_hash
                if not attachment.metadata_manifest or not attachment.metadata_manifest.get('content_hash'):
                    errors.append("Manifest data is missing or invalid.")
                
                # Check 2: Timestamp must not be in the future
                if attachment.created_at > now:
                    errors.append(f"Timestamp is in the future: {attachment.created_at.isoformat()}")

                if errors:
                    problem_files += 1
                    self.stdout.write(self.style.ERROR(f"  - File '{attachment.filename}' (ID: {attachment.id}) has problems:"))
                    for error in errors:
                        self.stdout.write(f"    - {error}")
            
            if problem_files == 0:
                self.stdout.write(self.style.SUCCESS(f"  OK: All {all_files.count()} file attachments appear to be syncable."))
            else:
                self.stdout.write(self.style.WARNING(f"  Found issues with {problem_files} out of {all_files.count()} file attachments."))


        # --- Check Messages ---
        self.stdout.write("\n[2] Checking Messages...")
        all_messages = Message.objects.all()
        problem_messages = 0

        if not all_messages.exists():
            self.stdout.write("No messages found in the database.")
        else:
            for message in all_messages:
                errors = []
                # Check 1: Manifest must exist and have a content_hash
                if not message.metadata_manifest or not message.metadata_manifest.get('content_hash'):
                    errors.append("Manifest data is missing or invalid.")
                
                # Check 2: Timestamp must not be in the future
                if message.created_at > now:
                    errors.append(f"Timestamp is in the future: {message.created_at.isoformat()}")

                if errors:
                    problem_messages += 1
                    self.stdout.write(self.style.ERROR(f"  - Message '{message.subject}' (ID: {message.id}) has problems:"))
                    for error in errors:
                        self.stdout.write(f"    - {error}")

            if problem_messages == 0:
                self.stdout.write(self.style.SUCCESS(f"  OK: All {all_messages.count()} messages appear to be syncable."))
            else:
                self.stdout.write(self.style.WARNING(f"  Found issues with {problem_messages} out of {all_messages.count()} messages."))

        # --- Check Private Messages ---
        self.stdout.write("\n[3] Checking Private Messages...")
        all_pms = PrivateMessage.objects.all()
        problem_pms = 0
        
        if not all_pms.exists():
            self.stdout.write("No private messages found in the database.")
        else:
            for pm in all_pms:
                errors = []
                # Check 1: Metadata manifest must exist and have a content_hash
                if not pm.metadata_manifest or not pm.metadata_manifest.get('content_hash'):
                    errors.append("Metadata manifest is missing or invalid.")
                
                # Check 2: E2E content hash must exist in metadata manifest
                if not pm.metadata_manifest.get('e2e_content_hash'):
                    errors.append("E2E content hash is missing from metadata manifest.")

                # Check 3: Timestamp must not be in the future
                if pm.created_at > now:
                    errors.append(f"Timestamp is in the future: {pm.created_at.isoformat()}")
                
                # Check 4: The e2e_encrypted_content field must exist
                if not pm.e2e_encrypted_content:
                    errors.append("E2E encrypted content is missing.")

                if errors:
                    problem_pms += 1
                    self.stdout.write(self.style.ERROR(f"  - Private Message (ID: {pm.id}) has problems:"))
                    for error in errors:
                        self.stdout.write(f"    - {error}")
            
            if problem_pms == 0:
                self.stdout.write(self.style.SUCCESS(f"  OK: All {all_pms.count()} private messages appear to be syncable."))
            else:
                self.stdout.write(self.style.WARNING(f"  Found issues with {problem_pms} out of {all_pms.count()} private messages."))

        self.stdout.write("\n--- Diagnostics Complete ---")

```

### File: axon_bbs/core/management/commands/process_scores.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/management/commands/process_scores.py
from django.core.management.base import BaseCommand
from core.services.high_score_service import HighScoreService

class Command(BaseCommand):
    help = 'Manually triggers the high score processing service.'

    def handle(self, *args, **options):
        self.stdout.write(self.style.NOTICE("--- Manually running High Score processing... ---"))
        
        try:
            service = HighScoreService()
            service.process_scores()
            self.stdout.write(self.style.SUCCESS("--- High Score processing complete. ---"))
        except Exception as e:
            self.stderr.write(self.style.ERROR(f"An error occurred: {e}"))

```

### File: axon_bbs/core/management/commands/rebuild_frontend.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;
# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/management/commands/rebuild_frontend.py
import os
import subprocess
from django.core.management.base import BaseCommand
from django.conf import settings

class Command(BaseCommand):
    help = 'Installs frontend dependencies and builds the frontend application.'

    def handle(self, *args, **options):
        self.stdout.write("--- Starting Frontend Rebuild Process ---")
        
        # Define the path to the frontend directory
        frontend_dir = os.path.join(settings.BASE_DIR, 'frontend')

        if not os.path.isdir(frontend_dir):
            self.stderr.write(self.style.ERROR(f"Frontend directory not found at: {frontend_dir}"))
            return

        # --- Step 1: Install npm dependencies ---
        self.stdout.write(self.style.NOTICE(f"Running 'npm install' in {frontend_dir}..."))
        try:
            # Using shell=True on Windows might be necessary if npm is not in the system path.
            # On Linux/macOS, it's generally safer to use shell=False if possible.
            install_process = subprocess.run(
                ['npm', 'install'],
                cwd=frontend_dir,
                check=True,
                capture_output=True,
                text=True
            )
            self.stdout.write(self.style.SUCCESS("'npm install' completed successfully."))
        except FileNotFoundError:
            self.stderr.write(self.style.ERROR("`npm` command not found. Is Node.js installed and in your PATH?"))
            return
        except subprocess.CalledProcessError as e:
            self.stderr.write(self.style.ERROR(f"'npm install' failed with return code {e.returncode}."))
            self.stderr.write(e.stderr)
            return

        # --- Step 2: Build the React application ---
        self.stdout.write(self.style.NOTICE("Running 'npm run build'..."))
        try:
            build_process = subprocess.run(
                ['npm', 'run', 'build'],
                cwd=frontend_dir,
                check=True,
                capture_output=True,
                text=True
            )
            self.stdout.write(self.style.SUCCESS("Frontend build completed successfully!"))
            self.stdout.write("Static files have been generated in the 'frontend/build' directory.")
        except subprocess.CalledProcessError as e:
            self.stderr.write(self.style.ERROR(f"'npm run build' failed with return code {e.returncode}."))
            self.stderr.write(e.stderr)
            return

```

### File: axon_bbs/core/management/commands/reset_peer_sync_time.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/management/commands/reset_peer_sync_time.py
from django.core.management.base import BaseCommand
from core.models import TrustedInstance

class Command(BaseCommand):
    help = 'Finds a trusted peer by its onion URL and resets its "last_synced_at" timestamp to None.'

    def add_arguments(self, parser):
        parser.add_argument('peer_onion_url', type=str, help="The full .onion URL of the peer to reset.")

    def handle(self, *args, **options):
        peer_url = options['peer_onion_url']
        self.stdout.write(self.style.SUCCESS(f"--- Attempting to reset sync time for peer: {peer_url} ---"))

        try:
            peer = TrustedInstance.objects.get(web_ui_onion_url=peer_url)
        except TrustedInstance.DoesNotExist:
            self.stderr.write(self.style.ERROR(f"Error: Could not find a trusted peer with that URL."))
            return
        except TrustedInstance.MultipleObjectsReturned:
            self.stderr.write(self.style.ERROR(f"Error: Found multiple peers with that URL. Please clean up your database."))
            return

        self.stdout.write(f"Found peer. Current 'last_synced_at' value: {peer.last_synced_at}")

        peer.last_synced_at = None
        peer.save()

        # Re-fetch from DB to confirm the change
        peer.refresh_from_db()
        self.stdout.write(f"New 'last_synced_at' value: {peer.last_synced_at}")
        
        self.stdout.write(self.style.SUCCESS("\nTimestamp successfully cleared."))
        self.stdout.write("The next sync cycle (within 2 minutes) will perform a full sync with this peer.")

```

### File: axon_bbs/core/management/commands/resetmigrations.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/management/commands/resetmigrations.py
import os
from django.core.management.base import BaseCommand, CommandError
from django.apps import apps


class Command(BaseCommand):
    help = 'Deletes all migration files for a specified app, leaving only the __init__.py file.'
    def add_arguments(self, parser):
        parser.add_argument('app_name', type=str, help='The name of the Django app whose migrations should be reset.')

    def handle(self, *args, **options):
        app_name = options['app_name']
        
        try:
            app_config = apps.get_app_config(app_name)
        except LookupError:
            raise CommandError(f"App '{app_name}' not found.")

        migrations_dir = os.path.join(app_config.path, 'migrations')

        if not os.path.isdir(migrations_dir):
            self.stdout.write(self.style.WARNING(f"No 'migrations' directory found for app '{app_name}'. No action taken."))
            return

        self.stdout.write(self.style.WARNING(f"This will delete migration files for the app '{app_name}'. This cannot be undone."))
        confirm = input("Are you sure you want to continue? [y/N] ")
        if confirm.lower() != 'y':
            self.stdout.write(self.style.ERROR("Operation cancelled."))
            return

        deleted_count = 0
        for filename in os.listdir(migrations_dir):
            # Skip the package initializer and non-python files
            if filename == '__init__.py' or not (filename.endswith('.py') or filename.endswith('.pyc')):
                continue

            file_path = os.path.join(migrations_dir, filename)
            try:
                os.remove(file_path)
                self.stdout.write(f"Deleted: {filename}")
                deleted_count += 1
            except OSError as e:
                self.stderr.write(self.style.ERROR(f"Error deleting {file_path}: {e}"))
        
        if deleted_count > 0:
            self.stdout.write(self.style.SUCCESS(f"\nSuccessfully deleted {deleted_count} migration file(s) for app '{app_name}'."))
        else:
            self.stdout.write(self.style.SUCCESS("\nNo migration files to delete."))

```

### File: axon_bbs/core/management/commands/update_peer_key.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/management/commands/update_peer_key.py
import requests
from django.core.management.base import BaseCommand
from core.models import TrustedInstance

class Command(BaseCommand):
    help = 'Fetches a peer\'s public key directly from its API and updates the local record.'

    def add_arguments(self, parser):
        parser.add_argument('peer_onion_url', type=str, help="The full .onion URL of the peer to update.")

    def handle(self, *args, **options):
        # UPDATED: Strip the trailing slash immediately to handle user input gracefully.
        peer_url = options['peer_onion_url'].strip('/')
        
        self.stdout.write(self.style.SUCCESS(f"--- Attempting to update key for peer: {peer_url} ---"))

        try:
            # The query now uses the cleaned URL.
            peer_instance = TrustedInstance.objects.get(web_ui_onion_url=peer_url)
        except TrustedInstance.DoesNotExist:
            self.stderr.write(self.style.ERROR("Peer not found in local database. Please add it first."))
            return

        target_url = f"{peer_url}/api/identity/public_key/"
        proxies = {'http': 'socks5h://127.0.0.1:9050', 'https': 'socks5h://127.0.0.1:9050'}

        self.stdout.write("Fetching key from peer over Tor...")
        try:
            response = requests.get(target_url, proxies=proxies, timeout=120)
            if response.status_code != 200:
                self.stderr.write(self.style.ERROR(f"Peer returned an error. Status: {response.status_code}, Body: {response.text}"))
                return
            
            new_key = response.json().get('public_key')
            if not new_key:
                self.stderr.write(self.style.ERROR("Peer response did not contain a public key."))
                return

        except requests.exceptions.RequestException as e:
            self.stderr.write(self.style.ERROR(f"Network error while contacting peer: {e}"))
            return
            
        self.stdout.write("Successfully fetched key. Updating local database...")
        peer_instance.pubkey = new_key
        peer_instance.save()
        
        self.stdout.write(self.style.SUCCESS("Peer's public key has been updated successfully."))

```

### File: axon_bbs/core/management/commands/upgradeschema.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/management/commands/upgradeschema.py
from django.core.management.base import BaseCommand
from django.db import connection, transaction
from core.models import PrivateMessage

class Command(BaseCommand):
    help = 'Manually upgrades the database schema to the version 10.13.0 state without using migrations.'
    @transaction.atomic
    def handle(self, *args, **options):
        self.stdout.write(self.style.WARNING("--- Starting Manual Schema Upgrade ---"))
        self.stdout.write(self.style.WARNING("IMPORTANT: Ensure you have backed up your database before proceeding."))
        
        confirm = input("Are you sure you want to alter the database schema directly? [y/N] ")
        if confirm.lower() != 'y':
            self.stdout.write(self.style.ERROR("Operation cancelled."))
            return

        with connection.cursor() as cursor:
            # --- Get schema information ---
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            all_tables = [row[0] for row in cursor.fetchall()]

            # --- Upgrade core_fileattachment table ---
            if 'core_fileattachment' in all_tables:
                cursor.execute("PRAGMA table_info(core_fileattachment);")
                columns = [row[1] for row in cursor.fetchall()]
                if 'manifest' in columns and 'metadata_manifest' not in columns:
                    self.stdout.write("Renaming 'manifest' to 'metadata_manifest' in 'core_fileattachment'...")
                    cursor.execute("ALTER TABLE core_fileattachment RENAME COLUMN manifest TO metadata_manifest;")
                    self.stdout.write(self.style.SUCCESS("  -> Done."))

            # --- Upgrade core_message table ---
            if 'core_message' in all_tables:
                cursor.execute("PRAGMA table_info(core_message);")
                columns = [row[1] for row in cursor.fetchall()]
                if 'manifest' in columns and 'metadata_manifest' not in columns:
                    self.stdout.write("Renaming 'manifest' to 'metadata_manifest' in 'core_message'...")
                    cursor.execute("ALTER TABLE core_message RENAME COLUMN manifest TO metadata_manifest;")
                    self.stdout.write(self.style.SUCCESS("  -> Done."))

            # --- Rebuild core_privatemessage table to remove old columns ---
            if 'core_privatemessage' in all_tables:
                self.stdout.write("Checking 'core_privatemessage' table for required rebuild...")
                cursor.execute("PRAGMA table_info(core_privatemessage);")
                columns_info = cursor.fetchall()
                column_names = [row[1] for row in columns_info]
                
                old_columns_exist = any(col in column_names for col in ['subject', 'body', 'recipient_pubkey', 'manifest'])

                if old_columns_exist:
                    self.stdout.write(self.style.WARNING("Old columns found. Rebuilding 'core_privatemessage' table to match current models..."))
                    
                    model = PrivateMessage
                    new_columns_with_types = []
                    final_fields = []
                    
                    # Manually build the column definitions for the new table
                    for field in model._meta.local_fields:
                        # Get the column name (e.g., 'author_id')
                        col_name = field.column
                        # Get the column type (e.g., 'integer')
                        col_type = field.db_type(connection=connection)
                        
                        col_def = f'"{col_name}" {col_type}'
                        
                        # Add constraints
                        if not field.null:
                            col_def += " NOT NULL"
                        if field.primary_key:
                            col_def += " PRIMARY KEY"
                            
                        new_columns_with_types.append(col_def)
                        final_fields.append(col_name)

                    # 1. Create a new table with the correct schema
                    create_sql = f"CREATE TABLE core_privatemessage_new ({', '.join(new_columns_with_types)});"
                    cursor.execute(create_sql)
                    self.stdout.write("  -> Created new temporary table.")

                    # 2. Copy data from the old table to the new one
                    common_columns = [col for col in final_fields if col in column_names]
                    common_columns_str = ', '.join(f'"{col}"' for col in common_columns)
                    insert_sql = f"INSERT INTO core_privatemessage_new ({common_columns_str}) SELECT {common_columns_str} FROM core_privatemessage;"
                    cursor.execute(insert_sql)
                    self.stdout.write(f"  -> Copied data for {len(common_columns)} matching columns.")

                    # 3. Drop the old table
                    cursor.execute("DROP TABLE core_privatemessage;")
                    self.stdout.write("  -> Dropped old table.")

                    # 4. Rename the new table
                    cursor.execute("ALTER TABLE core_privatemessage_new RENAME TO core_privatemessage;")
                    self.stdout.write("  -> Renamed new table. Rebuild complete.")
                else:
                    self.stdout.write(self.style.SUCCESS("  -> 'core_privatemessage' table already matches the current schema. No rebuild needed."))

        self.stdout.write(self.style.SUCCESS("\n--- Manual Schema Upgrade Complete ---"))

```

### File: axon_bbs/core/migrations/0001_initial.py
```
# Generated by Django 5.0.6 on 2025-09-18 23:54

import core.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pubkey', models.TextField(unique=True)),
                ('nickname', models.CharField(max_length=50, unique=True)),
                ('verified', models.BooleanField(default=False)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'aliases',
            },
        ),
        migrations.CreateModel(
            name='Applet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='The unique name of the applet.', max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('author_pubkey', models.TextField(blank=True, help_text="Public key of the applet's author.")),
                ('code_manifest', models.JSONField(help_text="BitSync manifest for the applet's code bundle.")),
                ('is_local', models.BooleanField(default=False, help_text="If checked, this applet's code will not be swarmed to peers.")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_debug_mode', models.BooleanField(default=False, help_text='Enable to show the debug console when this applet is run.')),
            ],
        ),
        migrations.CreateModel(
            name='AppletCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Applet Categories',
            },
        ),
        migrations.CreateModel(
            name='BannedPubkey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pubkey', models.TextField(unique=True)),
                ('is_temporary', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField(blank=True, help_text='If the ban is temporary, this is when it expires.', null=True)),
                ('federated_action_id', models.UUIDField(blank=True, help_text='The ID of the federated action that created this ban.', null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FederatedAction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(choices=[('ban_pubkey', 'Ban Pubkey'), ('unpin_content', 'Unpin Content'), ('update_profile', 'Update Profile'), ('DELETE_CONTENT', 'Delete Content')], max_length=50)),
                ('pubkey_target', models.TextField(blank=True, help_text='The pubkey targeted by the action (e.g., for a ban).', null=True)),
                ('content_hash_target', models.CharField(blank=True, help_text='The content_hash of the item being acted upon.', max_length=64, null=True)),
                ('action_details', models.JSONField(default=dict, help_text="Additional details, e.g., {'is_temporary': true, 'duration_hours': 72}")),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('status', models.CharField(choices=[('approved', 'Approved'), ('pending_approval', 'Pending Approval'), ('denied', 'Denied')], default='approved', max_length=20)),
                ('is_logged', models.BooleanField(default=False, help_text='True if this action has been logged by the moderation agent.')),
            ],
        ),
        migrations.CreateModel(
            name='MessageBoard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('required_access_level', models.PositiveIntegerField(default=10)),
            ],
        ),
        migrations.CreateModel(
            name='TrustedInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('web_ui_onion_url', models.URLField(blank=True, max_length=255, null=True)),
                ('pubkey', models.TextField(blank=True, null=True)),
                ('encrypted_private_key', models.TextField(blank=True, null=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('last_synced_at', models.DateTimeField(blank=True, null=True)),
                ('is_trusted_peer', models.BooleanField(default=False, help_text='Check if this is a trusted peer (uncheck for local).')),
            ],
        ),
        migrations.CreateModel(
            name='ValidFileType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mime_type', models.CharField(help_text="e.g., 'image/jpeg'", max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('is_enabled', models.BooleanField(default=True, help_text='Disable to temporarily disallow this file type.')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('access_level', models.PositiveIntegerField(default=10, help_text="User's security access level.")),
                ('is_banned', models.BooleanField(default=False, help_text='Designates if the user is banned from the local instance.')),
                ('pubkey', models.TextField(blank=True, help_text="User's public key (PEM).", null=True)),
                ('nickname', models.CharField(blank=True, help_text="User's chosen nickname.", max_length=50, null=True, unique=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('is_agent', models.BooleanField(default=False, help_text='Designates this user as an automated agent.')),
                ('is_moderator', models.BooleanField(default=False, help_text='Grants moderator permissions.')),
                ('karma', models.IntegerField(default=10, help_text="User's reputation score.")),
                ('last_moderated_at', models.DateTimeField(blank=True, help_text='Timestamp of the last moderation action on this user.', null=True)),
                ('timezone', models.CharField(blank=True, help_text="User's preferred display timezone (IANA name).", max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='core_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AppletSharedState',
            fields=[
                ('applet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='shared_state', serialize=False, to='core.applet')),
                ('state_data', models.JSONField(default=dict)),
                ('version', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='applet',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.appletcategory'),
        ),
        migrations.CreateModel(
            name='FileAttachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(default=core.models.get_default_expires_at, null=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('filename', models.CharField(max_length=255)),
                ('content_type', models.CharField(max_length=100)),
                ('size', models.PositiveIntegerField()),
                ('metadata_manifest', models.JSONField(help_text='BitSync manifest for P2P file distribution.')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authored_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('pinned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pinned_%(class)ss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(default=core.models.get_default_expires_at, null=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('pubkey', models.TextField(blank=True, null=True)),
                ('metadata_manifest', models.JSONField(blank=True, help_text='BitSync manifest for P2P content distribution.', null=True)),
                ('agent_status', models.CharField(choices=[('pending', 'Pending'), ('processed', 'Processed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('last_moderated_at', models.DateTimeField(blank=True, help_text='Timestamp of the last moderation action on this message.', null=True)),
                ('attachments', models.ManyToManyField(blank=True, related_name='messages', to='core.fileattachment')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authored_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('pinned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pinned_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.messageboard')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='applet',
            name='event_board',
            field=models.ForeignKey(blank=True, help_text='The message board this applet will use for its public events.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.messageboard'),
        ),
        migrations.CreateModel(
            name='ModerationReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(blank=True, help_text='Reason for the report.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('is_logged', models.BooleanField(default=False, help_text="True if this report's outcome has been logged.")),
                ('reported_message', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports', to='core.message')),
                ('reporting_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_filed', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_reviewed', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PrivateMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(default=core.models.get_default_expires_at, null=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('sender_pubkey', models.TextField(blank=True, null=True)),
                ('metadata_manifest', models.JSONField(blank=True, help_text='BitSync manifest for BBS-level metadata.', null=True)),
                ('e2e_encrypted_content', models.TextField(blank=True, help_text='The end-to-end encrypted message body and subject.', null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authored_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('pinned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pinned_%(class)ss', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_mail', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AppletData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_manifest', models.JSONField(help_text="BitSync manifest for the user's applet data.")),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('applet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_instances', to='core.applet')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applet_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('applet', 'owner')},
            },
        ),
        migrations.CreateModel(
            name='ContentExtensionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_id', models.UUIDField()),
                ('content_type', models.CharField(max_length=50)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=10)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_extensions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('content_id', 'user')},
            },
        ),
        migrations.CreateModel(
            name='HighScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_pubkey', models.TextField(db_index=True)),
                ('owner_nickname', models.CharField(max_length=50)),
                ('score', models.IntegerField(db_index=True)),
                ('wins', models.IntegerField(blank=True, null=True)),
                ('losses', models.IntegerField(blank=True, null=True)),
                ('kills', models.IntegerField(blank=True, null=True)),
                ('deaths', models.IntegerField(blank=True, null=True)),
                ('assists', models.IntegerField(blank=True, null=True)),
                ('last_updated', models.DateTimeField()),
                ('applet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='high_scores', to='core.applet')),
            ],
            options={
                'ordering': ['-score'],
                'unique_together': {('applet', 'owner_pubkey')},
            },
        ),
        migrations.CreateModel(
            name='IgnoredPubkey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pubkey', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ignored_pubkeys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'pubkey')},
            },
        ),
    ]

```

### File: axon_bbs/core/migrations/__init__.py
```


```

### File: axon_bbs/core/services/__init__.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/core/services/__init__.py
# This file can be empty.
# Its presence tells Python that the 'services' directory is a package.


```

### File: axon_bbs/core/services/avatar_generator.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

# Full path: axon_bbs/core/services/avatar_generator.py
import hashlib
import random
import math
from PIL import Image, ImageDraw
from io import BytesIO
from django.core.files.base import ContentFile
from .encryption_utils import generate_checksum

def generate_cow_avatar(pubkey: str):
    """
    Generates a unique, deterministic cartoon cow avatar based on a user's public key.
    """
    seed = hashlib.sha256(pubkey.encode()).digest()
    r = random.Random(seed)
    
    # --- Color Palette Generation ---
    head_hue = r.randint(0, 359)
    head_saturation = r.randint(30, 60)
    head_lightness = r.randint(75, 90)
    head_color = f"hsl({head_hue}, {head_saturation}%, {head_lightness}%)"

    spot_hue = (head_hue + 180 + r.randint(-30, 30)) % 360
    spot_saturation = r.randint(60, 90)
    spot_lightness = r.randint(30, 50)
    spot_color = f"hsl({spot_hue}, {spot_saturation}%, {spot_lightness}%)"
    
    muzzle_color = f"hsl({head_hue}, {head_saturation // 2}%, {head_lightness + 5}%)"
    if head_lightness > 80:
        muzzle_color = "#F5E6D3"

    ear_inner_color = "#E0B080"

    # --- Create Image Canvas ---
    img = Image.new('RGB', (128, 128), color='#FFFFFF')
    draw = ImageDraw.Draw(img)
    
    # --- Draw Cow Features ---
    head_center_x, head_center_y = 64, 64
    head_radius = 45

    # Ears
    ear_width, ear_height = 28, 40
    draw.ellipse([head_center_x - head_radius - 5, head_center_y - head_radius + 5, head_center_x - head_radius + ear_width - 5, head_center_y - head_radius + ear_height + 5], fill=head_color, outline='black', width=2)
    draw.ellipse([head_center_x - head_radius + 2, head_center_y - head_radius + 15, head_center_x - head_radius + 12, head_center_y - head_radius + ear_height - 5], fill=ear_inner_color)
    draw.ellipse([head_center_x + head_radius - ear_width + 5, head_center_y - head_radius + 5, head_center_x + head_radius + 5, head_center_y - head_radius + ear_height + 5], fill=head_color, outline='black', width=2)
    draw.ellipse([head_center_x + head_radius - 12, head_center_y - head_radius + 15, head_center_x + head_radius - 2, head_center_y - head_radius + ear_height - 5], fill=ear_inner_color)
    
    # Head
    draw.ellipse([head_center_x - head_radius, head_center_y - head_radius, head_center_x + head_radius, head_center_y + head_radius], fill=head_color, outline='black', width=2)
    
    # Muzzle
    muzzle_width = 60
    muzzle_height = 35
    draw.ellipse([head_center_x - muzzle_width // 2, head_center_y + 12, head_center_x + muzzle_width // 2, head_center_y + 12 + muzzle_height], fill=muzzle_color, outline='black', width=2)

    # --- START FIX: Reworked Spot Generation ---
    num_spots = r.choice([1, 1, 1, 2, 2]) # Make one spot more common
    spot_sizes = [r.randint(15, 22), r.randint(8, 14)] # One large, one small
    r.shuffle(spot_sizes)

    for i in range(num_spots):
        spot_radius = spot_sizes[i]
        
        while True:
            # Place spots towards the periphery, not in the center
            angle = r.uniform(0, 2 * math.pi)
            distance_from_center = r.uniform(head_radius * 0.4, head_radius - spot_radius - 2) # Keep spots away from the edge
            spot_x = head_center_x + distance_from_center * math.cos(angle)
            spot_y = head_center_y + distance_from_center * math.sin(angle)
            
            # Ensure spot doesn't overlap the muzzle area
            is_over_muzzle = (head_center_y + 12 < spot_y + spot_radius)
            if not is_over_muzzle:
                break
        
        # Decide if the spot is an ellipse or a polygon
        if r.choice([True, False]):
            # Draw a slightly irregular ellipse
            spot_w = spot_radius * 2 * r.uniform(0.8, 1.2)
            spot_h = spot_radius * 2 * r.uniform(0.8, 1.2)
            draw.ellipse([(spot_x - spot_w / 2, spot_y - spot_h / 2), (spot_x + spot_w / 2, spot_y + spot_h / 2)], fill=spot_color, outline='black', width=1)
        else:
            # Draw a random polygon
            points = []
            num_vertices = r.randint(3, 6)
            for j in range(num_vertices):
                angle_vert = (2 * math.pi / num_vertices) * j
                radius_vert = spot_radius * r.uniform(0.7, 1.3)
                px = spot_x + radius_vert * math.cos(angle_vert)
                py = spot_y + radius_vert * math.sin(angle_vert)
                points.append((px, py))
            draw.polygon(points, fill=spot_color, outline='black', width=1)
    
    # --- END FIX ---

    # Eyes, Nostrils, and Smile are drawn LAST
    eye_radius = 5
    draw.ellipse([head_center_x - 20 - eye_radius, head_center_y - 10 - eye_radius, head_center_x - 20 + eye_radius, head_center_y - 10 + eye_radius], fill='black')
    draw.ellipse([head_center_x + 20 - eye_radius, head_center_y - 10 - eye_radius, head_center_x + 20 + eye_radius, head_center_y - 10 + eye_radius], fill='black')

    nostril_width, nostril_height = 6, 8
    draw.ellipse([head_center_x - 15 - nostril_width // 2, head_center_y + 28 - nostril_height // 2, head_center_x - 15 + nostril_width // 2, head_center_y + 28 + nostril_height // 2], fill='black')
    draw.ellipse([head_center_x + 15 - nostril_width // 2, head_center_y + 28 - nostril_height // 2, head_center_x + 15 + nostril_width // 2, head_center_y + 28 + nostril_height // 2], fill='black')

    draw.arc([head_center_x - 18, head_center_y + 38, head_center_x + 18, head_center_y + 58], start=20, end=160, fill='black', width=2)
    
    # --- Save Image to Buffer ---
    buffer = BytesIO()
    img.save(buffer, format='PNG')
    
    # --- Return Django ContentFile and the filename ---
    checksum = generate_checksum(pubkey)
    filename = f"cow_{checksum[:12]}.png"
    
    return ContentFile(buffer.getvalue()), filename

```

### File: axon_bbs/core/services/bitsync_service.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/services/bitsync_service.py
import os
import json
import hashlib
import logging
import base64
from typing import List, Optional, Union, Dict, Any

from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.asymmetric import padding as rsa_padding
from cryptography.hazmat.primitives import serialization, hashes
from django.conf import settings
from django.db.models import Q

from core.models import TrustedInstance, User
from .encryption_utils import generate_checksum

logger = logging.getLogger(__name__)

CHUNK_SIZE = 256 * 1024


class BitSyncService:
    def __init__(self):
        self.chunk_storage_path = os.path.join(settings.BASE_DIR, 'data', 'bitsync_chunks')
        os.makedirs(self.chunk_storage_path, exist_ok=True)
        logger.info("BitSyncService initialized. Chunk storage is at: %s", self.chunk_storage_path)

    def are_all_chunks_local(self, manifest: dict) -> bool:
        if not manifest or 'chunk_hashes' not in manifest:
            return False
        
        content_hash = manifest.get('content_hash')
        num_chunks = len(manifest.get('chunk_hashes', []))
        
        for i in range(num_chunks):
            chunk_path = self.get_chunk_path(content_hash, i)
            if not os.path.exists(chunk_path):
                return False
        
        return True

    def _load_local_private_key(self):
        try:
            local_instance = TrustedInstance.objects.get(encrypted_private_key__isnull=False, is_trusted_peer=False)
            if local_instance.encrypted_private_key:
                key = base64.urlsafe_b64encode(settings.SECRET_KEY.encode()[:32])
                f = Fernet(key)
                decrypted_pem = f.decrypt(local_instance.encrypted_private_key.encode())
                return serialization.load_pem_private_key(decrypted_pem, password=None)
        except Exception as e:
            logger.error(f"Failed to load or decrypt local private key: {e}")
        
        return None

    def get_decrypted_aes_key(self, manifest: dict):
        private_key = self._load_local_private_key()
        if not private_key:
            raise ValueError("Could not load local private key to decrypt manifest.")

        local_instance_pubkey = private_key.public_key().public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        ).decode('utf-8')
        
        local_checksum = generate_checksum(local_instance_pubkey)
        encrypted_aes_key_b64 = manifest['encrypted_aes_keys'].get(local_checksum)

        if not encrypted_aes_key_b64:
            raise ValueError("Manifest does not contain an encryption envelope for the local instance.")

        encrypted_aes_key = base64.b64decode(encrypted_aes_key_b64)
        return private_key.decrypt(
            encrypted_aes_key,
            rsa_padding.OAEP(mgf=rsa_padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
        )

    def rekey_manifest_for_new_peers(self, manifest: dict):
        original_aes_key = self.get_decrypted_aes_key(manifest)
        if not original_aes_key:
            raise ValueError("Failed to obtain original AES key from manifest.")

        all_peers = TrustedInstance.objects.filter(is_trusted_peer=True)
        existing_checksums = manifest['encrypted_aes_keys'].keys()
        
        updated = False
        for peer in all_peers:
            peer_checksum = generate_checksum(peer.pubkey)
            if peer_checksum not in existing_checksums:
                try:
                    logger.info(f"Adding new envelope for peer: {peer.web_ui_onion_url}")
                    peer_pubkey_obj = serialization.load_pem_public_key(peer.pubkey.encode())
                    encrypted_key = peer_pubkey_obj.encrypt(
                        original_aes_key,
                        rsa_padding.OAEP(mgf=rsa_padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
                    )
                    manifest['encrypted_aes_keys'][peer_checksum] = base64.b64encode(encrypted_key).decode('utf-8')
                    updated = True
                except Exception as e:
                    logger.error(f"Failed to create new envelope for peer {peer.web_ui_onion_url}: {e}")
        
        if not updated:
            logger.info("No new peers found to add to the manifest.")
        
        return manifest

    def create_encrypted_content(self, data: Dict[str, Any], recipients_pubkeys: Optional[List[str]] = None, b_b_s_instance_pubkeys: Optional[List[str]] = None) -> (str, Dict[str, Any]):
        raw_data = json.dumps(data, sort_keys=True).encode('utf-8')
        content_hash = hashlib.sha256(raw_data).hexdigest()
        
        aes_key = os.urandom(32)
        iv = os.urandom(16)
        cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv))
        padder = padding.PKCS7(algorithms.AES.block_size).padder()
        padded_data = padder.update(raw_data) + padder.finalize()
        encryptor = cipher.encryptor()
        encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
        
        chunks = [encrypted_data[i:i + CHUNK_SIZE] for i in range(0, len(encrypted_data), CHUNK_SIZE)]
        chunk_hashes = [hashlib.sha256(chunk).hexdigest() for chunk in chunks]
        
        content_chunk_dir = os.path.join(self.chunk_storage_path, content_hash)
        os.makedirs(content_chunk_dir, exist_ok=True)
        for i, chunk in enumerate(chunks):
            with open(os.path.join(content_chunk_dir, f"{i}.chunk"), 'wb') as f:
                f.write(chunk)
        
        encrypted_aes_keys = {}
        pubkeys_to_encrypt_for = set()

        if b_b_s_instance_pubkeys:
            for pkey in b_b_s_instance_pubkeys:
                pubkeys_to_encrypt_for.add(pkey)
        elif recipients_pubkeys:
            local_instance = TrustedInstance.objects.filter(encrypted_private_key__isnull=False, is_trusted_peer=False).first()
            if local_instance and local_instance.pubkey:
                pubkeys_to_encrypt_for.add(local_instance.pubkey)
            for pkey in recipients_pubkeys:
                pubkeys_to_encrypt_for.add(pkey)
        else:
            # For public content, encrypt for all trusted peers AND self.
            all_instances = TrustedInstance.objects.all()
            for instance in all_instances:
                if instance.pubkey:
                    pubkeys_to_encrypt_for.add(instance.pubkey)
        
        logger.info(f"Creating manifest for {len(pubkeys_to_encrypt_for)} total instance(s).")
        for pubkey_pem in pubkeys_to_encrypt_for:
            try:
                peer_pubkey_obj = serialization.load_pem_public_key(pubkey_pem.encode())
                encrypted_key = peer_pubkey_obj.encrypt(
                    aes_key,
                    rsa_padding.OAEP(mgf=rsa_padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
                )
                instance_checksum = generate_checksum(pubkey_pem)
                encrypted_aes_keys[instance_checksum] = base64.b64encode(encrypted_key).decode('utf-8')
            except Exception as e:
                logger.error(f"Failed to encrypt AES key for pubkey with checksum {generate_checksum(pubkey_pem)}: {e}")
        
        manifest = {
            "content_hash": content_hash,
            "chunk_size": CHUNK_SIZE,
            "chunk_hashes": chunk_hashes,
            "encryption_iv": base64.b64encode(iv).decode('utf-8'),
            "encrypted_aes_keys": encrypted_aes_keys,
        }
        return content_hash, manifest

    def get_chunk_path(self, content_hash: str, chunk_index: int) -> str:
        return os.path.join(self.chunk_storage_path, content_hash, f"{chunk_index}.chunk")

```

### File: axon_bbs/core/services/content_validator.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/services/content_validator.py
import magic
import logging
from core.models import ValidFileType

logger = logging.getLogger(__name__)

def is_file_type_valid(file_data: bytes) -> bool:
    """
    Checks the magic numbers of file data against a list of valid MIME types.

    :param file_data: The raw bytes of the decrypted file.
    :return: True if the file type is in the allowed list, False otherwise.
    """
    try:
        # Get the list of allowed MIME types from the database.
        allowed_mime_types = ValidFileType.objects.filter(is_enabled=True).values_list('mime_type', flat=True)
        
        if not allowed_mime_types:
            logger.warning("No valid file types are configured in the admin panel. Allowing all files by default.")
            return True

        # Detect the MIME type from the file's magic numbers.
        detected_mime_type = magic.from_buffer(file_data, mime=True)
        
        logger.info(f"Detected file MIME type: {detected_mime_type}")

        # Check if the detected type is in the allowed list.
        if detected_mime_type in allowed_mime_types:
            logger.info(f"File type '{detected_mime_type}' is valid.")
            return True
        else:
            logger.warning(f"Validation FAILED: File type '{detected_mime_type}' is not in the list of allowed types.")
            return False

    except Exception as e:
        logger.error(f"An error occurred during file type validation: {e}", exc_info=True)
        # Fail-safe: If an error occurs, block the file.
        return False

```

### File: axon_bbs/core/services/encryption_utils.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/services/encryption_utils.py
import os
import logging
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64
import hashlib
from cryptography.hazmat.primitives.serialization import load_pem_public_key
from cryptography.hazmat.primitives.asymmetric import padding as rsa_padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.padding import PKCS7
from cryptography.hazmat.primitives.serialization import load_pem_private_key
from cryptography.hazmat.primitives.serialization import Encoding, PublicFormat

logger = logging.getLogger(__name__)

def generate_salt(size: int = 16) -> bytes:
    """Generates a cryptographically secure salt."""
    return os.urandom(size)

def derive_key_from_password(password: str, salt: bytes, iterations: int = 100000) -> bytes:
    """Derives a secure encryption key from a user's password and a salt."""
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=iterations,
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))

def encrypt_data(data: str, key: bytes) -> bytes:
    """Encrypts a string using a Fernet key."""
    f = Fernet(key)
    return f.encrypt(data.encode())

def decrypt_data(encrypted_data: bytes, key: bytes) -> str:
    """Decrypts data using a Fernet key."""
    f = Fernet(key)
    decrypted_bytes = f.decrypt(encrypted_data)
    return decrypted_bytes.decode()

def encrypt_with_public_key(data: str, public_key_pem: str) -> str:
    """Encrypts a string with an RSA public key and returns a base64 encoded string."""
    public_key = load_pem_public_key(public_key_pem.encode())
    ciphertext = public_key.encrypt(
        data.encode('utf-8'),
        rsa_padding.OAEP(
            mgf=rsa_padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return base64.b64encode(ciphertext).decode('utf-8')

def decrypt_with_private_key(encrypted_data_b64: str, private_key_pem: str) -> str:
    """Decrypts a base64 encoded string with an RSA private key."""
    private_key = load_pem_private_key(private_key_pem.encode(), password=None)
    encrypted_data = base64.b64decode(encrypted_data_b64)
    plaintext = private_key.decrypt(
        encrypted_data,
        rsa_padding.OAEP(
            mgf=rsa_padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return plaintext.decode('utf-8')

def generate_short_id(pubkey_pem: str, length: int = 16) -> str:
    """Generates a semi-unique short ID from a public key PEM string."""
    hash_obj = hashlib.sha256(pubkey_pem.encode())
    return hash_obj.hexdigest()[:length]

def generate_checksum(data_string: str) -> str:
    """Generates an MD5 checksum for a given string, normalizing if it's a public key."""
    if not data_string:
        return "None"
    try:
        # Attempt to normalize if it's a public key
        pubkey_obj = load_pem_public_key(data_string.encode())
        normalized_data = pubkey_obj.public_bytes(
            encoding=Encoding.PEM,
            format=PublicFormat.SubjectPublicKeyInfo
        ).decode('utf-8').strip().encode('utf-8')
    except Exception:
        # For non-keys, just strip whitespace
        normalized_data = data_string.strip().encode('utf-8')
    
    return hashlib.md5(normalized_data).hexdigest()

def encrypt_for_recipients_only(message: str, pubkeys: list):
    """
    Encrypts a message with a session key, then encrypts the session key
    for a list of recipient public keys. Returns the encrypted message
    and the list of encrypted session keys.
    """
    aes_key = os.urandom(32)
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv))
    padder = PKCS7(algorithms.AES.block_size).padder()
    padded_data = padder.update(message.encode('utf-8')) + padder.finalize()
    encryptor = cipher.encryptor()
    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()

    encrypted_keys = {}
    for pubkey_pem in pubkeys:
        try:
            pubkey_obj = serialization.load_pem_public_key(pubkey_pem.encode())
            encrypted_key = pubkey_obj.encrypt(
                aes_key,
                rsa_padding.OAEP(mgf=rsa_padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
            )
            checksum = generate_checksum(pubkey_pem)
            encrypted_keys[checksum] = base64.b64encode(encrypted_key).decode('utf-8')
        except Exception as e:
            logger.error(f"Failed to encrypt session key for pubkey with checksum {generate_checksum(pubkey_pem)}: {e}")

    return encrypted_data, {
        "encryption_iv": base64.b64encode(iv).decode('utf-8'),
        "encrypted_aes_keys": encrypted_keys,
    }

def decrypt_for_recipients_only(e2e_content: bytes, e2e_manifest: dict, private_key_pem: str) -> str | None:
    """
    Decrypts the E2E content using a key from the metadata manifest.
    
    Args:
        e2e_content (bytes): The raw, E2E encrypted message content.
        e2e_manifest (dict): The manifest containing the encrypted session keys.
        private_key_pem (str): The user's private key to decrypt the session key.
    
    Returns:
        str: The decrypted message content as a string, or None on failure.
    """
    try:
        private_key = load_pem_private_key(private_key_pem.encode(), password=None)
        public_key = private_key.public_key()
        user_checksum = generate_checksum(public_key.public_bytes(
            encoding=Encoding.PEM, format=PublicFormat.SubjectPublicKeyInfo
        ).decode('utf-8'))
        
        encrypted_aes_key_b64 = e2e_manifest['encrypted_aes_keys'].get(user_checksum)

        if not encrypted_aes_key_b64:
            logger.warning("Could not find an encryption envelope for this user's key in the E2E manifest.")
            return None
        
        encrypted_aes_key = base64.b64decode(encrypted_aes_key_b64)
        aes_key = private_key.decrypt(
            encrypted_aes_key,
            rsa_padding.OAEP(mgf=rsa_padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
        )
        
        iv = base64.b64decode(e2e_manifest['encryption_iv'])
        cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv))
        decryptor = cipher.decryptor()
        padded_data = decryptor.update(e2e_content) + decryptor.finalize()
        unpadder = PKCS7(algorithms.AES.block_size).unpadder()
        decrypted_data = unpadder.update(padded_data) + unpadder.finalize()
        
        return decrypted_data.decode('utf-8')
    
    except Exception as e:
        logger.error(f"Failed to decrypt E2E content: {e}", exc_info=True)
        return None

```

### File: axon_bbs/core/services/high_score_service.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/services/high_score_service.py
import threading
import time
import logging
import json
from django.db import transaction
from core.models import AppletData, HighScore, Applet

logger = logging.getLogger(__name__)

class HighScoreService:
    def __init__(self, poll_interval=300): # Poll every 5 minutes
        self.poll_interval = poll_interval
        self.thread = threading.Thread(target=self._run, daemon=True)

    def start(self):
        self.thread.start()
        logger.info("High Score Service thread started.")

    def _run(self):
        time.sleep(60) # Initial delay before first run
        while True:
            try:
                self.process_scores()
            except Exception as e:
                logger.error(f"Error in high score service poll loop: {e}", exc_info=True)
            
            time.sleep(self.poll_interval)
    
    def process_scores(self):
        from .service_manager import service_manager
        logger.info("Starting high score processing run...")

        game_applet_data = AppletData.objects.filter(applet__category__name__iexact='Game')
        
        if not game_applet_data.exists():
            logger.info("No game applet data found to process.")
            return

        processed_count = 0
        with transaction.atomic():
            for data_instance in game_applet_data:
                try:
                    manifest = data_instance.data_manifest
                    decrypted_bytes = service_manager.sync_service.get_decrypted_content(manifest)
                    
                    if not decrypted_bytes:
                        continue

                    content = json.loads(decrypted_bytes.decode('utf-8'))
                    applet_saved_data = content.get('data', {})

                    if isinstance(applet_saved_data, dict) and 'score' in applet_saved_data:
                        owner_pubkey = content.get('owner_pubkey')
                        owner_nickname = data_instance.owner.nickname if data_instance.owner and data_instance.owner.nickname else f"user-{owner_pubkey[:8]}"

                        # UPDATED: Extract all stats, allowing for missing (None) values
                        stats_to_save = {
                            'score': int(applet_saved_data['score']),
                            'wins': applet_saved_data.get('wins'),
                            'losses': applet_saved_data.get('losses'),
                            'kills': applet_saved_data.get('kills'),
                            'deaths': applet_saved_data.get('deaths'),
                            'assists': applet_saved_data.get('assists'),
                            'owner_nickname': owner_nickname,
                            'last_updated': data_instance.last_updated
                        }
                        
                        # Filter out None values so they are stored as NULL in the db
                        defaults = {k: v for k, v in stats_to_save.items() if v is not None}

                        HighScore.objects.update_or_create(
                            applet=data_instance.applet,
                            owner_pubkey=owner_pubkey,
                            defaults=defaults
                        )
                        processed_count += 1

                except (ValueError, TypeError, json.JSONDecodeError) as e:
                    logger.warning(f"Could not process score for data instance {data_instance.id}: {e}")
                except Exception as e:
                    logger.error(f"Unexpected error processing score for {data_instance.id}: {e}", exc_info=True)
        
        logger.info(f"High score processing run complete. Updated or created {processed_count} scores.")

```

### File: axon_bbs/core/services/identity_service.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/services/identity_service.py
import json
import os
import logging
from typing import Dict, Any, List, Optional
import uuid
from datetime import datetime
from .encryption_utils import derive_key_from_password, generate_salt
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.fernet import Fernet, InvalidToken
from django.conf import settings

logger = logging.getLogger(__name__)

class DecryptionError(Exception):
    """Raised when a file cannot be decrypted, likely due to a wrong password/key."""
    pass

class IdentityService:
    def __init__(self, user):
        self.user = user
        self.user_data_dir = os.path.join(settings.BASE_DIR, 'data', 'user_data', self.user.username)
        self.identity_storage_path = os.path.join(self.user_data_dir, 'identities.dat')
        self.manifest_path = os.path.join(self.user_data_dir, 'identity_key_manifest.json')
        os.makedirs(self.user_data_dir, exist_ok=True)

    def _encrypt_identities(self, identities_json: str, master_aes_key: bytes) -> bytes:
        f = Fernet(master_aes_key)
        return f.encrypt(identities_json.encode())

    def _decrypt_identities(self, encrypted_data: bytes, master_aes_key: bytes) -> str:
        f = Fernet(master_aes_key)
        return f.decrypt(encrypted_data).decode()

    def get_master_key_from_password(self, password: str) -> Optional[bytes]:
        """Attempt to get the master AES key using the main password."""
        try:
            with open(self.manifest_path, 'r') as f:
                manifest = json.load(f)
            
            salt = bytes.fromhex(manifest['password_salt'])
            derived_key = derive_key_from_password(password, salt)
            
            f = Fernet(derived_key)
            master_aes_key = f.decrypt(bytes.fromhex(manifest['envelopes']['password']))
            return master_aes_key
        except (FileNotFoundError, KeyError, InvalidToken) as e:
            logger.warning(f"Failed to get master key with password for {self.user.username}: {e}")
            raise DecryptionError("Invalid password.")
        except Exception as e:
            logger.error(f"An unexpected error occurred getting master key for {self.user.username}: {e}")
            return None

    def generate_identity_with_manifest(self, password, sq1, sa1, sq2, sa2):
        """Generates a new identity and a recovery manifest for a new user."""
        private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
        public_key_pem = private_key.public_key().public_bytes(encoding=serialization.Encoding.PEM, format=serialization.PublicFormat.SubjectPublicKeyInfo).decode('utf-8')
        private_key_pem = private_key.private_bytes(encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.TraditionalOpenSSL, encryption_algorithm=serialization.NoEncryption()).decode('utf-8')
        
        identity = {
            "id": str(uuid.uuid4()), "name": "default", "type": "rsa",
            "public_key": public_key_pem, "private_key": private_key_pem,
            "created_at": datetime.now().isoformat()
        }
        identities_json = json.dumps([identity])

        master_aes_key = Fernet.generate_key()

        password_salt = generate_salt()
        password_derived_key = derive_key_from_password(password, password_salt)
        password_envelope = Fernet(password_derived_key).encrypt(master_aes_key)

        sq1_derived_key = derive_key_from_password(sa1, sq1.encode('utf-8'))
        sq1_envelope = Fernet(sq1_derived_key).encrypt(master_aes_key)

        sq2_derived_key = derive_key_from_password(sa2, sq2.encode('utf-8'))
        sq2_envelope = Fernet(sq2_derived_key).encrypt(master_aes_key)

        manifest = {
            "password_salt": password_salt.hex(),
            "security_question_1": sq1,
            "security_question_2": sq2,
            "envelopes": {
                "password": password_envelope.hex(),
                "sq1": sq1_envelope.hex(),
                "sq2": sq2_envelope.hex()
            }
        }
        with open(self.manifest_path, 'w') as f:
            json.dump(manifest, f, indent=2)

        encrypted_identities = self._encrypt_identities(identities_json, master_aes_key)
        with open(self.identity_storage_path, 'wb') as f:
            f.write(encrypted_identities)
            
        return identity

    def create_storage_from_key(self, password: str, private_key_pem: str):
        """
        Creates and encrypts the identity files for a claimed account,
        using the user's provided private key and new password. This does not create security questions.
        """
        identity = {
            "id": str(uuid.uuid4()), "name": "default", "type": "rsa",
            "public_key": self.user.pubkey, "private_key": private_key_pem,
            "created_at": datetime.now().isoformat()
        }
        identities_json = json.dumps([identity])

        master_aes_key = Fernet.generate_key()
        password_salt = generate_salt()
        password_derived_key = derive_key_from_password(password, password_salt)
        password_envelope = Fernet(password_derived_key).encrypt(master_aes_key)

        # Create a manifest without security questions for now
        manifest = {
            "password_salt": password_salt.hex(),
            "security_question_1": None,
            "security_question_2": None,
            "envelopes": {
                "password": password_envelope.hex()
            }
        }
        with open(self.manifest_path, 'w') as f:
            json.dump(manifest, f, indent=2)
        
        encrypted_identities = self._encrypt_identities(identities_json, master_aes_key)
        with open(self.identity_storage_path, 'wb') as f:
            f.write(encrypted_identities)
        
        logger.info(f"Identity storage created for claimed account: {self.user.username}")

    def get_unlocked_private_key(self, password: str) -> Optional[str]:
        """Gets the decrypted private key using the main password."""
        master_key = self.get_master_key_from_password(password)
        if not master_key:
            return None
        
        try:
            with open(self.identity_storage_path, 'rb') as f:
                encrypted_data = f.read()
            
            decrypted_json = self._decrypt_identities(encrypted_data, master_key)
            identities = json.loads(decrypted_json)
            return identities[0].get('private_key')
        except Exception as e:
            logger.error(f"Failed to get unlocked private key for {self.user.username}: {e}")
            return None

    def get_security_questions(self) -> Optional[Dict[str, str]]:
        """Reads the manifest and returns the user's security questions."""
        try:
            with open(self.manifest_path, 'r') as f:
                manifest = json.load(f)
            return {
                "security_question_1": manifest.get("security_question_1"),
                "security_question_2": manifest.get("security_question_2"),
            }
        except (FileNotFoundError, KeyError):
            return None

    # --- MODIFICATION START ---
    def recover_identity_with_answers(self, sa1, sa2, new_password, use_password=False):
        """
        Attempts to recover the master key and resets the password envelope.
        Can be used for password change (use_password=True) or security question recovery.
        """
        try:
            with open(self.manifest_path, 'r') as f:
                manifest = json.load(f)
            
            master_aes_key = None

            if use_password:
                # For a password change, sa1 will contain the old password
                master_aes_key = self.get_master_key_from_password(sa1)
            else:
                # For security question recovery
                sq1 = manifest['security_question_1']
                sq2 = manifest['security_question_2']

                sq1_derived_key = derive_key_from_password(sa1, sq1.encode('utf-8'))
                master_key_1 = Fernet(sq1_derived_key).decrypt(bytes.fromhex(manifest['envelopes']['sq1']))

                sq2_derived_key = derive_key_from_password(sa2, sq2.encode('utf-8'))
                master_key_2 = Fernet(sq2_derived_key).decrypt(bytes.fromhex(manifest['envelopes']['sq2']))

                if master_key_1 != master_key_2:
                    raise DecryptionError("Recovery key mismatch.")
                master_aes_key = master_key_1

            if not master_aes_key:
                return False

            # Success! Now, create a new password envelope with the new password
            new_password_salt = generate_salt()
            new_password_derived_key = derive_key_from_password(new_password, new_password_salt)
            new_password_envelope = Fernet(new_password_derived_key).encrypt(master_aes_key)

            # Update the manifest with the new password salt and envelope
            manifest['password_salt'] = new_password_salt.hex()
            manifest['envelopes']['password'] = new_password_envelope.hex()

            with open(self.manifest_path, 'w') as f:
                json.dump(manifest, f, indent=2)
            
            return True
        except (InvalidToken, DecryptionError):
            logger.warning(f"Failed recovery/re-key attempt for {self.user.username}.")
            return False
        except Exception as e:
            logger.error(f"Unexpected error during recovery/re-key for {self.user.username}: {e}")
            return False
    # --- MODIFICATION END ---

    def reset_security_questions(self, password: str, sq1: str, sa1: str, sq2: str, sa2: str) -> bool:
        """
        Uses the user's current password to get the master key, then creates new
        security question envelopes.
        """
        try:
            # Step 1: Get the master key using the current password
            master_aes_key = self.get_master_key_from_password(password)
            if not master_aes_key:
                return False

            # Step 2: Load the existing manifest
            with open(self.manifest_path, 'r') as f:
                manifest = json.load(f)

            # Step 3: Create new envelopes for the new questions/answers
            sq1_derived_key = derive_key_from_password(sa1, sq1.encode('utf-8'))
            sq1_envelope = Fernet(sq1_derived_key).encrypt(master_aes_key)

            sq2_derived_key = derive_key_from_password(sa2, sq2.encode('utf-8'))
            sq2_envelope = Fernet(sq2_derived_key).encrypt(master_aes_key)

            # Step 4: Update the manifest
            manifest['security_question_1'] = sq1
            manifest['security_question_2'] = sq2
            manifest['envelopes']['sq1'] = sq1_envelope.hex()
            manifest['envelopes']['sq2'] = sq2_envelope.hex()

            # Step 5: Save the updated manifest
            with open(self.manifest_path, 'w') as f:
                json.dump(manifest, f, indent=2)

            return True

        except DecryptionError:
            # This will be raised by get_master_key_from_password if the password is wrong
            logger.warning(f"Failed to reset security questions for {self.user.username}: incorrect password provided.")
            return False
        except Exception as e:
            logger.error(f"Unexpected error resetting security questions for {self.user.username}: {e}")
            return False

```

### File: axon_bbs/core/services/moderator_agent_service.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;
# without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/services/moderator_agent_service.py
import threading
import time
import logging
import json
from django.utils import timezone
from datetime import timedelta

from core.models import User, Message, MessageBoard, ModerationReport, FederatedAction, TrustedInstance, BannedPubkey
from .bitsync_service import BitSyncService

logger = logging.getLogger(__name__)

class ModeratorAgentService:
    def __init__(self, poll_interval=60):
        self.poll_interval = poll_interval
        self.shutdown_event = threading.Event()
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.agent_username = "moderator_agent"
        self.log_board_name = "Moderation"
        self.agent_user = None
        self.log_board = None
        self.is_initialized = False
        self.bitsync_service = BitSyncService()
        self.host_pubkey = None

    def start(self):
        self.thread.start()
        logger.info("Moderator Agent Service thread started.")

    def stop(self):
        self.shutdown_event.set()

    def _initialize_agent(self):
        try:
            self.agent_user = User.objects.get(username=self.agent_username, is_agent=True)
            self.log_board, _ = MessageBoard.objects.get_or_create(name=self.log_board_name)
            
            local_instance = TrustedInstance.objects.filter(is_trusted_peer=False).first()
            if local_instance:
                self.host_pubkey = local_instance.pubkey

            self.is_initialized = True
            logger.info(f"Moderator Agent '{self.agent_username}' initialized. Logging to board '{self.log_board_name}'.")
            return True
        except (User.DoesNotExist, TrustedInstance.DoesNotExist) as e:
            logger.warning(f"Moderator Agent cannot initialize yet: {e}")
            return False

    def _run(self):
        time.sleep(15) # Wait for server to be fully ready
        while not self.shutdown_event.is_set():
            if not self.is_initialized:
                self._initialize_agent()
            
            if self.is_initialized:
                try:
                    self.process_completed_reports()
                    self.process_federated_actions()
                    self.process_incoming_logs()
                except Exception as e:
                    logger.error(f"Error in Moderator Agent loop: {e}", exc_info=True)

            self.shutdown_event.wait(self.poll_interval)

    def process_incoming_logs(self):
        """Reads the moderation board for events from other agents and applies them locally."""
        incoming_logs = Message.objects.filter(
            board=self.log_board,
            agent_status='pending'
        ).exclude(author=self.agent_user)

        for log_message in incoming_logs:
            try:
                log_data = json.loads(log_message.body)
                details = log_data.get('details', {})
                
                if log_data.get('log_type') == 'FEDERATED_ACTION':
                    action_type = details.get('action_type')
                    
                    if action_type == 'ban_pubkey':
                        pubkey = details.get('target_pubkey')
                        if pubkey:
                            action_details = details.get('action_details', {})
                            is_temporary = action_details.get('is_temporary', False)
                            duration = action_details.get('duration_hours')
                            expires_at = None
                
                            if is_temporary and duration:
                                expires_at = timezone.now() + timedelta(hours=int(duration))
                            
                            BannedPubkey.objects.update_or_create(
                                pubkey=pubkey,
                                defaults={'is_temporary': is_temporary, 'expires_at': expires_at}
                            )
                            logger.info(f"Applied federated ban for pubkey: {pubkey[:12]}...")

                    elif action_type == 'DELETE_CONTENT':
                        content_hash = details.get('target_hash')
                        if content_hash:
                            Message.objects.filter(metadata_manifest__content_hash=content_hash).delete()
                            logger.info(f"Applied federated delete for content hash: {content_hash[:12]}...")

                log_message.agent_status = 'processed'
            except json.JSONDecodeError:
                logger.warning(f"Moderator agent could not parse incoming log message body (ID: {log_message.id})")
                log_message.agent_status = 'failed'
            except Exception as e:
                logger.error(f"Error processing incoming log (ID: {log_message.id}): {e}", exc_info=True)
                log_message.agent_status = 'failed'
            
            log_message.save()

    def process_completed_reports(self):
        """Finds local moderation reports that have been approved/rejected and logs them."""
        reports_to_log = ModerationReport.objects.filter(is_logged=False).exclude(status='pending')
        for report in reports_to_log:
            moderator = report.reviewed_by
            timestamp_to_log = report.reviewed_at if report.reviewed_at else timezone.now()
            
            # --- START FIX ---
            # Add checks to ensure `report.reported_message` exists before trying to access its attributes.
            log_entry = {
                "log_type": "REPORT_REVIEWED",
                "moderator_nickname": moderator.nickname if moderator else "System",
                "moderator_bbs_pubkey": self.host_pubkey,
                "timestamp": timestamp_to_log.isoformat(),
                "details": {
                    "report_id": report.id,
                    "reporter_nickname": report.reporting_user.nickname,
                    "decision": report.status,
                    "target_message_subject": report.reported_message.subject if report.reported_message else "[Message Deleted]",
                    "target_message_hash": report.reported_message.metadata_manifest.get('content_hash') if report.reported_message and report.reported_message.metadata_manifest else "N/A"
                }
            }
            # --- END FIX ---
            self._post_log_entry(f"Report Reviewed: {report.id}", log_entry)
            report.is_logged = True
            report.save()

    def process_federated_actions(self):
        """Finds local federated actions (like bans) and logs them."""
        actions_to_log = FederatedAction.objects.filter(is_logged=False, status='approved', created_at__isnull=False)
        for action in actions_to_log:
            log_entry = {
                "log_type": "FEDERATED_ACTION",
                "moderator_bbs_pubkey": self.host_pubkey,
                "timestamp": action.created_at.isoformat(),
                "details": {
                    "action_id": str(action.id),
                    "action_type": action.action_type,
                    "target_pubkey": action.pubkey_target,
                    "target_hash": action.content_hash_target,
                    "action_details": action.action_details
                }
            }
            self._post_log_entry(f"Federated Action: {action.action_type}", log_entry)
            action.is_logged = True
            action.save()

    def _post_log_entry(self, subject, body_data):
        if not self.agent_user or not self.log_board:
            return

        body_json = json.dumps(body_data, indent=2)
        content_to_encrypt = {
            "type": "message",
            "subject": subject,
            "body": body_json,
            "board": self.log_board.name,
            "pubkey": self.agent_user.pubkey
        }
        
        _content_hash, manifest = self.bitsync_service.create_encrypted_content(content_to_encrypt)

        Message.objects.create(
            board=self.log_board,
            author=self.agent_user,
            pubkey=self.agent_user.pubkey,
            subject=subject,
            body=body_json,
            metadata_manifest=manifest, # <-- FIX: Changed 'manifest' to 'metadata_manifest'
            agent_status='processed' # The agent's own logs are pre-processed
        )
        logger.info(f"Moderator Agent logged event: {subject}")

```

### File: axon_bbs/core/services/overlord_agent_service.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/services/overlord_agent_service.py
import threading
import time
import logging
import json
import random
import requests
import uuid
import math
from django.db import transaction
from django.db.models import Q
from core.models import Message, Applet, AppletData, User, AppletSharedState, TrustedInstance
from .service_manager import service_manager
from .bitsync_service import BitSyncService

logger = logging.getLogger(__name__)

# --- GAME CONFIGURATION ---
GAME_CONFIG = {
    "pvp_enabled": False,
    "buildings": {
        "Greenhouse": {"name": "Greenhouse", "cost": {"crystals": 75, "alloy": 25}, "build_time": 3},
        "Crystal Mine": {"name": "Crystal Mine", "cost": {"crystals": 100, "alloy": 0}, "build_time": 2},
        "Forge/Smelter": {"name": "Forge/Smelter", "cost": {"crystals": 150, "alloy": 50}, "build_time": 4, "consumes": {"rawOre": 5}, "produces": {"crystals": 2}},
        "Command Center": {"comm_range": 200},
    },
    "drones": {
        "Scout": {"cargo_capacity": 20, "harvest_rate": 5, "speed": 20} # Speed in units per tick
    },
    "world_tick": {
        "interval_seconds": 30,
        "npc_marauder_chance": 0.15
    }
}

class OverlordAgentService:
    def __init__(self, poll_interval=15, reconciliation_interval=300):
        self.poll_interval = poll_interval
        self.reconciliation_interval = reconciliation_interval
        self.world_tick_interval = GAME_CONFIG["world_tick"]["interval_seconds"]
        self.shutdown_event = threading.Event()
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.last_reconciliation_time = 0
        self.last_world_tick_time = 0
        self.game_applet_name = "Fortress Overlord"
        self.agent_username = "overlord_agent" 
        self.agent_user = None
        self.game_board = None
        self.game_applet = None
        # --- ADDED: A flag to track initialization ---
        self.is_initialized = False
        self.bitsync_service = BitSyncService()
        self.sync_service = service_manager.sync_service

    def start(self):
        self.thread.start()
        logger.info("Overlord Agent Service thread started.")

    def stop(self):
        logger.info(f"Stopping agent service for {self.agent_username}...")
        self.shutdown_event.set()

    def _initialize_agent(self):
        try:
            self.agent_user = User.objects.get(username=self.agent_username, is_agent=True)
            self.game_applet = Applet.objects.get(name=self.game_applet_name)
            self.game_board = self.game_applet.event_board
            if not self.game_board:
                logger.warning(f"Agent '{self.agent_username}' cannot initialize: Game board not set for applet '{self.game_applet_name}'.")
                return False
            logger.info(f"Agent '{self.agent_user.username}' is monitoring board '{self.game_board.name}'.")
            # --- ADDED: Set flag on success ---
            self.is_initialized = True
            return True
        except (User.DoesNotExist, Applet.DoesNotExist):
            logger.warning(f"Agent '{self.agent_username}' cannot initialize yet: User or Applet not found in database.")
            return False

    # --- MODIFIED: _run method is now more resilient ---
    def _run(self):
        time.sleep(10) # Initial delay for Django to start up

        while not self.shutdown_event.is_set():
            try:
                # If initialization failed before, try again
                if not self.is_initialized:
                    if not self._initialize_agent():
                        # If it fails again, wait for the next poll interval before retrying
                        self.shutdown_event.wait(self.poll_interval)
                        continue

                # If initialization is successful, run the main logic
                current_time = time.time()
                self.process_game_events()
                if current_time - self.last_world_tick_time > self.world_tick_interval:
                    self.perform_world_tick()
                    self.last_world_tick_time = current_time
            except Exception as e:
                logger.error(f"Error in Overlord agent loop: {e}", exc_info=True)
            
            self.shutdown_event.wait(self.poll_interval)
        
        logger.info(f"Agent service for {self.agent_username} has shut down gracefully.")

    def process_game_events(self):
        action_posts = Message.objects.filter(board=self.game_board, agent_status='pending').order_by('created_at')
        if not action_posts.exists(): return
        
        for post in action_posts:
            author = post.author
            player_data = self._get_player_data(author) if author else None
            if not player_data:
                post.agent_status = 'failed'
                post.save()
                continue

            try:
                try:
                    body = json.loads(post.body)
                except json.JSONDecodeError:
                    logger.warning(f"Agent skipping non-JSON message (ID: {post.id}) with subject '{post.subject}'.")
                    post.agent_status = 'processed' 
                    post.save()
                    continue
                
                command = post.subject.upper()
                drone_id = body.get('droneId')
                drone = next((d for d in player_data.get('drones', []) if d.get('id') == drone_id), None)

                if drone and not drone.get('is_in_comms_range', True):
                    self._post_agent_event("CMD_FAILED", {"summary": f"Cannot issue new command to {drone_id}: Drone is out of communication range."})
                    post.agent_status = 'processed'
                    post.save()
                    continue

                if command == "BUILD": self.handle_build(author, player_data, body)
                elif command == "ASSIGN_TASK": self.handle_assign_task(author, player_data, body)
                elif command == "CANCEL_TASK": self.handle_cancel_task(author, player_data, body)
                elif command == "STOP_TASK": self.handle_stop_task(author, player_data, body)
                
                post.agent_status = 'processed'
            except Exception as e:
                logger.error(f"Error processing event '{post.subject}': {e}", exc_info=True)
                post.agent_status = 'failed'
            
            post.save()

    def handle_build(self, author, player_data, body):
        building_type = body.get('buildingType')
        coords = body.get('coords')
        if not building_type or not coords:
            return

        build_info = GAME_CONFIG['buildings'].get(building_type)
        if not build_info:
            return

        player_resources = player_data.get('resources', {})
        can_afford = True
        for resource, cost in build_info['cost'].items():
            if player_resources.get(resource, 0) < cost:
                can_afford = False
                break
        
        if not can_afford:
            self._post_agent_event("BUILD_FAILED", {"summary": f"Insufficient resources for {building_type}."})
            return

        for resource, cost in build_info['cost'].items():
            player_resources[resource] -= cost
        
        new_building = {
            "id": f"bldg_{uuid.uuid4().hex[:6]}",
            "type": f"{building_type} (Construction Site)",
            "x": coords['x'],
            "y": coords['y'],
            "health": 10,
            "build_progress": 0,
            "build_total": build_info['build_time']
        }
        player_data.setdefault('buildings', []).append(new_building)
        
        self._save_player_data(author, player_data)
        self._post_agent_event("BUILD_STARTED", {"summary": f"Construction of {building_type} started at ({coords['x']}, {coords['y']})."})

    def handle_assign_task(self, author, player_data, body):
        pass
        
    def handle_cancel_task(self, author, player_data, body):
        pass

    def handle_stop_task(self, author, player_data, body):
        drone_id = body.get('droneId')
        drone = next((d for d in player_data.get('drones', []) if d.get('id') == drone_id), None)
        if not drone: return
        self.handle_cancel_task(author, player_data, body)
        self._post_agent_event("TASK_HALTED", {"summary": f"Drone {drone_id} has ceased current operations."})

    def set_drone_travel_task(self, drone, target, next_status):
        pass

    def set_drone_idle(self, drone):
        pass

    def perform_world_tick(self):
        all_players = User.objects.filter(is_agent=False, applet_data__applet=self.game_applet).distinct()
        for player in all_players:
            player_data = self._get_player_data(player)
            if not player_data: continue

            command_center = next((b for b in player_data.get('buildings', []) if b.get('type') == 'Command Center'), {'x': 0, 'y': 0})
            comm_range = GAME_CONFIG['buildings']['Command Center']['comm_range']
            
            for drone in player_data.get('drones', []):
                dist_to_base = math.sqrt((drone['x'] - command_center['x'])**2 + (drone['y'] - command_center['y'])**2)
                
                was_in_range = drone.get('is_in_comms_range', True)
                is_in_range = dist_to_base <= comm_range
                drone['is_in_comms_range'] = is_in_range

                if not was_in_range and is_in_range:
                    for event in drone.get('event_buffer', []):
                        self._post_agent_event(event['subject'], event['body'])
                    drone['event_buffer'] = []
                
                self.process_drone_tick(drone, player_data)
            
            self.process_construction(player_data)
            self.process_building_production(player_data)
            self._save_player_data(player, player_data)
            
    def process_drone_tick(self, drone, player_data):
        pass
    
    def process_construction(self, player_data):
        buildings_to_complete = []
        for building in player_data.get('buildings', []):
            if " (Construction Site)" in building.get('type', ''):
                building['build_progress'] += 1
                if building['build_progress'] >= building.get('build_total', 99):
                    buildings_to_complete.append(building)
        
        for b in buildings_to_complete:
            original_type = b['type'].replace(" (Construction Site)", "")
            b['type'] = original_type
            b['health'] = 1000
            del b['build_progress']
            del b['build_total']
            
            replay_data = {
                "eventType": "CONSTRUCTION_COMPLETE",
                "buildingType": original_type,
                "location": { "x": b['x'], "y": b['y'] },
                "duration": 8000
            }
            
            self._post_agent_event(
                "CONSTRUCTION_COMPLETE", 
                {
                    "summary": f"Fortress expansion complete: {original_type} is now operational.",
                    "replayData": replay_data
                }
            )

    def process_building_production(self, player_data):
        pass

    def _get_player_data(self, user):
        try:
            player_applet_data = AppletData.objects.get(applet=self.game_applet, owner=user)
            # This call depends on the SyncService having a loaded identity
            decrypted_bytes = self.sync_service.get_decrypted_content(player_applet_data.data_manifest)
            return json.loads(decrypted_bytes.decode('utf-8')).get('data', {}) if decrypted_bytes else None
        except AppletData.DoesNotExist:
            return None

    def _save_player_data(self, user, new_data):
        try:
            content_to_encrypt = {
                "type": "applet_data", "applet_id": str(self.game_applet.id),
                "owner_pubkey": user.pubkey, "data": new_data
            }
            _content_hash, manifest = self.bitsync_service.create_encrypted_content(content_to_encrypt, recipients_pubkeys=[user.pubkey])
            AppletData.objects.update_or_create(applet=self.game_applet, owner=user, defaults={'data_manifest': manifest})
        except Exception as e:
            logger.error(f"Failed to save data for user '{user.username}': {e}", exc_info=True)

    def _post_agent_event(self, subject, body_data):
        try:
            content_to_encrypt = {
                "type": "message", "subject": subject, "body": json.dumps(body_data),
                "board": self.game_board.name, "pubkey": self.agent_user.pubkey,
            }
            _content_hash, manifest = self.bitsync_service.create_encrypted_content(content_to_encrypt)
            Message.objects.create(
                board=self.game_board, subject=subject, body=content_to_encrypt['body'],
                author=self.agent_user, pubkey=self.agent_user.pubkey, manifest=manifest, agent_status='processed'
            )
        except Exception as e:
            logger.error(f"Agent failed to post event '{subject}': {e}")

```

### File: axon_bbs/core/services/service_manager.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/services/service_manager.py
import logging
import importlib
from django.db import connection
from .bitsync_service import BitSyncService
from .tor_service import TorService
from .sync_service import SyncService
from .high_score_service import HighScoreService

logger = logging.getLogger(__name__)

class ServiceManager:
    def __init__(self):
        self.tor_service = TorService(host='127.0.0.1', port=9050)
        self.bitsync_service = None
        self.sync_service = None
        self.high_score_service = None
        self.game_agents = {}

    def initialize_services(self):
        logger.info("Initializing Tor service...")
        # self.tor_service.start()

        logger.info("Initializing BitSync service...")
        self.bitsync_service = BitSyncService()
        
        logger.info("Initializing and starting SyncService thread...")
        self.sync_service = SyncService()
        self.sync_service.start()
        
        logger.info("Initializing and starting HighScoreService thread...")
        self.high_score_service = HighScoreService()
        self.high_score_service.start()

        self.start_all_game_agents()
        
        logger.info("All services initialized.")

    def _load_and_start_agent(self, agent_user):
        """Helper function to load and start a single agent service."""
        try:
            username = agent_user.username
            module_name = f"core.services.{username}_service"
            class_name = ''.join(word.capitalize() for word in username.split('_')) + 'Service'
            
            logger.info(f"Attempting to start agent: {class_name} from {module_name}")
            
            agent_module = importlib.import_module(module_name)
            AgentClass = getattr(agent_module, class_name)
            
            agent_instance = AgentClass()
            agent_instance.start()
            self.game_agents[username] = agent_instance
            
            logger.info(f"Successfully started agent for user '{username}'.")
            return True

        except (ImportError, AttributeError):
            logger.error(f"Failed to start agent for user '{agent_user.username}'. Could not find matching service module or class.")
        except Exception as e:
            logger.error(f"An unexpected error occurred while starting agent for '{agent_user.username}': {e}", exc_info=True)
        return False

    def start_all_game_agents(self):
        from core.models import User

        try:
            if User._meta.db_table not in connection.introspection.table_names():
                logger.warning("User table not yet created. Skipping agent initialization.")
                return
        except Exception as e:
            logger.error(f"Database connection not ready, skipping agent initialization: {e}")
            return

        # --- MODIFIED: Query now checks for is_active=True as well ---
        agent_users = User.objects.filter(is_agent=True, is_active=True)
        
        if not agent_users.exists():
            logger.info("No active game agents configured to run.")
            return

        logger.info(f"Found {agent_users.count()} active game agent(s) to start...")
        for agent_user in agent_users:
            self._load_and_start_agent(agent_user)
            
    def start_agent(self, user):
        """Starts a new agent service that is not currently running."""
        if not user.is_agent or not user.is_active:
            logger.warning(f"Cannot start agent for '{user.username}': 'is_agent' or 'is_active' flag is false.")
            return False
        if user.username in self.game_agents:
            logger.warning(f"Cannot start agent for '{user.username}': Service is already running.")
            return False
        
        return self._load_and_start_agent(user)

    def stop_agent(self, username):
        """Stops a running agent service."""
        if username not in self.game_agents:
            logger.warning(f"Cannot stop agent for '{username}': Service is not running.")
            return False
        
        logger.info(f"Attempting to stop agent '{username}'...")
        agent_instance = self.game_agents.get(username)
        agent_instance.stop()
        agent_instance.thread.join(timeout=10)
        if agent_instance.thread.is_alive():
            logger.error(f"Failed to stop agent thread for '{username}' in time.")
            return False
        
        del self.game_agents[username]
        logger.info(f"Agent '{username}' stopped successfully.")
        return True

    def reload_agent(self, username):
        logger.info(f"Attempting to hot-reload agent '{username}'...")
        if username not in self.game_agents:
            logger.error(f"Cannot reload: Agent '{username}' is not currently running.")
            return False

        if self.stop_agent(username):
            from core.models import User
            try:
                user = User.objects.get(username=username)
                return self.start_agent(user)
            except User.DoesNotExist:
                logger.error(f"Cannot restart agent for '{username}': User not found.")
                return False
        return False

    def shutdown(self):
        if self.tor_service and self.tor_service.is_running():
            logger.info("Shutting down Tor service...")
            self.tor_service.stop()

service_manager = ServiceManager()

```

### File: axon_bbs/core/services/socket_utils.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/core/services/socket_utils.py
import socket

# Save a reference to the original, standard socket object before it's
# potentially patched by a library like PySocks.
original_socket_socket = socket.socket


```

### File: axon_bbs/core/services/sync_service.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/services/sync_service.py
import threading
import time
import requests
import logging
import json
import base64
import hashlib
import os
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime, timezone, timedelta
from functools import partial

from django.utils import timezone as django_timezone
from django.conf import settings
from django.core.files.base import ContentFile
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding as rsa_padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.padding import PKCS7

from core.models import TrustedInstance, Message, MessageBoard, FileAttachment, PrivateMessage, User, FederatedAction, BannedPubkey, Alias, Applet, AppletData
from core.services.encryption_utils import generate_checksum, generate_short_id, decrypt_for_recipients_only
from .avatar_generator import generate_cow_avatar

logger = logging.getLogger(__name__)

class SyncService:
    def __init__(self, poll_interval=120):
        self.poll_interval = poll_interval
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.local_instance = None
        self.private_key = None
        max_file_downloads = getattr(settings, 'BITSYNC_MAX_CONCURRENT_FILES', 3)
        self.download_executor = ThreadPoolExecutor(max_workers=max_file_downloads, thread_name_prefix='download_worker')
        self.currently_downloading = set()

    def start(self):
        self.thread.start()
        logger.info("BitSync Service thread started. Polling will begin shortly.")

    def _run(self):
        time.sleep(30)
        logger.info("SyncService polling loop is now active.")
        while True:
            try:
                self._load_identity()
                if self.local_instance and self.private_key:
                    self._resume_incomplete_downloads()
                    self.poll_peers()
                else:
                    logger.warning("Sync service cannot run without a configured local instance identity. Will check again in %s seconds.", self.poll_interval)
            except Exception as e:
                logger.error(f"Error in sync service poll loop: {e}", exc_info=True)
            
            time.sleep(self.poll_interval)
    
    def _load_identity(self):
        try:
            self.local_instance = TrustedInstance.objects.filter(
                encrypted_private_key__isnull=False,
                is_trusted_peer=False
            ).first()

            if self.local_instance and self.local_instance.encrypted_private_key:
                key = base64.urlsafe_b64encode(settings.SECRET_KEY.encode()[:32])
                from cryptography.fernet import Fernet
                f = Fernet(key)
                decrypted_pem = f.decrypt(self.local_instance.encrypted_private_key.encode())
                self.private_key = serialization.load_pem_private_key(decrypted_pem, password=None)
        except Exception as e:
            logger.error(f"Failed to load local identity for sync service: {e}")
            self.local_instance, self.private_key = None, None

    def _resume_incomplete_downloads(self):
        from .service_manager import service_manager
        logger.info("Checking for any incomplete downloads to resume...")
        
        all_content = list(FileAttachment.objects.all()) + \
                      list(Message.objects.filter(metadata_manifest__isnull=False)) + \
                      list(PrivateMessage.objects.filter(metadata_manifest__isnull=False))
        
        incomplete_items = [
            item for item in all_content
            if item.metadata_manifest and not service_manager.bitsync_service.are_all_chunks_local(item.metadata_manifest)
        ]
        
        for item in incomplete_items:
            self._schedule_download(item.metadata_manifest)
        
        if not incomplete_items:
            logger.info("No incomplete downloads found.")

    def _get_auth_headers(self):
        timestamp = datetime.now(timezone.utc).isoformat()
        hasher = hashlib.sha256(timestamp.encode('utf-8'))
        digest = hasher.digest()
        signature = self.private_key.sign(
            digest, rsa_padding.PSS(mgf=rsa_padding.MGF1(hashes.SHA256()), salt_length=rsa_padding.PSS.MAX_LENGTH), hashes.SHA256()
        )
        return {
            'X-Pubkey': base64.b64encode(self.local_instance.pubkey.encode('utf-8')).decode('utf-8'),
            'X-Timestamp': timestamp,
            'X-Signature': base64.b64encode(signature).decode('utf-8')
        }

    def poll_peers(self):
        peers = TrustedInstance.objects.filter(is_trusted_peer=True)
        if not peers.exists(): return
        
        logger.info(f"Beginning to poll {peers.count()} peer(s) for new content...")
        for peer in peers:
            if not peer.web_ui_onion_url: continue
            
            last_sync = peer.last_synced_at - timedelta(minutes=10) if peer.last_synced_at else datetime.min.replace(tzinfo=timezone.utc)
            proxies = {'http': 'socks5h://127.0.0.1:9050', 'https': 'socks5h://127.0.0.1:9050'}
            
            server_timestamp_str = None
            try:
                target_url = f"{peer.web_ui_onion_url.strip('/')}/api/sync/?since={last_sync.isoformat()}"
                response = requests.get(target_url, headers=self._get_auth_headers(), proxies=proxies, timeout=120)
                
                if response.status_code == 200:
                    response_data = response.json()
                    manifests = response_data.get('manifests', [])
                    federated_actions = response_data.get('federated_actions', [])
                    server_timestamp_str = response_data.get('server_timestamp')

                    logger.info(f"<-- Received {len(manifests)} new manifest(s) and {len(federated_actions)} action(s) from peer {peer.web_ui_onion_url}")
                    if manifests:
                        self._process_received_manifests(manifests)
                    if federated_actions:
                        self._process_received_actions(federated_actions)
                else:
                    logger.warning(f"<-- Failed to sync with peer {peer.web_ui_onion_url}: Status {response.status_code}")
            
            except requests.exceptions.RequestException as e:
                logger.error(f"<-- Network error while contacting peer {peer.web_ui_onion_url}: {e}")

            finally:
                peer.last_synced_at = django_timezone.datetime.fromisoformat(server_timestamp_str) if server_timestamp_str else django_timezone.now()
                peer.save()
                logger.info(f"Timestamp for peer {peer.web_ui_onion_url} updated to {peer.last_synced_at.isoformat()}")

    def _download_done_callback(self, manifest, future):
        content_hash = manifest.get('content_hash')
        self.currently_downloading.discard(content_hash)
        try:
            encrypted_data = future.result()
            if encrypted_data:
                self._process_completed_download(manifest, encrypted_data)
        except Exception as e:
            logger.error(f"Download failed for {content_hash[:10]}... with error: {e}")

    def _schedule_download(self, manifest):
        content_hash = manifest.get('content_hash')
        if content_hash in self.currently_downloading: return
        
        item_name = manifest.get('filename') or manifest.get('content_type', 'Content')
        logger.info(f"Scheduling download for: '{item_name}' ({content_hash[:10]}...)")
        self.currently_downloading.add(content_hash)
        
        future = self.download_executor.submit(self._download_content, manifest)
        future.add_done_callback(partial(self._download_done_callback, manifest))

    def _process_received_manifests(self, manifests: list):
        for manifest in manifests:
            content_hash = manifest.get('content_hash')
            if not content_hash: continue
            
            exists = Message.objects.filter(metadata_manifest__content_hash=content_hash).exists() or \
                     FileAttachment.objects.filter(metadata_manifest__content_hash=content_hash).exists() or \
                     PrivateMessage.objects.filter(metadata_manifest__content_hash=content_hash).exists()

            if not exists:
                self._schedule_download(manifest)

    def _process_received_actions(self, actions: list):
        for action_data in actions:
            action_id = action_data.get('id')
            if FederatedAction.objects.filter(id=action_id).exists():
                continue

            action_type = action_data.get('action_type')
            logger.info(f"Processing federated action: {action_type} ({action_id})")

            try:
                FederatedAction.objects.create(
                    id=action_id,
                    action_type=action_type,
                    pubkey_target=action_data.get('pubkey_target'),
                    content_hash_target=action_data.get('content_hash_target'),
                    action_details=action_data.get('action_details', {}),
                    created_at=django_timezone.datetime.fromisoformat(action_data.get('created_at'))
                )

                if action_type == 'ban_pubkey':
                    pubkey = action_data.get('pubkey_target')
                    details = action_data.get('action_details', {})
                    is_temporary = details.get('is_temporary', False)
                    duration = details.get('duration_hours')
                    expires_at = None
                    if is_temporary and duration:
                        expires_at = django_timezone.now() + timedelta(hours=int(duration))
                    
                    BannedPubkey.objects.update_or_create(
                        pubkey=pubkey,
                        defaults={
                            'is_temporary': is_temporary,
                            'expires_at': expires_at,
                            'federated_action_id': action_id
                        }
                    )
                    logger.info(f"Federated ban applied for pubkey: {pubkey[:12]}...")

                elif action_type == 'unpin_content':
                    content_hash = action_data.get('content_hash_target')
                    Message.objects.filter(metadata_manifest__content_hash=content_hash).update(is_pinned=False, pinned_by=None)
                    FileAttachment.objects.filter(metadata_manifest__content_hash=content_hash).update(is_pinned=False, pinned_by=None)
                    logger.info(f"Federated unpin applied for content hash: {content_hash[:12]}...")

                elif action_type == 'update_profile':
                    pubkey = action_data.get('pubkey_target')
                    details = action_data.get('action_details', {})
                    user_to_update = User.objects.filter(pubkey=pubkey).first()
                    
                    if user_to_update:
                        user_to_update.nickname = details.get('nickname', user_to_update.nickname)
                        user_to_update.karma = details.get('karma', user_to_update.karma)
                        user_to_update.save()
                        logger.info(f"Applied federated profile update for user: {user_to_update.username}")
                        
                        avatar_hash = details.get('avatar_hash')
                        if avatar_hash:
                            self._apply_avatar_from_hash(user_to_update, avatar_hash)

            except Exception as e:
                logger.error(f"Failed to process federated action {action_id}: {e}", exc_info=True)


    def _process_completed_download(self, manifest, encrypted_data):
        from .service_manager import service_manager
        content_hash = manifest.get('content_hash')

        if Message.objects.filter(metadata_manifest__content_hash=content_hash).exists() or \
           FileAttachment.objects.filter(metadata_manifest__content_hash=content_hash).exists() or \
           PrivateMessage.objects.filter(metadata_manifest__content_hash=content_hash).exists():
            return

        logger.info(f"Processing newly completed download for hash {content_hash[:10]}...")
        decrypted_data = self._decrypt_data(encrypted_data, manifest)
        if not decrypted_data: return

        try:
            final_manifest = service_manager.bitsync_service.rekey_manifest_for_new_peers(manifest)
            logger.info(f"Manifest {content_hash[:10]} successfully re-keyed for local peers.")
        except Exception as e:
            logger.error(f"Failed to re-key manifest for {content_hash[:10]}, aborting save. Error: {e}")
            return
        
        content_type = final_manifest.get('content_type')
        try:
            if content_type == 'message':
                content = json.loads(decrypted_data)
                
                author_pubkey = content.get('pubkey')
                if author_pubkey and not User.objects.filter(pubkey=author_pubkey).exists():
                    try:
                        short_id = generate_short_id(author_pubkey, length=8)
                        new_nickname = f"Moo-{short_id}"
                        
                        avatar_content_file, avatar_filename = generate_cow_avatar(author_pubkey)
                        
                        new_user = User.objects.create(
                            username=f"federated_{short_id}",
                            nickname=new_nickname,
                            pubkey=author_pubkey,
                            is_active=False,
                            password=User.objects.make_random_password()
                        )
                        new_user.avatar.save(avatar_filename, avatar_content_file, save=True)
                        logger.info(f"Discovered new federated user. Created profile '{new_nickname}' with a unique cow avatar.")

                        pending_actions = FederatedAction.objects.filter(
                            pubkey_target=new_user.pubkey,
                            action_type='update_profile'
                        ).order_by('created_at')

                        if pending_actions.exists():
                            logger.info(f"Found {pending_actions.count()} pending profile actions for new user {new_user.username}. Applying them now.")
                            for action in pending_actions:
                                details = action.action_details
                                new_user.nickname = details.get('nickname', new_user.nickname)
                                new_user.karma = details.get('karma', new_user.karma)
                                new_user.save()
                            
                                avatar_hash = details.get('avatar_hash')
                                if avatar_hash:
                                    self._apply_avatar_from_hash(new_user, avatar_hash)

                    except Exception as user_create_e:
                        logger.error(f"Failed to create federated user profile for pubkey {author_pubkey[:12]}: {user_create_e}")
                
                required_hashes = content.get('attachment_hashes', [])
                if required_hashes:
                    existing_attachments = FileAttachment.objects.filter(metadata_manifest__content_hash__in=required_hashes)
                    if len(existing_attachments) != len(required_hashes):
                        logger.warning(f"Message {content_hash[:10]} is waiting for attachments to download. Will retry processing later.")
                        return
        
                
                board, _ = MessageBoard.objects.get_or_create(name=content.get('board', 'general'))
                message = Message.objects.create(
                    board=board, subject=content.get('subject'), body=content.get('body'),
                    pubkey=content.get('pubkey'), metadata_manifest=final_manifest
                )
                if required_hashes:
                    message.attachments.set(attachments)
                logger.info(f"Successfully saved new message: '{message.subject}'")

            elif content_type == 'file':
                attachment = FileAttachment.objects.create(
                    filename=final_manifest.get('filename', 'unknown'),
                    content_type=final_manifest.get('content_type_val', 'application/octet-stream'),
                    size=final_manifest.get('size', 0),
                    metadata_manifest=final_manifest
                )
                logger.info(f"Successfully saved new file: '{final_manifest.get('filename')}'")
                
                pending_actions = FederatedAction.objects.filter(
                    action_type='update_profile',
                    action_details__avatar_hash=content_hash
                )
                for action in pending_actions:
                    user_to_update = User.objects.filter(pubkey=action.pubkey_target).first()
                    if user_to_update:
                        self._apply_avatar_from_attachment(user_to_update, attachment)

            elif content_type == 'pm':
                metadata = json.loads(decrypted_data.decode('utf-8'))
                recipient_pubkey_checksum = metadata.get('recipient_pubkey_checksum')
                
                local_user_pubkeys = User.objects.filter(is_active=True).values_list('pubkey', flat=True)
                local_user_checksums = {generate_checksum(pk) for pk in local_user_pubkeys if pk}

                if recipient_pubkey_checksum in local_user_checksums:
                    e2e_content_b64 = metadata.get('e2e_encrypted_content_b64')
                    if not e2e_content_b64:
                        logger.error("Downloaded PM manifest is missing the E2E content payload.")
                        return

                    recipient_pubkey = metadata.get('recipient_pubkey')
                    if not recipient_pubkey:
                        logger.warning(f"PM received without a recipient public key. Discarding.")
                        return

                    recipient_user, created = User.objects.get_or_create(
                        pubkey=recipient_pubkey,
                        defaults={
                            'username': f"federated_{generate_short_id(recipient_pubkey, 8)}",
                            'is_active': False
                        }
                    )
                    if created:
                        logger.info(f"Created new federated user profile for PM recipient: {recipient_user.username}")

                    PrivateMessage.objects.create(
                        recipient=recipient_user,
                        sender_pubkey=metadata.get('sender_pubkey'),
                        e2e_encrypted_content=e2e_content_b64,
                        metadata_manifest=final_manifest
                    )
                    logger.info(f"Successfully received and saved a federated E2E PM for user '{recipient_user.username}'.")
                else:
                    logger.info(f"Received PM metadata for a different BBS. Ignoring.")

        except Exception as e:
            logger.error(f"Failed to create database object from manifest {content_hash[:10]}: {e}", exc_info=True)

    def _find_pubkey_by_checksum(self, checksum):
        """Helper to find a pubkey from a checksum, used for E2E message processing."""
        for user in User.objects.all():
            if user.pubkey and generate_checksum(user.pubkey) == checksum:
                return user.pubkey
        for instance in TrustedInstance.objects.all():
            if instance.pubkey and generate_checksum(instance.pubkey) == checksum:
                return instance.pubkey
        for alias in Alias.objects.all():
            if alias.pubkey and generate_checksum(alias.pubkey) == checksum:
                return alias.pubkey
        return None

    def _find_seeders(self, content_hash: str) -> list:
        logger.info(f"Discovering seeders for content {content_hash[:10]}...")
        available_seeders = []
        peers = TrustedInstance.objects.filter(is_trusted_peer=True)
        proxies = {'http': 'socks5h://127.0.0.1:9050', 'https': 'socks5h://127.0.0.1:9050'}
        for peer in peers:
            if not peer.web_ui_onion_url: continue
            try:
                url = f"{peer.web_ui_onion_url.strip('/')}/api/bitsync/has_content/{content_hash}/"
                response = requests.get(url, headers=self._get_auth_headers(), proxies=proxies, timeout=60)
                if response.status_code == 200:
                    available_seeders.append(peer.web_ui_onion_url)
            except requests.RequestException:
                logger.warning(f"Could not contact peer {peer.web_ui_onion_url} to check for content.")
        return available_seeders

    def _download_content(self, manifest: dict) -> bytes | None:
        content_hash, chunk_hashes = manifest['content_hash'], manifest['chunk_hashes']
        num_chunks = len(chunk_hashes)
        item_name = manifest.get('filename', content_hash[:16])
        from .service_manager import service_manager
        if service_manager.bitsync_service.are_all_chunks_local(manifest):
            local_chunks_data = b""
            for i in range(num_chunks):
                chunk_path = service_manager.bitsync_service.get_chunk_path(content_hash, i)
                try:
                    with open(chunk_path, 'rb') as f:
                        local_chunks_data += f.read()
                except FileNotFoundError:
                    break
            else:
                return local_chunks_data

        seeders = self._find_seeders(content_hash)
        if not seeders:
            logger.error(f"Cannot download '{item_name}': No seeders found.")
            return None

        logger.info(f"Starting swarm download for '{item_name}' from {len(seeders)} peer(s).")
        downloaded_chunks = {}
        for i in range(num_chunks):
            chunk_path = service_manager.bitsync_service.get_chunk_path(content_hash, i)
            if chunk_path and os.path.exists(chunk_path):
                 with open(chunk_path, 'rb') as f:
                    downloaded_chunks[i] = f.read()

        proxies = {'http': 'socks5h://127.0.0.1:9050', 'https': 'socks5h://127.0.0.1:9050'}
        chunks_to_download = [i for i in range(num_chunks) if i not in downloaded_chunks]
        with ThreadPoolExecutor(max_workers=4, thread_name_prefix='chunk_worker') as executor:
            futures = {
                executor.submit(self._download_chunk, seeders[i % len(seeders)], content_hash, chunk_idx, proxies): chunk_idx
                for i, chunk_idx in enumerate(chunks_to_download)
            }
            for future in as_completed(futures):
                chunk_index, chunk_data = future.result()
                if chunk_data and hashlib.sha256(chunk_data).hexdigest() == chunk_hashes[chunk_index]:
                    downloaded_chunks[chunk_index] = chunk_data
                    chunk_save_path = service_manager.bitsync_service.get_chunk_path(content_hash, chunk_index)
                    if chunk_save_path:
                         os.makedirs(os.path.dirname(chunk_save_path), exist_ok=True)
                         with open(chunk_save_path, 'wb') as f:
                             f.write(chunk_data)
                    logger.info(f"  - Chunk {chunk_index + 1}/{num_chunks} for '{item_name}' downloaded.")
                else: 
                     logger.error(f"   - Failed to download/verify chunk {chunk_index + 1} for '{item_name}'. Will retry on next sync.")
        
        if len(downloaded_chunks) == num_chunks:
            logger.info(f"Download complete for '{item_name}'.")
            return b"".join(downloaded_chunks[i] for i in range(num_chunks))
        else:
            logger.error(f"Download for '{item_name}' is incomplete. Will retry on next sync cycle.")
            return None
    
    def _download_content_by_hash(self, content_hash: str) -> bytes | None:
        """Helper to download a file by its hash directly, assuming a manifest exists."""
        from .service_manager import service_manager
        # Find a manifest for this content hash. In a real system, we'd search
        # through all models, but for this demo, we'll assume it exists somewhere.
        manifest = self.get_manifest_by_content_hash(content_hash)
        if not manifest:
            logger.warning(f"Could not find a manifest for content hash {content_hash[:10]}... to download.")
            return None
        
        return self._download_content(manifest)

    def get_manifest_by_content_hash(self, content_hash: str):
        """Searches for a manifest across all models by content hash."""
        # This is a helper function that might be slow but is necessary without a dedicated manifest table.
        for model in [Message, FileAttachment, PrivateMessage, Applet, AppletData]:
            field_name = 'metadata_manifest'
            if not hasattr(model, field_name):
                field_name = 'code_manifest' if hasattr(model, 'code_manifest') else 'data_manifest'
                if not hasattr(model, field_name):
                    continue

            obj = model.objects.filter(**{f'{field_name}__content_hash': content_hash}).first()
            if obj:
                return getattr(obj, field_name)
        return None
    
    def _download_chunk(self, seeder_url, content_hash, chunk_index, proxies):
        try:
            url = f"{seeder_url.strip('/')}/api/bitsync/chunk/{content_hash}/{chunk_index}/"
            response = requests.get(url, headers=self._get_auth_headers(), proxies=proxies, timeout=120)
            if response.status_code == 200: return chunk_index, response.content
        except requests.exceptions.RequestException as e:
            logger.warning(f"Failed to download chunk {chunk_index} from {seeder_url}: {e}")
            return chunk_index, None

    def _decrypt_data(self, encrypted_data: bytes, manifest: dict) -> bytes | None:
        if not encrypted_data: return None
        try:
            if not self.local_instance or not self.local_instance.pubkey:
                logger.warning("Local instance or its public key is not loaded, cannot decrypt content.")
                return None

            local_checksum = generate_checksum(self.local_instance.pubkey)
            encrypted_aes_key_b64 = manifest['encrypted_aes_keys'].get(local_checksum)
            if not encrypted_aes_key_b64:
                logger.error("Could not find an encryption envelope for our key in the manifest.")
                return None
            encrypted_aes_key = base64.b64decode(encrypted_aes_key_b64)
            aes_key = self.private_key.decrypt(
                encrypted_aes_key,
                rsa_padding.OAEP(mgf=rsa_padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None)
            )
            iv = base64.b64decode(manifest['encryption_iv'])
            cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv))
            decryptor = cipher.decryptor()
            padded_data = decryptor.update(encrypted_data) + decryptor.finalize()
            unpadder = PKCS7(algorithms.AES.block_size).unpadder()
            return unpadder.update(padded_data) + unpadder.finalize()
        except Exception as e:
            logger.error(f"Failed to decrypt content {manifest['content_hash'][:10]}...: {e}", exc_info=True)
            return None

    def get_decrypted_content(self, manifest: dict) -> bytes | None:
        if not self.private_key:
            self._load_identity()
        
        if not self.private_key:
            logger.error("Cannot decrypt content because local instance identity is not loaded.")
            return None

        content_hash = manifest.get('content_hash')
        if content_hash in self.currently_downloading:
            logger.info("Content is being downloaded by the background service; UI download will wait.")
        encrypted_data = self._download_content(manifest)
        if encrypted_data:
            return self._decrypt_data(encrypted_data, manifest)
        return None

    def _apply_avatar_from_hash(self, user, avatar_hash):
        """Finds a local attachment by hash and applies it as a user's avatar."""
        try:
            attachment = FileAttachment.objects.get(metadata_manifest__content_hash=avatar_hash)
            self._apply_avatar_from_attachment(user, attachment)
        except FileAttachment.DoesNotExist:
            logger.info(f"Avatar for user {user.username} (hash: {avatar_hash[:10]}) is not yet local. Will apply after download.")
    
    def _apply_avatar_from_attachment(self, user, attachment):
        """Given a user and a FileAttachment, decrypts the file and saves it as the user's avatar."""
        try:
            logger.info(f"Attempting to apply new federated avatar {attachment.filename} to user {user.username}")
            encrypted_data = self._download_content(attachment.metadata_manifest)
            if not encrypted_data:
                logger.warning(f"Could not get encrypted data for avatar {attachment.filename}.")
                return

            decrypted_data = self._decrypt_data(encrypted_data, attachment.metadata_manifest)
            if not decrypted_data:
                logger.warning(f"Could not decrypt data for avatar {attachment.filename}.")
                return
            
            try:
                payload = json.loads(decrypted_data.decode('utf-8'))
                image_bytes = base64.b64decode(payload.get('data'))
                content_file = ContentFile(image_bytes, name=attachment.filename)
            except (json.JSONDecodeError, KeyError, TypeError) as e:
                logger.error(f"Failed to parse payload for avatar {attachment.filename}: {e}")
                return

            user.avatar.save(attachment.filename, content_file, save=True)
            logger.info(f"Successfully applied new federated avatar for user {user.username}.")
        except Exception as e:
            logger.error(f"Failed to apply avatar {attachment.filename} to user {user.username}: {e}")

```

### File: axon_bbs/core/services/tor_service.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Full path: axon_bbs/core/services/tor_service.py
import os
import logging
import subprocess
import time
from django.conf import settings

logger = logging.getLogger(__name__)

class TorService:
    def __init__(self, host='127.0.0.1', port=9050):
        """Initialize Tor service with host and port for proxy."""
        self.host = host
        self.port = port
        self.process = None

    def start(self):
        """Start the Tor service."""
        try:
            # Assume Tor is installed and controlled via command line (adjust path if needed)
            self.process = subprocess.Popen(['tor', '-f', os.path.join(settings.BASE_DIR, 'torrc')], 
                                          stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            time.sleep(5)  # Wait for Tor to initialize
            logger.info(f"Tor service started on {self.host}:{self.port}")
        except Exception as e:
            logger.error(f"Failed to start Tor service: {e}")
            raise

    def stop(self):
        """Stop the Tor service."""
        if self.process:
            self.process.terminate()
            self.process.wait()
            logger.info("Tor service stopped.")

    def get_proxy_port(self):
        """Return the proxy port."""
        return self.port

    def is_running(self):
        """Check if Tor is running."""
        return self.process and self.process.poll() is None

```

### File: axon_bbs/core/tests/__init__.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/core/tests/__init__.py


```

### File: axon_bbs/core/tests/test_models.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/core/tests/test_models.py

from django.test import TestCase
from django.contrib.auth import get_user_model

# Get the custom User model we defined
User = get_user_model()

# -----------------------------------------------------------------------------
# Test Cases for Core Models
# -----------------------------------------------------------------------------

class UserModelTest(TestCase):
    """
    Test suite for the custom User model.
    """

    def setUp(self):
        """
        Set up the test environment. This method is run before each test.
        We create a standard user instance here.
        """
        # --- CHANGE START ---
        # Define the password as a variable to avoid repetition and errors.
        self.test_password = 'a-secure-password-for-testing'
        self.user = User.objects.create_user(
            username='testuser',
            password=self.test_password,
            email='test@example.com'
        )
        # --- CHANGE END ---

    def test_user_creation(self):
        """
        Test that a user can be created successfully.
        """
        self.assertEqual(self.user.username, 'testuser')
        self.assertEqual(self.user.email, 'test@example.com')
        # --- CHANGE START ---
        # Use the variable here to ensure the test is consistent.
        self.assertTrue(self.user.check_password(self.test_password))
        # --- CHANGE END ---
        self.assertFalse(self.user.is_staff)
        self.assertFalse(self.user.is_superuser)

    def test_user_default_values(self):
        """
        Test that the custom fields are set to their
        correct default values upon user creation.
        """
        self.assertEqual(self.user.access_level, 10)
        self.assertFalse(self.user.is_banned)

    def test_string_representation(self):
        """
        Test the __str__ method of the User model.
        """
        self.assertEqual(str(self.user), 'testuser')

# --- We will add test cases for MessageBoard, Message, etc., here later ---

```

### File: axon_bbs/frontend/tailwind.config.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.


// axon_bbs/frontend/tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

```

### File: axon_bbs/frontend/public/index.html
```
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Axon BBS - A Modern Bulletin Board System"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>Axon BBS</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>


```

### File: axon_bbs/frontend/src/App.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/App.js
import React, { useState, useEffect } from 'react';
import apiClient from './apiClient';
import LoginScreen from './components/LoginScreen';
import RegisterScreen from './components/RegisterScreen';
import RecoveryScreen from './components/RecoveryScreen';
import MessageList from './components/MessageList';
import UnlockForm from './components/UnlockForm';
import ProfileScreen from './components/ProfileScreen';
import AppletView from './components/AppletView';
import HighScoreBoard from './components/HighScoreBoard';
import ModerationDashboard from './components/ModerationDashboard';
import PrivateMessageClient from './components/PrivateMessageClient';
const Header = ({ text }) => <div className="text-2xl font-bold text-gray-200 mb-4 pb-2 border-b border-gray-600">{text}</div>;
const SideBarButton = ({ onClick, children, disabled, className = '' }) => (
  <button onClick={onClick} disabled={disabled} className={`w-full text-left py-2 px-4 rounded hover:bg-gray-700 text-gray-300 transition duration-150 ease-in-out disabled:text-gray-500 disabled:cursor-not-allowed ${className}`}>
    {children}
  </button>
);
const MessageBoardList = ({ onSelectBoard }) => {
  const [boards, setBoards] = useState([]);
useEffect(() => {
    apiClient.get('/api/boards/')
      .then(response => setBoards(response.data))
      .catch(err => console.error(err));
  }, []);
return (
    <div>
      <Header text="Message Boards" />
      <div className="space-y-2">
        {boards.map(board => (
          <button
            key={board.id}
            onClick={() => onSelectBoard(board.id, board.name)}
            className="w-full text-left p-3 rounded bg-gray-800 hover:bg-gray-700 border border-gray-700"
          >
            <h3 className="font-bold text-gray-200">{board.name}</h3>
            <p className="text-sm text-gray-400">{board.description}</p>
          </button>
        ))}
      </div>
    </div>
  );
};


function App() {
  const [token, setToken] = useState(localStorage.getItem('token'));
  const [authView, setAuthView] = useState('login');
  const [selectedBoard, setSelectedBoard] = useState(null);
  const [isIdentityUnlocked, setIdentityUnlocked] = useState(false);
  const [needsUnlock, setNeedsUnlock] = useState(false);
  const [currentView, setCurrentView] = useState('boards');
  const [pmRecipient, setPmRecipient] = useState(null);
  const [lastPlayedGame, setLastPlayedGame] = useState(null);
  const [profile, setProfile] = useState(null);
  const [displayTimezone, setDisplayTimezone] = useState('UTC');

  const setAuthToken = (newToken) => {
    if (newToken) {
      localStorage.setItem('token', newToken);
    } else {
      localStorage.removeItem('token');
      setIdentityUnlocked(false);
      setProfile(null);
    }
    setToken(newToken);
  };
useEffect(() => {
    const fetchProfile = () => {
        apiClient.get('/api/user/profile/')
            .then(response => setProfile(response.data))
            .catch(err => console.error("Could not fetch user profile", err));
    };
    const fetchTimezone = () => {
        apiClient.get('/api/config/timezone/')
            .then(response => {
                setDisplayTimezone(response.data.timezone);
                console.log("Display timezone set to:", response.data.timezone);
            })
            .catch(err => console.error("Could not fetch display timezone", err));
    };

    if (token) {
      fetchProfile();
    }
    fetchTimezone(); 
  }, [token]);
  const handleLogout = async () => {
    try {
      await apiClient.post('/api/logout/');
    } catch (err) {
      console.error("Failed to clear server session, logging out client-side anyway.", err);
    } finally {
      setAuthToken(null);
    }
  };
  const handleSelectBoard = (boardId, boardName) => {
    setSelectedBoard({ id: boardId, name: boardName });
    setCurrentView('boards');
  };
  const handleViewChange = (view) => {
    setSelectedBoard(null);
    setPmRecipient(null);
    setCurrentView(view);
  };
  const handleStartPrivateMessage = (pubkey, displayName) => {
    setPmRecipient({ pubkey: pubkey, displayName: displayName });
    setCurrentView('pm');
  };
  const handleUnlockSuccess = () => {
    setIdentityUnlocked(true);
    setNeedsUnlock(false);
  };
  if (!token) {
    return (
      <div className="bg-gray-800 min-h-screen">
        {authView === 'login' && <LoginScreen onLogin={setAuthToken} onNavigateToRegister={() => setAuthView('register')} onNavigateToRecovery={() => setAuthView('recovery')} />}
        {authView === 'register' && <RegisterScreen onRegisterSuccess={() => setAuthView('login')} onNavigateToLogin={() => setAuthView('login')} />}
        {authView === 'recovery' && <RecoveryScreen onNavigateToLogin={() => setAuthView('login')} />}
      </div>
    );
  }

  const renderMainContent = () => {
    if (currentView === 'profile') {
      return <ProfileScreen />;
    }
    if (currentView === 'pm') {
      return <PrivateMessageClient key={pmRecipient ? pmRecipient.pubkey : 'new'} initialRecipient={pmRecipient} displayTimezone={displayTimezone} />;
    }
    if (currentView === 'applets') {
      return <AppletView onLaunchGame={setLastPlayedGame} />;
    }
    if (currentView === 'high_scores' && lastPlayedGame) {
      return <HighScoreBoard applet={lastPlayedGame} onBack={() => handleViewChange('applets')} displayTimezone={displayTimezone} />;
    }
    if (currentView === 'moderation') {
      return <ModerationDashboard displayTimezone={displayTimezone} />;
    }
    if (selectedBoard) {
      return <MessageList board={selectedBoard} onBack={() => setSelectedBoard(null)} onStartPrivateMessage={handleStartPrivateMessage} displayTimezone={displayTimezone} />;
    }
    return <MessageBoardList onSelectBoard={handleSelectBoard} />;
  };

  return (
    <div className="min-h-screen bg-gray-900 text-gray-300 font-sans">
      {needsUnlock && <UnlockForm onUnlock={handleUnlockSuccess} onCancel={() => setNeedsUnlock(false)} />}

      <div className="flex flex-col md:flex-row">
        <div className="w-full md:w-60 bg-gray-800 p-4 border-r border-gray-700 flex-shrink-0">
          <div className="flex items-center text-2xl font-bold text-white mb-6">
            <img src="/axon.png" alt="Axon logo" className="h-12 w-12 mr-3"/>
            <h2>Axon BBS</h2>
          </div>
          <nav className="space-y-2">
            <div className="p-2">
              <h3 className="font-semibold text-gray-400 mb-2">Menu</h3>
              <SideBarButton onClick={() => handleViewChange('boards')}>Message Boards</SideBarButton>
              <SideBarButton onClick={() => handleViewChange('pm')}>Private Mail</SideBarButton>
              <SideBarButton onClick={() => handleViewChange('applets')}>Applets</SideBarButton>
              <SideBarButton 
                onClick={() => handleViewChange('high_scores')}
                disabled={!lastPlayedGame}
                title={!lastPlayedGame ? "Play a game first to see high scores" : "View high scores for the last game you played"}
              >
                High Scores
              </SideBarButton>
              {profile?.is_moderator && (
                <SideBarButton onClick={() => handleViewChange('moderation')}>Moderation</SideBarButton>
              )}
            </div>
            <div className="p-2">
              <h3 className="font-semibold text-gray-400 mb-2">User</h3>
              <SideBarButton
                onClick={() => setNeedsUnlock(true)}
                className={isIdentityUnlocked ? 'text-green-400' : 'text-yellow-400'}
              >
                {isIdentityUnlocked ? '✓ Identity Unlocked' : '✗ Unlock Identity'}
              </SideBarButton>
              <SideBarButton onClick={() => handleViewChange('profile')}>Profile</SideBarButton>
              <SideBarButton onClick={handleLogout}>Logout</SideBarButton>
            </div>
          </nav>
        </div>
        <main className="flex-1 p-6">
           {renderMainContent()}
        </main>
      </div>
    </div>
  );
}

export default App;

```

### File: axon_bbs/frontend/src/apiClient.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/apiClient.js
import axios from 'axios';

const apiClient = axios.create({
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true, 
});

apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// UPDATED: The response interceptor is now smarter about 401 errors.
apiClient.interceptors.response.use(
  (response) => response, 
  (error) => {
    if (error.response && error.response.status === 401) {
      // Don't intercept for the token endpoint, to allow for failed login attempts
      if (error.config.url.includes('/api/token/')) {
        return Promise.reject(error);
      }

      // NEW: Check for the specific 'identity_locked' error.
      // If this error occurs, we DON'T want to log out. We let the
      // component that made the request handle it by showing the unlock form.
      if (error.response.data && error.response.data.error === 'identity_locked') {
        return Promise.reject(error);
      }

      // For all other 401 errors, we assume the session is invalid and log out.
      console.warn("Session expired or token is invalid. Logging out.");
      localStorage.removeItem('token');
      window.location.href = '/';
    }
    
    return Promise.reject(error);
  }
);

export default apiClient;

```

### File: axon_bbs/frontend/src/index.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.


// axon_bbs/frontend/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


```

### File: axon_bbs/frontend/src/reportWebVitals.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.


// axon_bbs/frontend/src/reportWebVitals.js
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


```

### File: axon_bbs/frontend/src/applet_api/api.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/applet_api/api.js
// UPDATED: Added new functions for agent/event-bus interaction.
window.bbs = {
  _callbacks: {},
  _requestId: 0,

  _handleMessage: function(event) {
    const { command, payload, requestId, error } = event.data;
    if (command && command.startsWith('response_') && this._callbacks[requestId]) {
      const { resolve, reject } = this._callbacks[requestId];
      if (error) {
        reject(new Error(error));
      } else {
        resolve(payload);
      }
      delete this._callbacks[requestId];
    }
  },

  _postMessage: function(command, payload = {}) {
    return new Promise((resolve, reject) => {
      const requestId = this._requestId++;
      this._callbacks[requestId] = { resolve, reject };
      // Target window.parent, specifying the exact origin for security
      window.parent.postMessage({ command, payload, requestId }, window.location.origin);
    });
  },

  // --- Standard API ---
  getUserInfo: function() {
    return this._postMessage('getUserInfo');
  },

  getData: function() {
    return this._postMessage('getData');
  },

  saveData: function(newData) {
    return this._postMessage('saveData', newData);
  },

  // --- NEW: Event Bus API ---
  getAppletInfo: function() {
    return this._postMessage('getAppletInfo');
  },

  postEvent: function(eventData) {
    return this._postMessage('postEvent', eventData);
  },

  readEvents: function() {
    return this._postMessage('readEvents');
  }
};

window.addEventListener('message', (event) => window.bbs._handleMessage(event));

```

### File: axon_bbs/frontend/src/applets/FloatUpMaze.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/applets/FloatUpMaze.js

// --- Start of Applet API Helper ---
window.bbs = {
  _callbacks: {},
  _requestId: 0,
  _handleMessage: function(event) {
    const { command, payload, requestId, error } = event.data;
    if (command && command.startsWith('response_') && this._callbacks[requestId]) {
      const { resolve, reject } = this._callbacks[requestId];
      if (error) { reject(new Error(error)); } else { resolve(payload); }
      delete this._callbacks[requestId];
    }
  },
  _postMessage: function(command, payload = {}) {
    return new Promise((resolve, reject) => {
      const requestId = this._requestId++;
      this._callbacks[requestId] = { resolve, reject };
      window.parent.postMessage({ command, payload, requestId }, '*');
    });
  },
  // --- Standard API ---
  getUserInfo: function() { return this._postMessage('getUserInfo'); },
  getData: function() { return this._postMessage('getData'); },
  saveData: function(newData) { return this._postMessage('saveData', newData); },

  // --- NEW: Event Bus API ---
  getAppletInfo: function() { return this._postMessage('getAppletInfo'); },
  postEvent: function(eventData) { return this._postMessage('postEvent', eventData); },
  readEvents: function() { return this._postMessage('readEvents'); }
};
window.addEventListener('message', (event) => window.bbs._handleMessage(event));
// --- End of Applet API Helper ---


// --- Main Applet Execution ---
(async function() {
    // 1. SETUP: Inject CSS, create HTML, and define all variables and functions first.
    const styles = `
        body { font-family: 'Arial', sans-serif; display: flex; justify-content: center; align-items: center; background-color: #1a202c; color: #e2e8f0; padding-top: 20px; overflow: hidden; }
        .game-container { background-color: #2d3748; padding: 20px; border-radius: 10px; box-shadow: 0 4px 10px rgba(0,0,0,0.1); text-align: center; width: 300px; }
        
        #gameCanvas { 
            display: block; 
            margin: 0 auto 15px auto; 
            background-color: #e0f2fe; 
            border: 1px solid #4a5568; 
            max-width: 100%; 
            height: auto; 
            image-rendering: pixelated; 
            image-rendering: -moz-crisp-edges; 
            image-rendering: crisp-edges;
        }

        .controls button, .start-button { background-color: #3b82f6; color: white; border: none; padding: 10px 15px; margin: 5px; border-radius: 8px; font-size: 16px; cursor: pointer; }
        .char-select button { background-color: #4a5568;
        width: 48px; height: 48px; padding: 0;
        display: inline-flex; justify-content: center; align-items: center; border-radius: 8px; border: none;
        }
        .char-select button.selected { background-color: #10b981; box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.5); }
        .message-area { margin-top: 10px; font-size: 18px; font-weight: bold; min-height: 25px; color: #cbd5e0; }
        .score-stats-area { display: flex; justify-content: center; font-size: 14px; margin-top: 5px; color: #a0aec0; min-height: 20px; }
        #debug-dialog { position: absolute; top: 10px; left: 10px; width: 250px; height: 150px; background-color: rgba(0,0,0,0.7); border: 1px solid #4a5568; border-radius: 5px; color: #fc8181; font-family: monospace; font-size: 10px; overflow-y: scroll; padding: 5px; z-index: 1000; }
        #debug-dialog-header { padding: 2px 5px; cursor: move; background-color: #4a5568; color: white; font-weight: bold; user-select: none; }
    `;
    const styleSheet = document.createElement("style");
    styleSheet.innerText = styles;
    document.head.appendChild(styleSheet);
    document.getElementById('applet-root').innerHTML = `
        <div id="debug-dialog"><div id="debug-dialog-header">Debug Console</div></div>
        <div class="game-container">
            <h1 class="text-2xl font-bold mb-2">FloatUp Maze</h1>
            <canvas id="gameCanvas" width="240" height="320"></canvas>
            <div id="messageArea" class="message-area">Loading...</div>
            <div class="score-stats-area"><div id="statsArea"></div></div>
            <div class="char-select my-3">
                <span class="mr-2 font-semibold align-middle">Character:</span>
                <button id="charGiraffe" data-char="giraffe" title="Giraffe"><canvas width="48" height="48"></canvas></button>
                <button id="charElephant" data-char="elephant" title="Elephant"><canvas width="48" height="48"></canvas></button>
                <button id="charZebra" data-char="zebra" title="Zebra"><canvas width="48" height="48"></canvas></button>
            </div>
            <div class="controls mb-3">
                <button id="leftButton">← Left</button>
                <button id="rightButton">Right →</button>
            </div>
            <button id="startButton" class="start-button w-full" disabled>Start Game</button>
        </div>
    `;
    const debugDialog = document.getElementById('debug-dialog');
    const debugHeader = document.getElementById('debug-dialog-header');
    let isDragging = false, offsetX, offsetY;
    debugHeader.addEventListener('mousedown', (e) => { isDragging = true; offsetX = e.clientX - debugDialog.offsetLeft; offsetY = e.clientY - debugDialog.offsetTop; });
    document.addEventListener('mousemove', (e) => { if (isDragging) { debugDialog.style.left = `${e.clientX - offsetX}px`; debugDialog.style.top = `${e.clientY - offsetY}px`; } });
    document.addEventListener('mouseup', () => { isDragging = false; });

    // UPDATED: The debugLog function now respects the global debug flag
    function debugLog(message) {
        if (window.BBS_DEBUG_MODE !== true) return;
        const logEntry = document.createElement('div');
        const text = `> ${message}`;
        console.log(text);
        logEntry.textContent = text;
        debugDialog.appendChild(logEntry);
        debugDialog.scrollTop = debugDialog.scrollHeight;
    }

    try {
        // UPDATED: Hide the debug console if debug mode is off
        if (window.BBS_DEBUG_MODE !== true) {
            debugDialog.style.display = 'none';
        }

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        ctx.imageSmoothingEnabled = false;
        const messageArea = document.getElementById('messageArea');
        const statsArea = document.getElementById('statsArea');
        const startButton = document.getElementById('startButton');
        const leftButton = document.getElementById('leftButton');
        const rightButton = document.getElementById('rightButton');
        const charButtons = document.querySelectorAll('.char-select button');
        let stats = { wins: 0, losses: 0, deaths: 0, abductions: 0, spaceLosses: 0, score: 0 };
        let player, trophy, mines = [], explosionParticles = [], safePathSegments = [];
        let isGameRunning = false, isGameOver = false, isExploding = false, explosionTimer = 0;
        let selectedCharacter = null;
        let moveLeft = false, moveRight = false;
        let animationFrameId = null;
        let approachingTopOutcome = null;
        let saucer = { active: false, x: 0, y: -30, width: 40, height: 20, speed: 2, state: 'idle', beamActive: false, pullSpeed: 1.5 };
        const T = null, K = '#000000', W = '#FFFFFF', G = '#808080', LG = '#D3D3D3', Y = '#FFD700', BR = '#A0522D', DG = '#333333', OR = '#FFA500', FY = '#FFFF00', SC = '#C0C0C0', BC = 'rgba(173, 216, 230, 0.5)', GC = '#228B22', LGC = '#90EE90', TRUNK_C = '#8B4513';
        const giraffeBitmap = [ [T, T, T, T, T, Y, Y, T, T, T, T, T, T, T, T, T],[T, T, T, T, Y, Y, Y, Y, T, T, T, T, T, T, T, T],[T, T, T, T, Y, BR, Y, Y, T, T, T, T, T, T, T, T],[T, T, T, T, T, Y, Y, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, Y, Y, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, Y, Y, T, T, T, T, T, T, T, T, T],[T, T, T, T, Y, Y, Y, Y, T, T, T, T, T, T, T, T],[T, T, T, Y, Y, BR, Y, Y, Y, T, T, T, T, T, T, T],[T, T, T, Y, Y, Y, Y, Y, Y, T, T, T, T, T, T, T],[T, T, T, Y, Y, T, T, Y, Y, T, T, T, T, T, T, T],[T, T, T, Y, Y, T, T, Y, Y, T, T, T, T, T, T, T],[T, T, T, Y, Y, T, T, Y, Y, T, T, T, T, T, T, T],[T, T, T, Y, Y, T, T, Y, Y, T, T, T, T, T, T, T],[T, T, T, BR, BR, T, T, BR, BR, T, T, T, T, T, T, T],[T, T, T, BR, BR, T, T, BR, BR, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T]];
        const elephantBitmap = [ [T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, G, G, G, G, G, G, G, T, T, T, T, T],[T, T, T, G, G, G, G, G, G, G, G, G, T, T, T, T],[T, T, G, G, LG, G, G, G, LG, G, G, G, G, T, T, T],[T, T, G, G, G, G, G, G, G, G, G, G, G, T, T, T],[T, G, G, G, G, G, G, G, G, G, G, G, G, G, T, T],[T, G, G, G, G, G, G, G, G, G, G, G, G, G, T, T],[T, G, G, G, G, T, T, T, T, T, G, G, G, G, T, T],[T, T, G, G, T, T, T, T, T, T, T, G, G, T, T, T],[T, T, G, G, T, T, G, G, T, T, T, G, G, T, T, T],[T, T, G, G, T, G, G, G, G, T, G, G, T, T, T, T],[T, T, G, G, T, G, G, G, G, T, G, G, T, T, T, T],[T, T, G, G, T, T, G, G, T, T, G, G, T, T, T, T],[T, T, G, G, T, T, G, G, T, T, G, G, T, T, T, T],[T, T, T, LG, LG, T, T, LG, LG, T, T, LG, LG, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T]];
        const zebraBitmap = [ [T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, W, K, W, K, T, T, T, T, T, T, T],[T, T, T, T, W, K, W, K, W, K, T, T, T, T, T, T],[T, T, T, K, W, K, W, K, W, K, W, T, T, T, T, T],[T, T, T, W, K, W, K, W, K, W, K, T, T, T, T, T],[T, T, T, K, W, K, W, K, W, K, W, T, T, T, T, T],[T, T, T, W, K, W, K, K, W, K, W, K, T, T, T, T, T],[T, T, T, K, W, K, W, K, W, K, W, T, T, T, T, T],[T, T, T, W, K, W, K, W, K, W, K, T, T, T, T, T],[T, T, T, K, W, K, W, K, W, K, W, T, T, T, T, T],[T, T, T, W, K, W, T, T, K, W, T, T, T, T, T, T],[T, T, T, K, K, T, T, T, T, K, T, T, T, T, T, T],[T, T, T, W, W, T, T, T, T, W, T, T, T, T, T, T],[T, T, T, K, K, T, T, T, T, K, T, T, T, T, T, T],[T, T, T, W, W, T, T, T, T, W, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T]];
        const simpleBombBitmap = [ [T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, BR, BR, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, BR, OR, FY, BR, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, BR, FY, OR, BR, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, DG, DG, DG, DG, DG, DG, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, DG, DG, DG, DG, DG, DG, DG, DG, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, DG, DG, K, K, K, K, K, K, DG, DG, T, T, T, T, T, T, T],[T, T, T, T, T, T, DG, DG, K, K, W, K, K, W, K, K, DG, DG, T, T, T, T, T, T],[T, T, T, T, T, T, DG, K, K, K, K, K, K, K, K, K, K, DG, T, T, T, T, T, T],[T, T, T, T, T, T, DG, K, K, K, K, K, K, K, K, K, K, DG, T, T, T, T, T, T],[T, T, T, T, T, T, DG, K, K, K, K, K, K, K, K, K, K, DG, T, T, T, T, T, T],[T, T, T, T, T, T, DG, DG, K, K, K, K, K, K, K, K, DG, DG, T, T, T, T, T, T],[T, T, T, T, T, T, T, DG, DG, K, K, K, K, K, K, DG, DG, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, DG, DG, DG, DG, DG, DG, DG, DG, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, DG, DG, DG, DG, DG, DG, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T],[T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T]];
        const characterBitmaps = { giraffe: giraffeBitmap, elephant: elephantBitmap, zebra: zebraBitmap };
        let sounds = {}, audioInitialized = false;
        function drawBitmap(ctx, bitmap, x, y, scale = 1) {
            const height = bitmap.length;
            if (height === 0) return;
            const width = bitmap[0].length;
            if (width === 0) return;
            for (let row = 0; row < height; row++) {
                for (let col = 0; col < width; col++) {
                    if (bitmap[row][col]) {
                        ctx.fillStyle = bitmap[row][col];
                        ctx.fillRect(x + (col * scale), y + (row * scale), scale, scale);
                    }
                }
            }
        }
        
        function updateStatsDisplay() { 
            statsArea.innerHTML = `🏆: ${stats.wins} | ☠️: ${stats.deaths} | 👽: ${stats.abductions} | 🌌: ${stats.spaceLosses} | 📉: ${stats.losses} | <b>Score: ${stats.score || 0}</b>`;
        }
        
        async function handleWin() { 
            if (isGameOver || isExploding) return;
            isGameOver = true; isGameRunning = false; playSound('win'); 
            stats.wins = (stats.wins || 0) + 1;
            stats.score = (stats.score || 0) + 1000;
            messageArea.textContent = "You Win! +1000 points!"; 
            await bbs.saveData(stats); 
            debugLog(`Win! Stats saved.`); 
            resetGameAfterDelay();
        }

        async function handleLose(reason = "Try Again!") { 
            if (isGameOver) return;
            isGameOver = true; isGameRunning = false; 
            
            stats.losses = (stats.losses || 0) + 1;
            if (reason === "Hit a mine!") {
                stats.deaths = (stats.deaths || 0) + 1;
                stats.score = (stats.score || 0) - 50;
            } else if (reason === "Abducted!") {
                stats.abductions = (stats.abductions || 0) + 1;
            } else if (reason === "Floated into space!") {
                stats.spaceLosses = (stats.spaceLosses || 0) + 1;
            }

            playSound('lose'); 
            messageArea.textContent = `Game Over! ${reason}`; 
            await bbs.saveData(stats);
            debugLog(`Lose: ${reason}. Stats saved.`);
            resetGameAfterDelay(); 
        }
        
        function setupUI() {
            debugLog("Setting up UI...");
            const charCanvases = {
                giraffe: document.querySelector('#charGiraffe canvas'),
                elephant: document.querySelector('#charElephant canvas'),
                zebra: document.querySelector('#charZebra canvas')
            };
            for (const charName in charCanvases) {
                const btnCanvas = charCanvases[charName];
                const btnCtx = btnCanvas.getContext('2d');
                btnCtx.imageSmoothingEnabled = false;
                btnCtx.clearRect(0, 0, btnCanvas.width, btnCanvas.height); 
                const bitmap = characterBitmaps[charName];
                const scale = 2;
                const bitmapWidth = bitmap[0].length * scale;
                const bitmapHeight = bitmap.length * scale;
                const x = (btnCanvas.width - bitmapWidth) / 2;
                const y = (btnCanvas.height - bitmapHeight) / 2 + 12;
                drawBitmap(btnCtx, bitmap, x, y, scale);
            }
            
            messageArea.textContent = "Select character & Start!";
            startButton.disabled = false;
        }

        function initializeAudio() { if (audioInitialized) return Promise.resolve();
        return new Promise((resolve, reject) => { if (typeof Tone === 'undefined') { const script = document.createElement('script'); script.src = "https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.49/Tone.js"; script.onload = () => { setupTones(); resolve(); }; script.onerror = reject; document.head.appendChild(script); } else { setupTones(); resolve(); } });
        }
        function setupTones() { sounds.collision = new Tone.Synth({ oscillator: { type: "square" }, envelope: { attack: 0.01, decay: 0.1, sustain: 0, release: 0.1 } }).toDestination();
        sounds.win = new Tone.Synth({ oscillator: { type: "triangle" }, envelope: { attack: 0.01, decay: 0.2, sustain: 0.1, release: 0.2 } }).toDestination();
        sounds.lose = new Tone.Synth({ oscillator: { type: "sawtooth" }, envelope: { attack: 0.01, decay: 0.3, sustain: 0, release: 0.2 } }).toDestination();
        sounds.explosion = new Tone.NoiseSynth({ noise: { type: 'white' }, envelope: { attack: 0.005, decay: 0.1, sustain: 0, release: 0.1 } }).toDestination();
        sounds.beam = new Tone.AMOscillator({frequency: 100, type: "sine", modulationType: "sine", harmonicity: 1.01}).toDestination(); sounds.beam.volume.value = -15; audioInitialized = true;
        }
        function playSound(soundName, action = 'play') { if (!audioInitialized || !sounds[soundName]) return;
        try { if (Tone.context.state !== 'running') { Tone.context.resume(); } if (soundName === 'beam') { if (action === 'start' && sounds.beam.state !== 'started') { sounds.beam.start();
        } else if (action === 'stop' && sounds.beam.state === 'started') { sounds.beam.stop();
        } } else { if (soundName === 'collision') sounds.collision.triggerAttackRelease("C3", "8n"); if (soundName === 'win') sounds.win.triggerAttackRelease("C5", "4n");
        if (soundName === 'lose') sounds.lose.triggerAttackRelease("A2", "4n"); if (soundName === 'explosion') sounds.explosion.triggerAttackRelease();
        } } catch (e) { /* silent fail */ } }
        function defineTrophy() { trophy = { x: Math.random() * (canvas.width - 20), y: Math.random() * 40 + 80, width: 20, height: 30 };
        }
        function generateSafePath() { safePathSegments = [];
        let currentX = canvas.width / 2 - 20; const segHeight = canvas.height / 12;
        for (let i = 0; i < 12; i++) { const segY = canvas.height - (i + 1) * segHeight;
        let nextX = currentX + (Math.random() - 0.5) * 80; nextX = Math.max(0, Math.min(canvas.width - 40, nextX));
        safePathSegments.push({ x: nextX, y: segY, width: 40, height: segHeight }); currentX = nextX;
        } }
        function isPositionValid(x, y, w, h) { const rect = { x, y, width: w, height: h };
        if (x < 2 || x + w > canvas.width - 2 || y < 40 || y + h > canvas.height - 40) return false;
        if (trophy && checkCollision(rect, trophy)) return false; if (checkCollision(rect, { x: 0, y: canvas.height - 42, width: canvas.width, height: 42 })) return false;
        for (const mine of mines) { if (checkCollision(rect, mine)) return false;
        } for (const seg of safePathSegments) { if (checkCollision(rect, seg)) return false; } return true;
        }
        function placeMines() { mines = [];
        for (let i = 0; i < 5000 && mines.length < 15; i++) { const x = Math.random()*(canvas.width-24);
        const y = Math.random()*(canvas.height-24); if(isPositionValid(x, y, 24, 24)) mines.push({x,y,width:24,height:24});}}
        function initializePlayer() { if (!selectedCharacter) return;
        player = { x: canvas.width / 2 - 8, y: canvas.height - 21, width: 16, height: 16, bitmap: characterBitmaps[selectedCharacter] };
        }
        function clearCanvas() { ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
        function drawTrophy() { if(trophy) { ctx.fillStyle = TRUNK_C;
        ctx.fillRect(trophy.x + 7, trophy.y + 18, 6, 12); ctx.fillStyle = GC; ctx.beginPath();
        ctx.arc(trophy.x + 10, trophy.y + 10, 10, 0, Math.PI * 2); ctx.fill(); ctx.fillStyle = LGC; ctx.beginPath();
        ctx.arc(trophy.x + 8, trophy.y + 8, 6, 0, Math.PI * 2); ctx.fill();
        } }
        function drawMines() { mines.forEach(m => drawBitmap(ctx, simpleBombBitmap, m.x, m.y));
        }
        function drawPlayer() { if (player && !isExploding && saucer.state !== 'beaming') drawBitmap(ctx, player.bitmap, player.x, player.y);
        }
        function drawExplosion() { explosionParticles.forEach(p => { ctx.fillStyle = p.color; ctx.fillRect(p.x - p.size/2, p.y - p.size/2, p.size, p.size); });
        }
        function drawSaucer() { if (!saucer.active) return; ctx.fillStyle = SC; ctx.beginPath();
        ctx.ellipse(saucer.x + 20, saucer.y + 10, 20, 10, 0, 0, Math.PI * 2); ctx.fill(); ctx.fillStyle = LG; ctx.beginPath();
        ctx.ellipse(saucer.x + 20, saucer.y + 5, 10, 5, 0, 0, Math.PI * 2); ctx.fill();
        }
        function drawTractorBeam() { if (!saucer.beamActive || !player) return;
        const pX = player.x + 8, pY = player.y + 8; ctx.beginPath(); ctx.moveTo(saucer.x + 6, saucer.y + 20);
        ctx.lineTo(pX - 12, pY); ctx.lineTo(pX + 12, pY); ctx.lineTo(saucer.x + 34, saucer.y + 20); ctx.closePath(); ctx.fillStyle = BC; ctx.fill();
        }
        function checkCollision(r1, r2) { if(!r1 || !r2) return false;
        return r1.x < r2.x + r2.width && r1.x + r1.width > r2.x && r1.y < r2.y + r2.height && r1.y + r1.height > r2.y;
        }
        
        function updatePlayerPosition() {
            if (!player || isGameOver || isExploding) return;
            if (trophy && checkCollision(player, trophy) && saucer.state !== 'beaming') return handleWin();
            if (saucer.state === 'beaming') {
                const dX = saucer.x + 20 - (player.x + 8), dY = saucer.y - (player.y + 8);
                const dist = Math.sqrt(dX*dX + dY*dY);
                if (dist < 16) {
                    playSound('beam', 'stop');
                    player = null;
                    saucer.active = false;
                    saucer.beamActive = false;
                    saucer.state = 'idle';
                    return handleLose("Abducted!");
                }
                player.x += (dX / dist) * 1.5;
                player.y += (dY / dist) * 1.5;
                return;
            }

            let nX = player.x;
            if (moveLeft) nX -= 1.5;
            if (moveRight) nX += 1.5;
            if (nX < 0 || nX + 16 > canvas.width) playSound('collision');
            player.x = Math.max(0, Math.min(canvas.width - 16, nX));
            const nY = player.y - 1.0;
            const triggerY = canvas.height / 2;
            if (nY < triggerY && !saucer.active && approachingTopOutcome === null) {
                if (Math.random() < 0.15) {
                    approachingTopOutcome = 'saucer';
                    saucer.active = true;
                    saucer.state = 'entering';
                    saucer.y = -20;
                    saucer.x = Math.max(0, Math.min(canvas.width-40, player.x-12));
                    saucer.targetY = triggerY - 30;
                } else {
                    approachingTopOutcome = 'space';
                }
            }

            player.y = nY;
            if (player.y + 16 <= 0) return handleLose("Floated into space!");
            if (saucer.state !== 'beaming') {
                for (const m of mines) {
                    if (checkCollision(player, m)) return triggerExplosion(player.x + 8, player.y + 8);
                }
            }
        }
        function updateSaucer() { if (!saucer.active || isExploding || isGameOver) return;
        if (saucer.state === 'entering' && saucer.y < saucer.targetY) { saucer.y += 2; if (saucer.y >= saucer.targetY) { saucer.y=saucer.targetY; saucer.state='beaming'; saucer.beamActive=true;
        playSound('beam','start');}}}
        function updateExplosion() { if (!isExploding) return;
        explosionParticles.forEach((p, i) => { p.x += p.dx; p.y += p.dy; p.life--; if(p.life <= 0) explosionParticles.splice(i,1);}); explosionTimer--;
        if (explosionTimer <= 0 && explosionParticles.length === 0) { isExploding = false; handleLose("Hit a mine!");
        } }
        function triggerExplosion(x,y) { if (isExploding||isGameOver||saucer.state === 'beaming') return; isExploding=true; isGameRunning=false; playSound('explosion');
        explosionTimer=60; explosionParticles=[]; for(let i=0; i<30; i++){const a=(Math.PI*2/30)*i, s=Math.random()*3+1; explosionParticles.push({x,y,dx:Math.cos(a)*s,dy:Math.sin(a)*s,size:Math.random()*3+1,color:`hsl(${Math.random()*60},100%,50%)`,life:Math.random()*30+20});}}
        function gameLoop() { clearCanvas();
        updateSaucer(); if (isExploding) { drawTrophy(); drawMines(); if(saucer.active) drawSaucer(); updateExplosion(); drawExplosion(); } else if (!isGameOver) { drawTrophy(); drawMines(); if (isGameRunning) updatePlayerPosition();
        drawPlayer(); if(saucer.active) drawSaucer(); if(saucer.beamActive) drawTractorBeam(); } else { drawTrophy(); drawMines(); if(saucer.active) drawSaucer(); } animationFrameId = requestAnimationFrame(gameLoop);
        }
        async function startGame() { if (!selectedCharacter) { messageArea.textContent = "Select a character!";
        return; } if (!audioInitialized) await initializeAudio(); if (typeof Tone !== 'undefined') await Tone.start(); proceedWithStart();
        }
        function proceedWithStart() { 
            isGameRunning=true;
            isGameOver=false; isExploding=false; 
            saucer.active=false; saucer.beamActive=false; saucer.state='idle';
            approachingTopOutcome = null; 
            messageArea.textContent = "Go! Reach the Tree!"; 
            defineTrophy(); generateSafePath(); placeMines(); initializePlayer(); 
            startButton.disabled=true; charButtons.forEach(b=>b.disabled=true);
            leftButton.disabled=false; rightButton.disabled=false; 
            if(animationFrameId) cancelAnimationFrame(animationFrameId); 
            gameLoop(); 
        }
        function resetGameAfterDelay() { leftButton.disabled = true;
        rightButton.disabled = true; moveLeft=false; moveRight=false; setTimeout(resetGame, 3000); }
        
        function resetGame() {
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
                animationFrameId = null;
            }
            isGameRunning = false;
            isGameOver = false;
            isExploding = false;
            saucer.active = false;
            saucer.beamActive = false;
            saucer.state = 'idle';
            approachingTopOutcome = null;
            playSound('beam', 'stop');
            player = null;
            mines = [];
            safePathSegments = [];
            updateStatsDisplay();
            messageArea.textContent = "Select character & Start!";
            startButton.disabled = false;
            charButtons.forEach(b => {
                b.disabled = false;
                b.classList.remove('selected');
            });
            selectedCharacter = null;
            leftButton.disabled = true;
            rightButton.disabled = true;
            clearCanvas();
            defineTrophy();
            drawTrophy();
        }
        
        startButton.addEventListener('click', startGame);
        charButtons.forEach(b => { b.addEventListener('click', () => { if(isGameRunning||isGameOver) return; charButtons.forEach(btn=>btn.classList.remove('selected')); b.classList.add('selected'); selectedCharacter = b.dataset.char; messageArea.textContent=`Selected ${selectedCharacter}. Press Start!`; });});
        const handleMove = (key, isDown) => { if(!isGameRunning||isExploding||saucer.state==='beaming') return; if(key==='Left') moveLeft=isDown; if(key==='Right') moveRight=isDown; document.getElementById(key.toLowerCase()+'Button').classList.toggle('keyboard-active', isDown); };
        leftButton.addEventListener('mousedown', ()=>handleMove('Left',true)); leftButton.addEventListener('mouseup', ()=>handleMove('Left',false));
        leftButton.addEventListener('mouseleave', ()=>handleMove('Left',false)); leftButton.addEventListener('touchstart', (e)=>{e.preventDefault();handleMove('Left',true);}); leftButton.addEventListener('touchend',()=>handleMove('Left',false));
        rightButton.addEventListener('mousedown',()=>handleMove('Right',true)); rightButton.addEventListener('mouseup',()=>handleMove('Right',false)); rightButton.addEventListener('mouseleave',()=>handleMove('Right',false)); rightButton.addEventListener('touchstart',(e)=>{e.preventDefault();handleMove('Right',true);}); rightButton.addEventListener('touchend',()=>handleMove('Right',false));
        window.addEventListener('keydown', (e) => { if(e.key==='ArrowLeft') handleMove('Left',true); if(e.key==='ArrowRight') handleMove('Right',true); });
        window.addEventListener('keyup', (e) => { if(e.key==='ArrowLeft') handleMove('Left',false); if(e.key==='ArrowRight') handleMove('Right',false); });

        // 2. RUNTIME: Call the functions to initialize and run the applet.
        debugLog("Applet initializing...");
        if (typeof window.BBS_APPLET_CHECKSUM !== 'undefined') {
             debugLog(`Code Checksum: ${window.BBS_APPLET_CHECKSUM.substring(0, 16)}...`);
        }
        
        const [user, savedData] = await Promise.all([bbs.getUserInfo(), bbs.getData()]);
        debugLog(`User info received for: ${user.username}`);
        const container = document.querySelector('.game-container');
        const welcomeArea = document.createElement('p');
        welcomeArea.textContent = `Welcome, ${user.nickname || user.username}!`;
        welcomeArea.className = 'text-sm text-gray-400 mt-2';
        container.appendChild(welcomeArea);
        
        if (savedData && typeof savedData === 'object' && !Array.isArray(savedData) && savedData !== null) {
            const newStats = { ...stats, ...savedData };
            stats = newStats;
            debugLog("Loaded saved stats from BitSync.");
        } else {
            debugLog("No saved stats found or data was in an invalid format.");
        }
        
        updateStatsDisplay();
        setupUI();
        resetGame();
    } catch (e) {
        messageArea.textContent = "Error initializing with BBS!";
        debugLog(`FATAL ERROR: ${e.message}`);
    }
})();

```

### File: axon_bbs/frontend/src/applets/FortressOverlord.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/applets/FortressOverlord.js
// --- Start of Applet API Helper (MANDATORY) ---
window.bbs = {
  _callbacks: {},
  _requestId: 0,
  _handleMessage: function(event) {
    const { command, payload, requestId, error } = event.data;
    if (command && command.startsWith('response_') && this._callbacks[requestId]) {
      const { resolve, reject } = this._callbacks[requestId];
      if (error) { reject(new Error(error)); } else { resolve(payload); }
      delete this._callbacks[requestId];
    }
  },
  _postMessage: function(command, payload = {}) {
    return new Promise((resolve, reject) => {
      const requestId = this._requestId++;
      this._callbacks[requestId] = { resolve, reject };
      window.parent.postMessage({ command, payload, requestId }, '*');
    });
  },
  getUserInfo: function() { return this._postMessage('getUserInfo'); },
  getData: function() { return this._postMessage('getData');
  },
  saveData: function(newData) { return this._postMessage('saveData', newData); },
  getAppletInfo: function() { return this._postMessage('getAppletInfo');
  },
  postEvent: function(eventData) { return this._postMessage('postEvent', eventData); },
  readEvents: function() { return this._postMessage('readEvents'); }
};
window.addEventListener('message', (event) => window.bbs._handleMessage(event));
// --- End of Applet API Helper ---


// --- Main Applet Execution ---
try {
(async function() {
    // --- 1. SETUP: Styles, HTML, and Game Configuration ---
    // --- UPDATED: Version number incremented for new feature ---
    const APPLET_VERSION = "v8.0"; 

    const styles = `
        :root {
            --gunmetal-dark: #121518; --gunmetal-medium: #1d2125; --gunmetal-light: #2a2f34;
            --border-color: #0c0e10; --text-primary: #e2e8f0; --accent-green: #32cd32;
            --accent-red: #d94a4a; --shadow-color: rgba(0,0,0,0.5);
        }
        html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; }
        body { font-family: 'Lucida Console', 'Courier New', monospace; background-color: var(--gunmetal-dark); color: var(--text-primary); display: flex; align-items: center; justify-content: center; }
        
        body.console-active {
            align-items: initial;
            justify-content: initial;
        }

        #site-selection-screen { width: 100%; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center; background: var(--gunmetal-dark); }
        #globe-container { width: 68vmin;
height: 68vmin; max-width: 600px; max-height: 600px; cursor: pointer; }
        .selection-header { text-align: center;
margin-bottom: 20px; }
        .selection-header h1 { font-size: 2rem; color: var(--accent-green);
text-shadow: 0 0 5px var(--accent-green); margin: 0; }
        .selection-header p { color: var(--text-primary);
margin-top: 5px; }
        #confirm-landing-button { background-color: var(--accent-green); color: #000; border: 2px solid #55ff55;
padding: 10px 20px; font-size: 1.2rem; font-family: inherit; cursor: pointer; margin-top: 20px; box-shadow: 0 0 10px var(--accent-green); transition: all 0.2s;
        }
        #confirm-landing-button:disabled { background-color: var(--gunmetal-medium); color: #666; border-color: var(--border-color); box-shadow: none; cursor: not-allowed;
        }
        #force-reset-button { background-color: var(--accent-red); color: #fff; border: 1px solid #ff7b7b;
padding: 8px 15px; font-size: 0.9rem; font-family: inherit; cursor: pointer; margin-top: 20px; opacity: 0.7;
        }
        #force-reset-button:hover { opacity: 1.0;
        }

        #console-screen { display: none; width: 100%; height: 100%;
        }
        .console-container {
            width: 100%;
height: 100%; max-width: 1920px; max-height: 1080px;
            background: linear-gradient(145deg, var(--gunmetal-light), var(--gunmetal-medium));
            padding: 20px; box-sizing: border-box; display: grid; grid-template-columns: 320px 1fr 320px;
grid-template-rows: auto 1fr; gap: 15px; border: 3px solid var(--border-color);
            border-radius: 15px;
box-shadow: inset 0 0 15px var(--shadow-color), 0 0 20px var(--shadow-color);
            position: relative;
        }
        .panel { background: linear-gradient(var(--gunmetal-medium), var(--gunmetal-dark)); border: 2px solid var(--border-color); border-radius: 6px;
padding: 15px; display: flex; flex-direction: column; box-shadow: inset 0 0 10px var(--shadow-color);
        }
        .center-panel { padding: 15px; display: flex; flex-direction: column;
        }
        .header { grid-column: 1 / -1; text-align: center; padding-bottom: 10px;
border-bottom: 3px solid var(--border-color); }
        .header h1 { margin: 0; font-size: 1.8rem;
color: var(--accent-green); text-shadow: 0 0 5px var(--accent-green); }
        .version-tag { position: absolute;
top: 25px; right: 25px; font-size: 0.8rem; color: #666; }
        .emergency-light { position: absolute;
top: -12px; left: 50%; transform: translateX(-50%); width: 40px; height: 20px; background: radial-gradient(circle at 50% 100%, #ff4b4b, #a71d1d);
border-radius: 15px 15px 0 0; border: 2px solid #000; box-shadow: 0 -2px 10px var(--accent-red), inset 0 -2px 5px rgba(0,0,0,0.6);
z-index: 10; }
        .emergency-light::after { content: ''; position: absolute; top: 3px; left: 10px;
width: 20px; height: 4px; background: rgba(255, 255, 255, 0.6); border-radius: 50%; filter: blur(2px); transform: rotate(-10deg);
        }
        h2, h3 { font-size: 1.2rem; color: var(--accent-green); border-bottom: 1px solid var(--border-color);
padding-bottom: 8px; margin-top: 0; text-transform: uppercase; letter-spacing: 1px; }
        h3 { font-size: 1rem;
margin-bottom: 10px; }
        .gauge-container { display: grid; grid-template-columns: 1fr 1fr; gap: 10px;
        }
        .telemetry-screen, .main-panel-content, .command-log { background-color: #080c08; border: 2px solid #223a22; border-radius: 4px;
color: var(--accent-green); position: relative; overflow: hidden; }
        .telemetry-screen::after, .main-panel-content::after, .command-log::after { content: ' ';
display: block; position: absolute; top: 0; left: 0; right: 0; bottom: 0;
background: linear-gradient(to bottom, rgba(30, 60, 30, 0.15) 50%, rgba(10, 20, 10, 0.2) 50%); background-size: 100% 4px; pointer-events: none; z-index: 2;
        }
        .telemetry-screen { flex-grow: 1; display: flex; flex-direction: column;
        }
        .main-panel-content { flex-grow: 1; padding: 0; box-sizing: border-box; display: flex; flex-direction: column;
        }
        #map-canvas.crosshair-cursor { cursor: crosshair;
        }
        .view-toggles { display: flex; gap: 5px; margin-bottom: 10px;
        }
        .view-toggles button { background-color: var(--gunmetal-medium); border: 2px solid var(--border-color); color: var(--text-primary);
padding: 5px 10px; cursor: pointer; font-family: inherit; font-size: 0.8rem; box-shadow: inset 0 2px 5px rgba(0,0,0,0.4);
        }
        .view-toggles button.active { background-color: var(--accent-green); color: #000; font-weight: bold; border-color: #55ff55;
        }
        .resource-display, .command-log { font-size: 0.9rem;
        }
        .resource-display div { display: flex; justify-content: space-between; padding: 2px 0;
        }
        .command-log { height: 200px; overflow-y: auto; margin-top: 10px; padding: 5px; font-size: 0.8rem;
        }
        .log-entry { margin-bottom: 4px;
        }
        .log-entry.info { color: var(--accent-green);
        }
        .log-entry.warn { color: #facc15;
        }
        .log-entry.error { color: var(--accent-red);
        }
        .replay-link { color: #60a5fa; text-decoration: underline; cursor: pointer; margin-left: 5px;
        }
        #video-playback-screen { height: 120px; background-color: #000; margin-bottom: 10px; border: 2px solid #223a22;
border-radius: 4px; }
        #sensor-feed-display { flex-grow: 1; background-color: #080c08; border: 2px solid #223a22;
border-radius: 4px; display: flex; align-items: center; justify-content: center; font-size: 0.9rem; padding: 10px; box-sizing: border-box;
        }
        #debug-dialog { display: none; position: absolute; bottom: 10px; right: 10px; width: 350px;
height: 250px; background-color: rgba(0,0,0,0.8); border: 1px solid var(--accent-green); border-radius: 5px; color: #fc8181; font-family: inherit; font-size: 12px; overflow-y: scroll; padding-top: 25px;
z-index: 1000; }
        #debug-header { position: absolute; top: 0; left: 0; right: 0;
background-color: var(--accent-green); color: #000; font-weight: bold; padding: 3px; cursor: move; user-select: none;
        }
        #reset-button { background-color: var(--accent-red); color: #fff; border: 1px solid #ff7b7b; padding: 8px;
font-family: inherit; cursor: pointer; margin-top: auto; }
        .management-list { list-style: none; padding: 0;
margin: 0; overflow-y: auto; flex-grow: 1; }
        .management-item { background-color: var(--gunmetal-medium); padding: 10px;
border-radius: 4px; margin-bottom: 8px; border: 1px solid var(--border-color); }
        .management-item-header { display: flex;
justify-content: space-between; align-items: center; }
        .management-item-title { font-weight: bold; color: var(--text-primary);
        }
        .management-item-body { font-size: 0.8rem; color: #a0aec0; margin-top: 8px;
        }
        .management-item-actions button { font-size: 0.7rem; padding: 4px 8px; background-color: var(--gunmetal-light);
border: 1px solid var(--border-color); color: var(--text-primary); cursor: pointer; margin-left: 5px; border-radius: 3px;
        }
        .management-item-actions button:hover { background-color: var(--accent-green); color: #000;
        }
        #confirm-modal { display: none; position: absolute; top: 0; left: 0; right: 0;
bottom: 0; background-color: rgba(0,0,0,0.7); z-index: 2000; align-items: center; justify-content: center;
        }
        .modal-content { background-color: var(--gunmetal-dark); padding: 20px; border-radius: 8px; border: 2px solid var(--border-color);
text-align: center; }
        .modal-content p { margin-bottom: 20px; }
    `;
    document.head.appendChild(Object.assign(document.createElement("style"), { innerText: styles }));

    document.getElementById('applet-root').innerHTML = `
        <div id="debug-dialog"><div id="debug-header">DEBUG CONSOLE</div></div>
        <div id="site-selection-screen">
            <div class="selection-header">
                <h1>Establish Fortress Location</h1>
                <p>Rotate globe and select a landing zone.</p>
            </div>
            <div id="globe-container"></div>
            <button id="confirm-landing-button" disabled>CONFIRM LANDING SITE</button>
            <button id="force-reset-button">FORCE RESET GAME DATA</button>
        </div>
        <div id="console-screen">
            <div class="console-container">
                <div class="emergency-light"></div>
                <div class="header">
                    <h1>FORTRESS OVERLORD</h1>
                    <div class="version-tag">Version ${APPLET_VERSION}</div>
                </div>
                <div class="panel left-panel">
                    <h2>SYSTEM STATUS</h2>
                    <div class="gauge-container" id="gauge-display"></div>
                    <h2>DRONE TELEMETRY</h2>
                    <div class="telemetry-screen" id="telemetry-display">
                        <div id="video-playback-screen"></div>
                        <div id="sensor-feed-display"><p>NO SIGNAL</p></div>
                    </div>
                    <button id="reset-button">RESET GAME STATE</button>
                </div>
                <div class="panel center-panel">
                    <div class="view-toggles" id="view-toggles">
                        <button class="active" data-view="map">STRAT-MAP</button>
                        <button data-view="buildings">BUILDINGS</button>
                        <button data-view="units">UNITS</button>
                    </div>
                    <div class="main-panel-content" id="main-view"></div>
                </div>
                <div class="panel right-panel">
                    <h2>RESOURCES</h2>
                    <div class="resource-display" id="resource-display"></div>
                    <h2>COMMAND LOG</h2>
                    <div class="command-log" id="event-log"></div>
                </div>
            </div>
        </div>
        <div id="confirm-modal">
            <div class="modal-content">
                <p id="modal-text"></p>
                <div>
                    <button id="modal-yes" class="management-item-actions button">Yes</button>
                    <button id="modal-no" class="management-item-actions button">No</button>
                </div>
            </div>
        </div>
    `;

    // --- Start of functions ---
    let userInfo = null, gameState = null;
    const confirmButton = document.getElementById('confirm-landing-button');
    const modal = document.getElementById('confirm-modal');
    const modalText = document.getElementById('modal-text');
    const modalYes = document.getElementById('modal-yes');
    const modalNo = document.getElementById('modal-no');
    let modalConfirmCallback = null;
    function showConfirmModal(text, onConfirm) {
        modalText.textContent = text;
        modalConfirmCallback = onConfirm;
        modal.style.display = 'flex';
    }

    modalYes.addEventListener('click', () => {
        if (modalConfirmCallback) modalConfirmCallback();
        modal.style.display = 'none';
    });
    modalNo.addEventListener('click', () => {
        modal.style.display = 'none';
    });
    function setupDebugConsole() { if (window.BBS_DEBUG_MODE === true) { /* ... */ } }
    function debugLog(message) { if (window.BBS_DEBUG_MODE !== true) return;
        const debugDialog = document.getElementById('debug-dialog');
        if (!debugDialog) return;
        const logEntry = document.createElement('div');
        logEntry.textContent = `> ${message}`;
        debugDialog.appendChild(logEntry);
        debugDialog.scrollTop = debugDialog.scrollHeight;
    }
    
    function logEvent(message, level = 'info', eventData = {}) {
        const eventLogEl = document.getElementById('event-log');
        if (!eventLogEl) return;
        const entry = document.createElement('div');
        entry.classList.add('log-entry', level);
        entry.textContent = `> ${message}`;
        if (eventData.replayData) {
            const replayLink = document.createElement('span');
            replayLink.className = 'replay-link';
            replayLink.textContent = '[Play Replay]';
            replayLink.dataset.replay = JSON.stringify(eventData.replayData);
            entry.appendChild(replayLink);
        }

        eventLogEl.appendChild(entry);
        eventLogEl.scrollTop = eventLogEl.scrollHeight;
    }

    function getInitialGameState() { 
        return { 
            resources: { rawOre: 0, crystals: 200, alloy: 100 }, 
            power: { current: 50, max: 100 }, 
            temperature: 25.5, 
            pressure: 101.3, 
            oxygen: 98.2,
            landingSite: null,
            drones: [
                { id: 'drone_01', type: 'Scout', status: 'Idle', x: 60, y: -30, health: 100, inventory: { rawOre: 0 }, is_in_comms_range: true }
            ],
            buildings: [
                { id: 'cc_01', type: 'Command Center', x: 0, y: 0, health: 1000 }
            ],
            mapFeatures: [
                { id: 'ore_01', type: 'Ore Deposit', x: -80, y: 50 },
                { id: 'gas_01', type: 'Hydrogen Geyser', x: 100, y: 120 }
            ]
        };
    }
    
    // --- UPDATED: ensureThreeJsIsLoaded now also ensures the GLTFLoader is available ---
    function ensureThreeJsIsLoaded() {
        return new Promise((resolve, reject) => {
            if (typeof THREE !== 'undefined' && THREE.GLTFLoader) {
                resolve();
                return;
            }
            // Load base three.js first
            const threeScript = document.createElement('script');
            threeScript.src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js";
            threeScript.onload = () => {
                // After it loads, load the GLTFLoader
                const loaderScript = document.createElement('script');
                loaderScript.src = "https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js";
                loaderScript.onload = resolve;
                loaderScript.onerror = reject;
                document.head.appendChild(loaderScript);
            };
            threeScript.onerror = reject;
            document.head.appendChild(threeScript);
        });
    }

    function initSiteSelection() {
        const globeContainer = document.getElementById('globe-container');
        let scene, camera, renderer, globe, marker, raycaster, mouse;
        let isDragging = false, previousMousePosition = { x: 0, y: 0 };
        
        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, globeContainer.clientWidth / globeContainer.clientHeight, 0.1, 1000);
            camera.position.z = 1.5;
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(globeContainer.clientWidth, globeContainer.clientHeight);
            globeContainer.appendChild(renderer.domElement);

            const texture = new THREE.CanvasTexture(createVenusTexture());
            const material = new THREE.MeshBasicMaterial({ map: texture });
            const geometry = new THREE.SphereGeometry(1, 32, 32);
            globe = new THREE.Mesh(geometry, material);
            scene.add(globe);

            raycaster = new THREE.Raycaster();
            mouse = new THREE.Vector2();
            
            renderer.domElement.addEventListener('mousedown', onMouseDown);
            renderer.domElement.addEventListener('mousemove', onMouseMove);
            renderer.domElement.addEventListener('mouseup', onMouseUp);
            renderer.domElement.addEventListener('click', onClick);
            window.addEventListener('resize', onWindowResize, false);
            animate();
        }

        function createVenusTexture() {
            const canvas = document.createElement('canvas');
            canvas.width = 512; canvas.height = 256;
            const ctx = canvas.getContext('2d');
            ctx.fillStyle = '#D2691E';
            ctx.fillRect(0, 0, 512, 256);
            for(let i=0; i<30; i++) {
                ctx.fillStyle = `rgba(165, 42, 42, ${Math.random()*0.4+0.2})`;
                ctx.beginPath(); ctx.arc(Math.random()*512, Math.random()*256, Math.random()*50+10, 0, Math.PI*2); ctx.fill();
            }
            ctx.strokeStyle = "rgba(0,0,0,0.2)";
            for(let i=0; i<512; i+=32) { ctx.beginPath(); ctx.moveTo(i,0); ctx.lineTo(i,256); ctx.stroke(); }
            for(let i=0; i<256; i+=32) { ctx.beginPath();
                ctx.moveTo(0,i); ctx.lineTo(512,i); ctx.stroke(); }
            return canvas;
        }

        function onMouseDown(event) { isDragging = true; previousMousePosition.x = event.clientX; previousMousePosition.y = event.clientY;
        }
        function onMouseMove(event) { if (isDragging) { const dX = event.clientX-previousMousePosition.x, dY = event.clientY-previousMousePosition.y;
            globe.rotation.y += dX*0.005; globe.rotation.x += dY*0.005; previousMousePosition.x=event.clientX; previousMousePosition.y=event.clientY; } }
        function onMouseUp() { isDragging = false;
        }
        
        function onClick(event) {
            const rect = renderer.domElement.getBoundingClientRect();
            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
            raycaster.setFromCamera(mouse, camera);
            const intersects = raycaster.intersectObject(globe);
            if (intersects.length > 0) {
                const point = intersects[0].point;
                if (!marker) {
                    const markerGeo = new THREE.SphereGeometry(0.03, 16, 16);
                    const markerMat = new THREE.MeshBasicMaterial({ color: 0x32cd32 });
                    marker = new THREE.Mesh(markerGeo, markerMat); scene.add(marker);
                }
                marker.position.copy(point);
                confirmButton.disabled = false;
                gameState.landingSite = { x: point.x, y: point.y, z: point.z };
            }
        }
        function onWindowResize() { 
            if(renderer && camera && globeContainer){
                camera.aspect = globeContainer.clientWidth / globeContainer.clientHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(globeContainer.clientWidth, globeContainer.clientHeight); 
            }
        }
        function animate() { requestAnimationFrame(animate);
            renderer.render(scene, camera); }
        
        init();
    }
    
    function initCommandConsole() {
        document.body.classList.add('console-active');
        const consoleScreen = document.getElementById('console-screen');
        const siteSelectionScreen = document.getElementById('site-selection-screen');
        siteSelectionScreen.style.display = 'none';
        consoleScreen.style.display = 'block';

        const gaugeDisplay = document.getElementById('gauge-display');
        const resourceDisplayEl = document.getElementById('resource-display');
        const mainViewEl = document.getElementById('main-view');
        const resetButton = document.getElementById('reset-button');
        const sensorFeedEl = document.getElementById('sensor-feed-display');
        const eventLogEl = document.getElementById('event-log');
        let processedEventIds = new Set();
        let commandState = { active: false, command: null, sourceId: null, payload: {} };
        mainViewEl.innerHTML = `
            <div id="view-map" style="width:100%; height:100%; display:block; background-color: #080c08;">
                <canvas id="map-canvas" style="width: 100%; height: 100%;"></canvas>
            </div>
            <div id="view-buildings" style="width:100%; height:100%; display:none; flex-direction: column;"></div>
            <div id="view-units" style="width:100%; height:100%; display:none; flex-direction: column;"></div>
        `;
        const viewMap = mainViewEl.querySelector('#view-map');
        const viewBuildings = mainViewEl.querySelector('#view-buildings');
        const viewUnits = mainViewEl.querySelector('#view-units');
        const mapCanvas = document.getElementById('map-canvas');
        async function submitCommand(subject, body) {
            try {
                await bbs.postEvent({ subject, body: JSON.stringify(body) });
                logEvent(`CMD SUBMIT: ${subject} ${JSON.stringify(body)}`, 'info');
            } catch (e) {
                logEvent(`CMD FAILED: ${e.message}`, 'error');
                debugLog(`Failed to post event: ${e.message}`);
            }
        }

        async function pollForEvents() {
            try {
                const latestData = await bbs.getData();
                if (latestData) {
                    gameState = { ...getInitialGameState(), ...latestData };
                    renderGauges();
                    renderResources();
                    const currentView = document.querySelector('#view-toggles button.active')?.dataset.view || 'map';
                    renderMainView(currentView);
                }

                const events = await bbs.readEvents();
                const newEvents = events.filter(e => !processedEventIds.has(e.id));

                if (newEvents.length > 0) {
                    newEvents.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
                    for (const event of newEvents) {
                        processedEventIds.add(event.id);
                        if (event.author_display === 'overlord_agent') {
                            try {
                                const eventBody = JSON.parse(event.body);
                                logEvent(`AGENT: ${eventBody.summary}`, 'info', eventBody);
                            } catch (e) {
                                logEvent(`AGENT RAW: ${event.body}`, 'warn');
                            }
                        }
                    }
                }
            } catch (e) {
                debugLog(`Failed to poll for events: ${e.message}`);
            }
        }
        
        // --- NEW: Embedded Base64 model data ---
        const DRONE_MODEL_BASE64 = 'Z2xURgIAAAAUAgAA+FwAAEFRU0gBAAAAART/AP8AAwAEAAgADgAQAFIAlgAAAAABAAMAAgAYAK4BAgACAAkADwATAFsBGAACAAkADwATAFwAGgACAAoAFAAXAGAA/wAAAwADAAQACAARAEcBGgADAAQACAARAEgAGgADAAUADAAQAEwBGQADAAUADAAQAE0AHAADAAcACQAWAFIAAgAHAAkAFgBTAAoAAQABAAAAAKgBAAAAAAAAAAABAAIAAwAEAAUABgAHAAgACQAaAAAAAAAAAAAAAAsADAANAA4ADwAQABEAEgATABQAFQAWABcAGAAAAAAAAAAYAKABAAAAAgAAAAAAAQAAAAAAAQAAAAAAAgAAAAAAAAADAAAAAAAAAAMAAAAAAAQAAAAAAAQAAAAABQAAAAAABQAAAAAABgAAAAAABgAAAAAABwAAAAAABwAAAAAACAAAAAAACAAAAAAACQAAAAAACQAAAAAZAAAAAAAAAAAAQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AANXU1AA1dXUANXV1AAABAAAAAAAAAAAAQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AQDA/AACAPwAAgD8AANXU1AA1dXUANXV1AAABAAAAAAAAAAAAAAsAEwALABMAAAAUABEAEQAAABUAEQARAAAAFgAIAAQAAAAWAAgABAAAAAIAAAACAAAACgAAAAoAAAACAAAACgAAAAoAAAAIAAAACAAAABIAAAAQAAAACAAAABAAAAASAAAADAAAAAwAAAAOAAAADgAAAAwAAAAOAAAADgAAAAEAAAABAAAAAwAAAAMAAAABAAAAAwAAAAMAAAAEAAAABAAAABYAAAAIAAAABAAAAAYAAAAGAAAAFwAAAAcAAAAHAAAABQAAAAUAAAAXAAAABQAAAAUAAAAHAAAABwAAADIAAwALAAwACwADACoABgAJAAsACQAGACgAEAARAA8AFAAPABEADwAWABcAFAAXABYAEQAUABIAEwASABQAEQATABIAHAAbABkAGgAZABsAHAAYADIANgA0ADMAMwA0ADYALgAyADEALwAvADEAMgAuACwALgAtACsAKwAtAC4ALAAtACsALQAwADQAOAA3ADcANAAwADYAOQA4ADUAOAA5ADYAQgBBAEMARABDAEEAQgA+AEUARgBFAEYARQBFAEYARQA+AEYARQBEAEYASABHAEYASQBGAEkASABGAEcASQBHAE4ATQBMAE8ATABNAE4ASwBMAFEAUABPAFEATwBQAFAAUwBWAFAAVgBTAFAAUABWAFMAWQBYAFUAWgBVAFIXAFgAWQBVAFoAVgBVAHgAdwB6AHsAegB3AHgAdgB5AHwAeQCBAH4AfgCBAHwAeQB+AIEAfAB4AIIAgwCEAIUAhACDAIIAfwB/AIMAggCEAIUAfgCEAIMAfwCJAIsAigCLAIsAiQCIAIgAiQCKAIsAiQCMAJAAjwCQAJAAjgCOAJAAjwCQAEsAUgBRAFMAUQBSAEsAUwBNAFQAVQBUAE0AUwBVAFQAVgBXAFYAWAALABQAHAAbABwAFQAJABgAFwAYAAkAFQAXAAgAGQAWABkACAAZABYAEQAaABMAEQAaABMADgAbABEADgAbABEADgAZAAwADQAMABkADAAaABUAGgAVABUAGgAMABkAFwAMAAkACwANAAkADQALAAQACAAFAAQABQAIAAAABgACAAIABgAAAAEAAwAAAAEDAAMAAgACAAQACAAFAAQABQAIAAAABgAAAAAAAAMAAAAAAAAGAAEAAgAAAAMAAQAAAAAGAAABAAIAAAADAAEAAwAAAAMAAAAAAAUABgAAAAUABgAEAAQABAAEAAUABgAAAAUABgAAAAAAAQAAAAMAAQADAAEAAQAAAAEABAAEAAQABAAEAAQAAAAEAAAAAwAAAAEAAwABAAMAAAAAAAADAAEAAgAAAAMAAQAAAAAAAQADAAMAAgACAAEAAAAAAAABAAIAAAACAAEAAAAAAAAGAAcACAAHAAYACQAJAAYACAAJAAcABwAAAAcAAAAJAAAABwAJAAcAAAAAAAYACAAGAAgABgAAAAAABgAHAAcACAAHAAYACQAJAAYACAAJAAcABwAAAAcAAAAJAAAABwAJAAcAAAAAAAAGAAgABgAIAAYACQAJAAYACAAJAAcABwAAAAcAAAAJAAAABwAJAAcAAAAAAAAGAAgABgAIAAYACQAJAAYACAAJAAcABwAAAAcAAAAJAAAABwAJAAcACQAJAAcACQAJAAcAAQAAAAEAAgAAAAIAAQACAAEAAgABAAMAAwAEAAQAAwAEAAQAAwAFAAUABgAGAAYABQAFAAYAAQAAAAEAAgAAAAIAAQACAAEAAgABAAMAAwAEAAQAAwAEAAQAAwAFAAUABgAGAAYABQAFAAYAAgACAAUABQACAAUAAgACAAUAAgAGAAQABgAEAAQAAgAGAAQABgAEAAQABAAGAAQAAgACAAUABQACAAUAAgACAAUAAgAGAAQABgAEAAQAAgAGAAQABgAEAAQABAAGAAQAEQAOAA8ADgANAAsADQANAAsAEQAOAA8ADgANAAsADQANAAsAHAAYABkAGAAcABgAHAAYABwAGAAcABgAGABMAUgBRAFIAUwBSAFMAUgBSAFMAUgBSAFMAUgBSAFIAAAAAAHcBAAAl/gEBAAAAAAAAAPA/AAAAAAAAAAAAAAB/AQAANf4BAQAAAAAAAADwPwAAAAAAAQAAAAIAAAMABAAFAAYABwAIAAkACgALAAwADQAOAA8AEAARABIAEwAUABUAFgAXABgAGQAaABsAHAAdAB4AHwAgACEAIgAjACQAJQAmACcAKAApACoAKwAsAC0ALgAvADAAMQAyADMANAA1ADYANwA4ADkAOgA7ADwAPQA+AD8AQABBAEIAQwBEAEUARgBHAHgAAAAAAACAgQAAAAAAgIEAAAAAAACAgQAAAAAAAIA=';

        // --- NEW: Helper function to decode Base64 model data ---
        function base64ToArrayBuffer(base64) {
            const binary_string = window.atob(base64);
            const len = binary_string.length;
            const bytes = new Uint8Array(len);
            for (let i = 0; i < len; i++) {
                bytes[i] = binary_string.charCodeAt(i);
            }
            return bytes.buffer;
        }

        function play3DReplay(replayData) {
            const container = document.getElementById('video-playback-screen');
            container.innerHTML = '';
            
            if (typeof THREE === 'undefined' || !THREE.GLTFLoader) {
                container.innerHTML = '<p style="color:red;">Error: 3D loaders not ready.</p>';
                return;
            }

            try {
                const scene = new THREE.Scene();
                const renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setSize(container.clientWidth, container.clientHeight);
                container.appendChild(renderer.domElement);
                
                scene.background = new THREE.Color(0x080c08);
                const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
                camera.position.set(0, 2.5, 4);
                camera.lookAt(0, 0, 0);

                scene.add(new THREE.AmbientLight(0xffffff, 0.7));
                const light = new THREE.DirectionalLight(0xffffff, 1);
                light.position.set(2, 5, 3);
                scene.add(light);

                const loader = new THREE.GLTFLoader();
                const modelData = base64ToArrayBuffer(DRONE_MODEL_BASE64);

                loader.parse(modelData, '', (gltf) => {
                    const drone = gltf.scene;
                    drone.scale.set(1.5, 1.5, 1.5);
                    scene.add(drone);
                    
                    function animate() {
                        requestAnimationFrame(animate);
                        drone.rotation.y += 0.01;
                        renderer.render(scene, camera);
                    }
                    animate();
                }, (error) => {
                    console.error('An error happened while loading the model:', error);
                    container.innerHTML = `<p style="color:red;">Error: Could not load 3D model.</p>`;
                });
            } catch(e) {
                container.innerHTML = '<p style="color:red;">3D Replay Error: ' + e.message + '</p>';
                console.error("Error during 3D replay setup:", e);
            }
        }

        function drawGauge(id, label, value, max) {
            let canvas = document.getElementById(id);
            if (!canvas) {
                const gaugeWrapper = document.createElement('div');
                gaugeWrapper.className = 'gauge';
                gaugeWrapper.innerHTML = `<canvas id="${id}" width="120" height="80"></canvas><div style="text-align:center; font-size: 0.8em; color: var(--text-primary);">${label}</div>`;
                gaugeDisplay.appendChild(gaugeWrapper);
                canvas = document.getElementById(id);
            }
            const ctx = canvas.getContext('2d');
            const percent = Math.min(Math.max(value / max, 0), 1);
            ctx.clearRect(0,0,120,80); ctx.strokeStyle='#000'; ctx.lineWidth=10; ctx.beginPath(); ctx.arc(60,60,40,Math.PI,2*Math.PI); ctx.stroke();
            ctx.strokeStyle='#2a2f34'; ctx.lineWidth=8; ctx.beginPath(); ctx.arc(60,60,40,Math.PI,2*Math.PI); ctx.stroke();
            ctx.strokeStyle=`hsl(${(1-percent)*120}, 80%, 50%)`; ctx.beginPath(); ctx.arc(60,60,40,Math.PI,Math.PI+(percent*Math.PI)); ctx.stroke();
            ctx.fillStyle='var(--text-primary)'; ctx.font='16px "Lucida Console", monospace'; ctx.textAlign='center'; ctx.fillText(Math.round(value), 60, 60);
        }
        function renderGauges() { if (!gameState) return; const p=gameState.power||{c:0,m:100}; drawGauge('temp-gauge','TEMP',gameState.temperature||25,50); drawGauge('pressure-gauge','PRESSURE',gameState.pressure||101,120); drawGauge('oxygen-gauge','OXY',gameState.oxygen||98,100); drawGauge('power-gauge','POWER',p.current,p.max);
        }
        function renderResources() { if (!gameState) return; const r=gameState.resources||{c:0,a:0};
            resourceDisplayEl.innerHTML=`<div><span>RAW ORE:</span><span style="color:var(--accent-green);">${Math.floor(r.rawOre || 0)}</span></div><div><span>CRYSTALS:</span><span style="color:var(--accent-green);">${Math.floor(r.crystals)}</span></div><div><span>ALLOY:</span><span style="color:var(--accent-green);">${Math.floor(r.alloy)}</span></div>`;}
        
        function renderMainView(view) {
            document.querySelectorAll('#view-toggles button').forEach(b => b.classList.remove('active'));
            document.querySelector(`#view-toggles button[data-view="${view}"]`).classList.add('active');
            
            viewMap.style.display = 'none';
            viewBuildings.style.display = 'none';
            viewUnits.style.display = 'none';
            if (view === 'map') {
                viewMap.style.display = 'block';
                drawStrategicMap();
            } else if (view === 'buildings') {
                viewBuildings.style.display = 'flex';
                renderBuildingView();
            } else if (view === 'units') {
                viewUnits.style.display = 'flex';
                renderUnitView();
            }
        }
        
        function displayTelemetry(obj) {
            if (!obj) {
                sensorFeedEl.innerHTML = '<p>NO SIGNAL</p>';
                return;
            }
            let html = `<div style="text-align: left; width: 100%; font-size: 0.8rem;">`;
            html += `<div><strong>ID:</strong> ${obj.id}</div>`;
            html += `<div><strong>TYPE:</strong> ${obj.type}</div>`;
            if (obj.status) html += `<div><strong>STATUS:</strong> ${obj.status}</div>`;
            if (obj.health) html += `<div><strong>INTEGRITY:</strong> ${obj.health}%</div>`;
            if (obj.inventory) html += `<div><strong>CARGO:</strong> ${obj.inventory.rawOre || 0} Raw Ore</div>`;
            if (obj.is_in_comms_range === false) html += `<div style="color:var(--accent-red)"><strong>COMMS:</strong> OUT OF RANGE</div>`;
            html += `</div>`;
            sensorFeedEl.innerHTML = html;
        }

        function renderBuildingView() {
            let html = `<h3>BUILDING MANAGEMENT</h3>`;
            html += `<ul class="management-list">`;
            (gameState.buildings || []).forEach(b => {
                html += `
                    <li class="management-item" data-id="${b.id}">
                        <div class="management-item-header">
                            <span class="management-item-title">${b.type} (${b.id})</span>
                        </div>
                        <div class="management-item-body">
                            <span>INTEGRITY: ${b.health}/1000</span>
                        </div>
                    </li>
                `;
            });
            html += `</ul>`;
            viewBuildings.innerHTML = html;
        }

        function renderUnitView() {
            let html = `<h3>DRONE ROSTER</h3>`;
            html += `<ul class="management-list">`;
            (gameState.drones || []).forEach(d => {
                html += `
                    <li class="management-item" data-id="${d.id}">
                        <div class="management-item-header">
                            <span class="management-item-title">${d.type} (${d.id})</span>
                            <div class="management-item-actions">
                                <button data-action="build">BUILD</button>
                                <button data-action="harvest-ore">HARVEST</button>
                                <button data-action="stop">STOP</button>
                            </div>
                        </div>
                        <div class="management-item-body">
                            <span>STATUS: ${d.status}</span> | <span>INTEGRITY: ${d.health}%</span>
                        </div>
                    </li>
                `;
            });
            html += `</ul>`;
            viewUnits.innerHTML = html;
        }

        function drawStrategicMap() {
            const canvas = document.getElementById('map-canvas');
            if (!canvas) return;
            const ctx = canvas.getContext('2d');
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const commRange = 200;
            // From GAME_CONFIG

            ctx.fillStyle = '#080c08';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw Comms Range
            ctx.beginPath();
            ctx.arc(centerX, centerY, commRange, 0, Math.PI * 2);
            ctx.strokeStyle = 'rgba(50, 205, 50, 0.2)';
            ctx.fillStyle = 'rgba(50, 205, 50, 0.05)';
            ctx.lineWidth = 1;
            ctx.fill();
            ctx.stroke();

            // Draw Grid
            ctx.strokeStyle = 'rgba(50, 205, 50, 0.15)';
            for(let i=0; i < canvas.width; i+=20) { ctx.beginPath(); ctx.moveTo(i, 0); ctx.lineTo(i, canvas.height); ctx.stroke();
            }
            for(let i=0; i < canvas.height; i+=20) { ctx.beginPath();
                ctx.moveTo(0, i); ctx.lineTo(canvas.width, i); ctx.stroke(); }

            const allObjects = [...(gameState.buildings || []), ...(gameState.drones || []), ...(gameState.mapFeatures || [])];
            allObjects.forEach(obj => {
                const drawX = centerX + obj.x;
                const drawY = centerY + obj.y;

                ctx.strokeStyle = '#fff';
                ctx.fillStyle = 'var(--accent-green)';
                ctx.lineWidth = 1;
                ctx.globalAlpha = 1.0;

                if (obj.is_in_comms_range === false) {
                    ctx.globalAlpha = 0.4;
                }

                if(obj.type.includes('Construction Site')){
                    ctx.globalAlpha = 0.5;
                    ctx.strokeRect(drawX - 5, drawY - 5, 10, 10);
                } else {
                    switch(obj.type) {
                        case 'Command Center':
                            ctx.fillRect(drawX - 5, drawY - 5, 10, 10);
                            ctx.strokeRect(drawX - 5, drawY - 5, 10, 10);
                            break;
                        case 'Scout':
                            ctx.beginPath();
                            ctx.moveTo(drawX, drawY - 6);
                            ctx.lineTo(drawX - 5, drawY + 4);
                            ctx.lineTo(drawX + 5, drawY + 4);
                            ctx.closePath();
                            ctx.stroke();
                            break;
                        case 'Ore Deposit':
                            ctx.fillStyle = '#b0a090';
                            ctx.beginPath();
                            ctx.moveTo(drawX, drawY - 6); ctx.lineTo(drawX + 6, drawY);
                            ctx.lineTo(drawX + 3, drawY + 6);
                            ctx.lineTo(drawX - 3, drawY + 6);
                            ctx.lineTo(drawX - 6, drawY); ctx.closePath();
                            ctx.fill();
                            break;
                        case 'Hydrogen Geyser':
                             ctx.strokeStyle = '#add8e6';
                             ctx.beginPath(); ctx.arc(drawX, drawY, 6, 0, Math.PI*2); ctx.stroke();
                             for(let i=0; i<3; i++){ ctx.beginPath(); ctx.moveTo(drawX - 4 + i*4, drawY - 6);
                                 ctx.quadraticCurveTo(drawX - 6 + i*4, drawY-12, drawX-4+i*4, drawY-18); ctx.stroke();}
                             break;
                        case 'Greenhouse': // Draw the finished building
                            ctx.fillStyle = 'var(--accent-green)';
                            ctx.beginPath();
                            ctx.arc(drawX, drawY, 8, 0, Math.PI * 2);
                            ctx.fill();
                            break;
                    }
                }
                ctx.globalAlpha = 1.0;
            });

            ctx.fillStyle = 'rgba(50, 205, 50, 0.7)';
            ctx.font = '14px "Lucida Console", monospace';
            ctx.textAlign = 'left';
            ctx.fillText('SECTOR 7G // AO: FORTRESS', 10, 20);
        }
        
        viewUnits.addEventListener('click', (e) => {
            if (e.target.tagName !== 'BUTTON') return;
            const action = e.target.dataset.action;
            const itemElement = e.target.closest('.management-item');
            const droneId = itemElement.dataset.id;
            const drone = (gameState.drones || []).find(d => d.id === droneId);

            const performAction = (command, payload) => {
                if (drone && drone.status !== 'Idle') {
                    showConfirmModal(`Drone ${droneId} is busy (${drone.status}). Cancel current task and issue new command?`, () => {
                        submitCommand('CANCEL_TASK', { droneId });
                        submitCommand(command, payload);
                    });
                } else {
                    submitCommand(command, payload);
                }
            };

            if (action === 'harvest-ore') {
                commandState = { active: true, command: 'HARVEST', sourceId: droneId };
                mapCanvas.classList.add('crosshair-cursor');
                logEvent(`Awaiting target for HARVEST command from ${droneId}...`, 'warn');
                renderMainView('map');
            } else if (action === 'build') {
                commandState = { active: true, command: 'BUILD', sourceId: droneId, payload: { buildingType: 'Greenhouse' } };
                mapCanvas.classList.add('crosshair-cursor');
                logEvent(`Awaiting placement location for GREENHOUSE from ${droneId}...`, 'warn');
                renderMainView('map');
            } else if (action === 'stop') {
                performAction('STOP_TASK', { droneId });
            }
        });

        mapCanvas.addEventListener('click', (e) => {
            const canvas = e.target;
            const rect = canvas.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            const clickY = e.clientY - rect.top;
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const worldX = Math.round(clickX - centerX);
            const worldY = Math.round(clickY - centerY);

            const allObjects = [...(gameState.drones || []), ...(gameState.buildings || []), ...(gameState.mapFeatures || [])];
            let clickedObject = null;
            
            for(const obj of allObjects) {
                const objScreenX = centerX + obj.x;
                const objScreenY = centerY + obj.y;
                const distance = Math.sqrt(Math.pow(clickX - objScreenX, 2) + Math.pow(clickY - objScreenY, 2));
                if (distance < 10) { 
                    clickedObject = obj; break; }
            }

            if (commandState.active) {
                const drone = (gameState.drones ||
                    []).find(d => d.id === commandState.sourceId);
                const performAction = (command, payload) => {
                    if (drone && drone.status !== 'Idle') {
                        showConfirmModal(`Drone ${drone.id} is busy (${drone.status}). Cancel current task and issue new command?`, () => {
                            submitCommand('CANCEL_TASK', { droneId: drone.id });
                            submitCommand(command, payload);
                        });
                    } else {
                        submitCommand(command, payload);
                    }
                };
                if (commandState.command === 'HARVEST') {
                    if (clickedObject && (clickedObject.type === 'Ore Deposit' || clickedObject.type === 'Hydrogen Geyser')) {
                        performAction('ASSIGN_TASK', { droneId: commandState.sourceId, task: 'HARVEST', targetId: clickedObject.id });
                    } else { logEvent('Invalid target for HARVEST command.', 'error'); }
                } else if (commandState.command === 'BUILD') {
                    performAction('BUILD', { droneId: commandState.sourceId, buildingType: commandState.payload.buildingType, coords: { x: worldX, y: worldY }});
                }
                commandState = { active: false };
                mapCanvas.classList.remove('crosshair-cursor');
            } else {
                displayTelemetry(clickedObject);
            }
        });

        renderGauges();
        renderResources();
        renderMainView('map');
        
        logEvent("Connecting to Overlord Agent...");
        setTimeout(() => logEvent("Telemetry link established."), 1000);
        setTimeout(() => logEvent(`Welcome, Commander ${userInfo.nickname || userInfo.username}.`), 1500);
        setTimeout(() => logEvent("All systems nominal. Awaiting input."), 2500);
        
        eventLogEl.addEventListener('click', (e) => {
            if (e.target.classList.contains('replay-link')) {
                const replayData = JSON.parse(e.target.dataset.replay);
                play3DReplay(replayData);
            }
        });
        resetButton.addEventListener('click', () => {
            showConfirmModal("This will permanently delete your current fortress and start a new game. Are you sure?", async () => {
                try {
                    await bbs.saveData(getInitialGameState());
                    debugLog("Game state reset. Reloading applet...");
                    window.location.reload();
                } catch (e) {
                    debugLog(`Error resetting game state: ${e.message}`);
                }
            });
        });
        document.getElementById('view-toggles').addEventListener('click', e => { if (e.target.tagName === 'BUTTON') renderMainView(e.target.dataset.view); });
        window.addEventListener('resize', () => { 
            renderGauges(); 
            if (document.querySelector('#view-toggles button[data-view="map"].active')) {
                drawStrategicMap();
            }
        });
        debugLog("Command Console Initialized.");
        setInterval(pollForEvents, 5000);
    }
    
    // --- Main Execution Logic ---
    const appletRoot = document.getElementById('applet-root');
    try {
        await (async function run() {
            setupDebugConsole();
            debugLog("Checkpoint 1: Starting applet...");
            
            // HTML is now defined inside the main innerHTML call below
            debugLog("Checkpoint 2: Initial HTML and styles prepared.");

            await ensureThreeJsIsLoaded();
            debugLog("Checkpoint 3: Three.js library confirmed loaded.");
            
            userInfo = await bbs.getUserInfo();
            let loadedData = await bbs.getData();
            debugLog("Checkpoint 4: User and game data fetched.");
            
            const defaultState = getInitialGameState();
            const isGameInProgress = loadedData && typeof loadedData === 'object' && loadedData.landingSite && typeof loadedData.landingSite.x !== 'undefined';

            if (isGameInProgress) {
                debugLog("Checkpoint 5a: Saved game found. Initializing console...");
                gameState = { ...defaultState, ...loadedData };
                initCommandConsole();
            } else {
                debugLog("Checkpoint 5b: No saved game. Initializing site selection...");
                gameState = getInitialGameState();
                initSiteSelection();
            }

            confirmButton.addEventListener('click', async () => {
                if (gameState.landingSite) {
                    try {
                        await bbs.saveData(gameState);
                        debugLog(`Landing site confirmed and saved: ${JSON.stringify(gameState.landingSite)}`);
                        initCommandConsole();
                    } catch(e) {
                        debugLog(`Error saving landing site: ${e.message}`);
                    }
                }
            });
            const forceResetButton = document.getElementById('force-reset-button');
            if (forceResetButton) {
                forceResetButton.addEventListener('click', () => {
                    showConfirmModal("This will permanently delete your current fortress and start a new game. Are you sure?", async () => {
                        try {
                            await bbs.saveData(getInitialGameState());
                            window.location.reload();
                        } catch (e) {
                            console.error("Failed to force reset game state:", e);
                        }
                    });
                });
            }
        })();
    } catch (e) {
        appletRoot.innerHTML = `<p style="color:red; font-family:monospace;">CRITICAL ERROR: ${e.message}</p><pre>${e.stack}</pre>`;
        console.error("Applet initialization failed:", e);
    }
})();
} catch (e) {
    document.body.innerHTML = '<h1>A critical error occurred while loading the applet.</h1><pre>' + e.stack + '</pre>';
}

```

### File: axon_bbs/frontend/src/applets/FortressOverlord_v71.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/applets/FortressOverlord.js
// --- Start of Applet API Helper (MANDATORY) ---
window.bbs = {
  _callbacks: {},
  _requestId: 0,
  _handleMessage: function(event) {
    const { command, payload, requestId, error } = event.data;
    if (command && command.startsWith('response_') && this._callbacks[requestId]) {
      const { resolve, reject } = this._callbacks[requestId];
      if (error) { reject(new Error(error)); } else { resolve(payload); }
      delete this._callbacks[requestId];
    }
  },
  _postMessage: function(command, payload = {}) {
    return new Promise((resolve, reject) => {
      const requestId = this._requestId++;
      this._callbacks[requestId] = { resolve, reject };
      window.parent.postMessage({ command, payload, requestId }, '*');
    });
  },
  getUserInfo: function() { return this._postMessage('getUserInfo'); },
  getData: function() { return this._postMessage('getData'); },
  saveData: function(newData) { return this._postMessage('saveData', newData); },
  getAppletInfo: function() { return this._postMessage('getAppletInfo'); },
  postEvent: function(eventData) { return this._postMessage('postEvent', eventData); },
  readEvents: function() { return this._postMessage('readEvents'); }
};
window.addEventListener('message', (event) => window.bbs._handleMessage(event));
// --- End of Applet API Helper ---


// --- Main Applet Execution ---
(async function() {
    // --- 1. SETUP: Styles, HTML, and Game Configuration ---
    const APPLET_VERSION = "v7.1"; 

    const styles = `
        :root {
            --gunmetal-dark: #121518; --gunmetal-medium: #1d2125; --gunmetal-light: #2a2f34;
            --border-color: #0c0e10; --text-primary: #e2e8f0; --accent-green: #32cd32;
            --accent-red: #d94a4a; --shadow-color: rgba(0,0,0,0.5);
        }
        html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; }
        body { font-family: 'Lucida Console', 'Courier New', monospace; background-color: var(--gunmetal-dark); color: var(--text-primary); display: flex; align-items: center; justify-content: center; }
        
        #site-selection-screen { width: 100%; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center; background: var(--gunmetal-dark); }
        #globe-container { width: 68vmin; height: 68vmin; max-width: 600px; max-height: 600px; cursor: pointer; }
        .selection-header { text-align: center; margin-bottom: 20px; }
        .selection-header h1 { font-size: 2rem; color: var(--accent-green); text-shadow: 0 0 5px var(--accent-green); margin: 0; }
        .selection-header p { color: var(--text-primary); margin-top: 5px; }
        #confirm-landing-button { background-color: var(--accent-green); color: #000; border: 2px solid #55ff55; padding: 10px 20px; font-size: 1.2rem; font-family: inherit; cursor: pointer; margin-top: 20px; box-shadow: 0 0 10px var(--accent-green); transition: all 0.2s; }
        #confirm-landing-button:disabled { background-color: var(--gunmetal-medium); color: #666; border-color: var(--border-color); box-shadow: none; cursor: not-allowed; }

        #console-screen { display: none; width: 100%; height: 100%; }
        .console-container {
            width: 100%; height: 100%; max-width: 1920px; max-height: 1080px;
            background: linear-gradient(145deg, var(--gunmetal-light), var(--gunmetal-medium));
            padding: 20px; box-sizing: border-box; display: grid; grid-template-columns: 320px 1fr 320px;
            grid-template-rows: auto 1fr; gap: 15px; border: 3px solid var(--border-color);
            border-radius: 15px; box-shadow: inset 0 0 15px var(--shadow-color), 0 0 20px var(--shadow-color);
            position: relative;
        }
        .panel { background: linear-gradient(var(--gunmetal-medium), var(--gunmetal-dark)); border: 2px solid var(--border-color); border-radius: 6px; padding: 15px; display: flex; flex-direction: column; box-shadow: inset 0 0 10px var(--shadow-color); }
        .center-panel { padding: 15px; display: flex; flex-direction: column; }
        .header { grid-column: 1 / -1; text-align: center; padding-bottom: 10px; border-bottom: 3px solid var(--border-color); }
        .header h1 { margin: 0; font-size: 1.8rem; color: var(--accent-green); text-shadow: 0 0 5px var(--accent-green); }
        .version-tag { position: absolute; top: 25px; right: 25px; font-size: 0.8rem; color: #666; }
        .emergency-light { position: absolute; top: -12px; left: 50%; transform: translateX(-50%); width: 40px; height: 20px; background: radial-gradient(circle at 50% 100%, #ff4b4b, #a71d1d); border-radius: 15px 15px 0 0; border: 2px solid #000; box-shadow: 0 -2px 10px var(--accent-red), inset 0 -2px 5px rgba(0,0,0,0.6); z-index: 10; }
        .emergency-light::after { content: ''; position: absolute; top: 3px; left: 10px; width: 20px; height: 4px; background: rgba(255, 255, 255, 0.6); border-radius: 50%; filter: blur(2px); transform: rotate(-10deg); }
        h2, h3 { font-size: 1.2rem; color: var(--accent-green); border-bottom: 1px solid var(--border-color); padding-bottom: 8px; margin-top: 0; text-transform: uppercase; letter-spacing: 1px; }
        h3 { font-size: 1rem; margin-bottom: 10px; }
        .gauge-container { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; }
        .telemetry-screen, .main-panel-content, .command-log { background-color: #080c08; border: 2px solid #223a22; border-radius: 4px; color: var(--accent-green); position: relative; overflow: hidden; }
        .telemetry-screen::after, .main-panel-content::after, .command-log::after { content: ' '; display: block; position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(to bottom, rgba(30, 60, 30, 0.15) 50%, rgba(10, 20, 10, 0.2) 50%); background-size: 100% 4px; pointer-events: none; z-index: 2; }
        .telemetry-screen { flex-grow: 1; display: flex; flex-direction: column; }
        .main-panel-content { flex-grow: 1; padding: 0; box-sizing: border-box; display: flex; flex-direction: column; }
        #map-canvas.crosshair-cursor { cursor: crosshair; }
        .view-toggles { display: flex; gap: 5px; margin-bottom: 10px; }
        .view-toggles button { background-color: var(--gunmetal-medium); border: 2px solid var(--border-color); color: var(--text-primary); padding: 5px 10px; cursor: pointer; font-family: inherit; font-size: 0.8rem; box-shadow: inset 0 2px 5px rgba(0,0,0,0.4); }
        .view-toggles button.active { background-color: var(--accent-green); color: #000; font-weight: bold; border-color: #55ff55; }
        .resource-display, .command-log { font-size: 0.9rem; }
        .resource-display div { display: flex; justify-content: space-between; padding: 2px 0; }
        .command-log { height: 200px; overflow-y: auto; margin-top: 10px; padding: 5px; font-size: 0.8rem; }
        .log-entry { margin-bottom: 4px; }
        .log-entry.info { color: var(--accent-green); }
        .log-entry.warn { color: #facc15; }
        .log-entry.error { color: var(--accent-red); }
        #video-playback-screen { height: 120px; background-color: #000; margin-bottom: 10px; border: 2px solid #223a22; border-radius: 4px; }
        #sensor-feed-display { flex-grow: 1; background-color: #080c08; border: 2px solid #223a22; border-radius: 4px; display: flex; align-items: center; justify-content: center; font-size: 0.9rem; padding: 10px; box-sizing: border-box; }
        #debug-dialog { display: none; position: absolute; bottom: 10px; right: 10px; width: 350px; height: 250px; background-color: rgba(0,0,0,0.8); border: 1px solid var(--accent-green); border-radius: 5px; color: #fc8181; font-family: inherit; font-size: 12px; overflow-y: scroll; padding-top: 25px; z-index: 1000; }
        #debug-header { position: absolute; top: 0; left: 0; right: 0; background-color: var(--accent-green); color: #000; font-weight: bold; padding: 3px; cursor: move; user-select: none; }
        #reset-button { background-color: var(--accent-red); color: #fff; border: 1px solid #ff7b7b; padding: 8px; font-family: inherit; cursor: pointer; margin-top: auto; }
        .management-list { list-style: none; padding: 0; margin: 0; overflow-y: auto; flex-grow: 1; }
        .management-item { background-color: var(--gunmetal-medium); padding: 10px; border-radius: 4px; margin-bottom: 8px; border: 1px solid var(--border-color); }
        .management-item-header { display: flex; justify-content: space-between; align-items: center; }
        .management-item-title { font-weight: bold; color: var(--text-primary); }
        .management-item-body { font-size: 0.8rem; color: #a0aec0; margin-top: 8px; }
        .management-item-actions button, .construct-button { font-size: 0.7rem; padding: 4px 8px; background-color: var(--gunmetal-light); border: 1px solid var(--border-color); color: var(--text-primary); cursor: pointer; margin-left: 5px; border-radius: 3px; }
        .management-item-actions button:hover, .construct-button:hover { background-color: var(--accent-green); color: #000; }
        .construct-section { margin-top: auto; padding-top: 10px; border-top: 1px solid var(--border-color); }
        .construct-section div { display: flex; justify-content: space-around; }
    `;
    document.head.appendChild(Object.assign(document.createElement("style"), { innerText: styles }));

    document.getElementById('applet-root').innerHTML = `
        <div id="site-selection-screen">
            <div class="selection-header">
                <h1>Establish Fortress Location</h1>
                <p>Rotate globe and select a landing zone.</p>
            </div>
            <div id="globe-container"></div>
            <button id="confirm-landing-button" disabled>CONFIRM LANDING SITE</button>
        </div>
        <div id="console-screen">
            <div class="console-container">
                <div class="emergency-light"></div>
                <div class="header">
                    <h1>FORTRESS OVERLORD</h1>
                    <div class="version-tag">Version ${APPLET_VERSION}</div>
                </div>
                <div class="panel left-panel">
                    <h2>SYSTEM STATUS</h2>
                    <div class="gauge-container" id="gauge-display"></div>
                    <h2>DRONE TELEMETRY</h2>
                    <div class="telemetry-screen" id="telemetry-display">
                        <div id="video-playback-screen"></div>
                        <div id="sensor-feed-display"><p>NO SIGNAL</p></div>
                    </div>
                    <button id="reset-button">RESET GAME STATE</button>
                </div>
                <div class="panel center-panel">
                    <div class="view-toggles" id="view-toggles">
                        <button class="active" data-view="map">STRAT-MAP</button>
                        <button data-view="buildings">BUILDINGS</button>
                        <button data-view="units">UNITS</button>
                    </div>
                    <div class="main-panel-content" id="main-view"></div>
                </div>
                <div class="panel right-panel">
                    <h2>RESOURCES</h2>
                    <div class="resource-display" id="resource-display"></div>
                    <h2>COMMAND LOG</h2>
                    <div class="command-log" id="event-log"></div>
                </div>
                <div id="debug-dialog"><div id="debug-header">DEBUG CONSOLE</div></div>
            </div>
        </div>
    `;

    let userInfo = null, gameState = null;
    const confirmButton = document.getElementById('confirm-landing-button');

    function setupDebugConsole() { if (window.BBS_DEBUG_MODE === true) { /* ... */ } }
    function debugLog(message) { if (window.BBS_DEBUG_MODE !== true) return; console.log(message); }
    
    function logEvent(message, level = 'info') {
        const eventLogEl = document.getElementById('event-log');
        if (!eventLogEl) return;
        const entry = document.createElement('div');
        entry.classList.add('log-entry', level);
        entry.textContent = `> ${message}`;
        eventLogEl.appendChild(entry);
        eventLogEl.scrollTop = eventLogEl.scrollHeight;
    }

    function getInitialGameState() { 
        return { 
            resources: { rawOre: 0, crystals: 200, alloy: 100 }, 
            power: { current: 50, max: 100 }, 
            temperature: 25.5, 
            pressure: 101.3, 
            oxygen: 98.2, 
            landingSite: null,
            drones: [
                { id: 'drone_01', type: 'Scout', status: 'Idle', x: 60, y: -30, health: 100, inventory: { rawOre: 0 } }
            ],
            buildings: [
                { id: 'cc_01', type: 'Command Center', x: 0, y: 0, health: 1000 }
            ],
            mapFeatures: [
                { id: 'ore_01', type: 'Ore Deposit', x: -80, y: 50 },
                { id: 'gas_01', type: 'Hydrogen Geyser', x: 100, y: 120 }
            ]
        }; 
    }

    function initSiteSelection() {
        const globeContainer = document.getElementById('globe-container');
        let scene, camera, renderer, globe, marker, raycaster, mouse;
        let isDragging = false, previousMousePosition = { x: 0, y: 0 };

        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, globeContainer.clientWidth / globeContainer.clientHeight, 0.1, 1000);
            camera.position.z = 1.5;
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(globeContainer.clientWidth, globeContainer.clientHeight);
            globeContainer.appendChild(renderer.domElement);

            const texture = new THREE.CanvasTexture(createVenusTexture());
            const material = new THREE.MeshBasicMaterial({ map: texture });
            const geometry = new THREE.SphereGeometry(1, 32, 32);
            globe = new THREE.Mesh(geometry, material);
            scene.add(globe);

            raycaster = new THREE.Raycaster();
            mouse = new THREE.Vector2();
            
            renderer.domElement.addEventListener('mousedown', onMouseDown);
            renderer.domElement.addEventListener('mousemove', onMouseMove);
            renderer.domElement.addEventListener('mouseup', onMouseUp);
            renderer.domElement.addEventListener('click', onClick);
            window.addEventListener('resize', onWindowResize, false);
            
            animate();
        }

        function createVenusTexture() {
            const canvas = document.createElement('canvas');
            canvas.width = 512; canvas.height = 256;
            const ctx = canvas.getContext('2d');
            ctx.fillStyle = '#D2691E';
            ctx.fillRect(0, 0, 512, 256);
            for(let i=0; i<30; i++) {
                ctx.fillStyle = `rgba(165, 42, 42, ${Math.random()*0.4+0.2})`;
                ctx.beginPath(); ctx.arc(Math.random()*512, Math.random()*256, Math.random()*50+10, 0, Math.PI*2); ctx.fill();
            }
            ctx.strokeStyle = "rgba(0,0,0,0.2)";
            for(let i=0; i<512; i+=32) { ctx.beginPath(); ctx.moveTo(i,0); ctx.lineTo(i,256); ctx.stroke(); }
            for(let i=0; i<256; i+=32) { ctx.beginPath(); ctx.moveTo(0,i); ctx.lineTo(512,i); ctx.stroke(); }
            return canvas;
        }

        function onMouseDown(event) { isDragging = true; previousMousePosition.x = event.clientX; previousMousePosition.y = event.clientY; }
        function onMouseMove(event) { if (isDragging) { const dX = event.clientX-previousMousePosition.x, dY = event.clientY-previousMousePosition.y; globe.rotation.y += dX*0.005; globe.rotation.x += dY*0.005; previousMousePosition.x=event.clientX; previousMousePosition.y=event.clientY; } }
        function onMouseUp() { isDragging = false; }
        
        function onClick(event) {
            const rect = renderer.domElement.getBoundingClientRect();
            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
            raycaster.setFromCamera(mouse, camera);
            const intersects = raycaster.intersectObject(globe);
            if (intersects.length > 0) {
                const point = intersects[0].point;
                if (!marker) {
                    const markerGeo = new THREE.SphereGeometry(0.03, 16, 16);
                    const markerMat = new THREE.MeshBasicMaterial({ color: 0x32cd32 });
                    marker = new THREE.Mesh(markerGeo, markerMat); scene.add(marker);
                }
                marker.position.copy(point);
                confirmButton.disabled = false;
                gameState.landingSite = { x: point.x, y: point.y, z: point.z };
            }
        }
        function onWindowResize() { 
            if(renderer && camera && globeContainer){
                camera.aspect = globeContainer.clientWidth / globeContainer.clientHeight; 
                camera.updateProjectionMatrix(); 
                renderer.setSize(globeContainer.clientWidth, globeContainer.clientHeight); 
            }
        }
        function animate() { requestAnimationFrame(animate); renderer.render(scene, camera); }
        
        if (typeof THREE === 'undefined') {
            const script = document.createElement('script');
            script.src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js";
            script.onload = init; document.head.appendChild(script);
        } else { init(); }
    }

    function initCommandConsole() {
        const consoleScreen = document.getElementById('console-screen');
        const siteSelectionScreen = document.getElementById('site-selection-screen');
        siteSelectionScreen.style.display = 'none';
        consoleScreen.style.display = 'block';

        const gaugeDisplay = document.getElementById('gauge-display');
        const resourceDisplayEl = document.getElementById('resource-display');
        const mainViewEl = document.getElementById('main-view');
        const resetButton = document.getElementById('reset-button');
        const videoScreenEl = document.getElementById('video-playback-screen');
        const sensorFeedEl = document.getElementById('sensor-feed-display');
        let processedEventIds = new Set();
        let commandState = { active: false, command: null, sourceId: null, payload: {} };
        
        mainViewEl.innerHTML = `
            <div id="view-map" style="width:100%; height:100%; display:block; background-color: #080c08;">
                <canvas id="map-canvas" style="width: 100%; height: 100%;"></canvas>
            </div>
            <div id="view-buildings" style="width:100%; height:100%; display:none; flex-direction: column;"></div>
            <div id="view-units" style="width:100%; height:100%; display:none; flex-direction: column;"></div>
        `;
        const viewMap = mainViewEl.querySelector('#view-map');
        const viewBuildings = mainViewEl.querySelector('#view-buildings');
        const viewUnits = mainViewEl.querySelector('#view-units');
        const mapCanvas = document.getElementById('map-canvas');

        async function submitCommand(subject, body) {
            try {
                await bbs.postEvent({ subject, body: JSON.stringify(body) });
                logEvent(`CMD SUBMIT: ${subject} ${JSON.stringify(body)}`, 'info');
            } catch (e) {
                logEvent(`CMD FAILED: ${e.message}`, 'error');
                debugLog(`Failed to post event: ${e.message}`);
            }
        }

        async function pollForEvents() {
            try {
                const events = await bbs.readEvents();
                const newEvents = events.filter(e => !processedEventIds.has(e.id));

                if (newEvents.length > 0) {
                    newEvents.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
                    
                    for (const event of newEvents) {
                        processedEventIds.add(event.id);
                        if (event.author_display === 'overlord_agent') {
                            try {
                                const eventBody = JSON.parse(event.body);
                                logEvent(`AGENT: ${eventBody.summary}`, 'info');
                            } catch (e) {
                                logEvent(`AGENT RAW: ${event.body}`, 'warn');
                            }
                        }
                    }
                }
            } catch (e) {
                debugLog(`Failed to poll for events: ${e.message}`);
            }
        }


        function simulateVideoFeed() {
            const canvas = document.createElement('canvas');
            videoScreenEl.appendChild(canvas);
            const ctx = canvas.getContext('2d');
            function resize() { canvas.width = videoScreenEl.clientWidth; canvas.height = videoScreenEl.clientHeight; }
            window.addEventListener('resize', resize);
            resize();
            let noise = new ImageData(canvas.width, canvas.height);
            function draw() {
                for (let i = 0; i < noise.data.length; i += 4) {
                    const val = Math.random() * 50;
                    noise.data[i] = val; noise.data[i + 1] = val + 20; noise.data[i + 2] = val; noise.data[i + 3] = 255;
                }
                ctx.putImageData(noise, 0, 0);
                requestAnimationFrame(draw);
            }
            draw();
        }

        function drawGauge(id, label, value, max) {
            let canvas = document.getElementById(id);
            if (!canvas) {
                const gaugeWrapper = document.createElement('div');
                gaugeWrapper.className = 'gauge';
                gaugeWrapper.innerHTML = `<canvas id="${id}" width="120" height="80"></canvas><div style="text-align:center; font-size: 0.8em; color: var(--text-primary);">${label}</div>`;
                gaugeDisplay.appendChild(gaugeWrapper);
                canvas = document.getElementById(id);
            }
            const ctx = canvas.getContext('2d');
            const percent = Math.min(Math.max(value / max, 0), 1);
            ctx.clearRect(0,0,120,80); ctx.strokeStyle='#000'; ctx.lineWidth=10; ctx.beginPath(); ctx.arc(60,60,40,Math.PI,2*Math.PI); ctx.stroke();
            ctx.strokeStyle='#2a2f34'; ctx.lineWidth=8; ctx.beginPath(); ctx.arc(60,60,40,Math.PI,2*Math.PI); ctx.stroke();
            ctx.strokeStyle=`hsl(${(1-percent)*120}, 80%, 50%)`; ctx.beginPath(); ctx.arc(60,60,40,Math.PI,Math.PI+(percent*Math.PI)); ctx.stroke();
            ctx.fillStyle='var(--text-primary)'; ctx.font='16px "Lucida Console", monospace'; ctx.textAlign='center'; ctx.fillText(Math.round(value), 60, 60);
        }
        function renderGauges() { if (!gameState) return; const p=gameState.power||{c:0,m:100}; drawGauge('temp-gauge','TEMP',gameState.temperature||25,50); drawGauge('pressure-gauge','PRESSURE',gameState.pressure||101,120); drawGauge('oxygen-gauge','OXY',gameState.oxygen||98,100); drawGauge('power-gauge','POWER',p.current,p.max); }
        function renderResources() { if (!gameState) return; const r=gameState.resources||{c:0,a:0}; resourceDisplayEl.innerHTML=`<div><span>RAW ORE:</span><span style="color:var(--accent-green);">${Math.floor(r.rawOre || 0)}</span></div><div><span>CRYSTALS:</span><span style="color:var(--accent-green);">${Math.floor(r.crystals)}</span></div><div><span>ALLOY:</span><span style="color:var(--accent-green);">${Math.floor(r.alloy)}</span></div>`;}
        
        function renderMainView(view) {
            document.querySelectorAll('#view-toggles button').forEach(b => b.classList.remove('active'));
            document.querySelector(`#view-toggles button[data-view="${view}"]`).classList.add('active');
            
            viewMap.style.display = 'none';
            viewBuildings.style.display = 'none';
            viewUnits.style.display = 'none';

            if (view === 'map') {
                viewMap.style.display = 'block';
                drawStrategicMap();
            } else if (view === 'buildings') {
                viewBuildings.style.display = 'flex';
                renderBuildingView();
            } else if (view === 'units') {
                viewUnits.style.display = 'flex';
                renderUnitView();
            }
        }
        
        function displayTelemetry(obj) {
            if (!obj) {
                sensorFeedEl.innerHTML = '<p>NO SIGNAL</p>';
                return;
            }
            let html = `<div style="text-align: left; width: 100%; font-size: 0.8rem;">`;
            html += `<div><strong>ID:</strong> ${obj.id}</div>`;
            html += `<div><strong>TYPE:</strong> ${obj.type}</div>`;
            if (obj.status) html += `<div><strong>STATUS:</strong> ${obj.status}</div>`;
            if (obj.health) html += `<div><strong>INTEGRITY:</strong> ${obj.health}%</div>`;
            if (obj.inventory) html += `<div><strong>CARGO:</strong> ${obj.inventory.rawOre || 0} Raw Ore</div>`;
            html += `</div>`;
            sensorFeedEl.innerHTML = html;
        }

        function renderBuildingView() {
            let html = `<h3>BUILDING MANAGEMENT</h3>`;
            html += `<ul class="management-list">`;
            (gameState.buildings || []).forEach(b => {
                html += `
                    <li class="management-item" data-id="${b.id}">
                        <div class="management-item-header">
                            <span class="management-item-title">${b.type} (${b.id})</span>
                            <div class="management-item-actions">
                                <button data-action="upgrade">UPGRADE</button>
                                <button data-action="repair">REPAIR</button>
                            </div>
                        </div>
                        <div class="management-item-body">
                            <span>INTEGRITY: ${b.health}/1000</span>
                        </div>
                    </li>
                `;
            });
            html += `</ul>`;
            viewBuildings.innerHTML = html;
        }

        function renderUnitView() {
            let html = `<h3>DRONE ROSTER</h3>`;
            html += `<ul class="management-list">`;
            (gameState.drones || []).forEach(d => {
                html += `
                    <li class="management-item" data-id="${d.id}">
                        <div class="management-item-header">
                            <span class="management-item-title">${d.type} (${d.id})</span>
                            <div class="management-item-actions">
                                <button data-action="build">BUILD</button>
                                <button data-action="harvest-ore">HARVEST ORE</button>
                            </div>
                        </div>
                        <div class="management-item-body">
                            <span>STATUS: ${d.status}</span> | <span>INTEGRITY: ${d.health}%</span>
                        </div>
                    </li>
                `;
            });
            html += `</ul>`;
            viewUnits.innerHTML = html;
        }

        function drawStrategicMap() {
            const canvas = document.getElementById('map-canvas');
            if (!canvas) return;
            const ctx = canvas.getContext('2d');
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;

            ctx.fillStyle = '#080c08';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.strokeStyle = 'rgba(50, 205, 50, 0.3)';
            ctx.lineWidth = 1;
            for(let i=0; i < canvas.width; i+=20) { ctx.beginPath(); ctx.moveTo(i, 0); ctx.lineTo(i, canvas.height); ctx.stroke(); }
            for(let i=0; i < canvas.height; i+=20) { ctx.beginPath(); ctx.moveTo(0, i); ctx.lineTo(canvas.width, i); ctx.stroke(); }

            const allObjects = [...(gameState.buildings || []), ...(gameState.drones || []), ...(gameState.mapFeatures || [])];
            allObjects.forEach(obj => {
                const drawX = centerX + obj.x;
                const drawY = centerY + obj.y;

                ctx.strokeStyle = '#fff';
                ctx.fillStyle = 'var(--accent-green)';
                ctx.lineWidth = 1;

                if(obj.type.includes('Construction Site')){
                    ctx.globalAlpha = 0.5;
                    ctx.strokeRect(drawX - 5, drawY - 5, 10, 10);
                    ctx.globalAlpha = 1.0;
                } else {
                    switch(obj.type) {
                        case 'Command Center':
                            ctx.fillRect(drawX - 5, drawY - 5, 10, 10);
                            ctx.strokeRect(drawX - 5, drawY - 5, 10, 10);
                            break;
                        case 'Scout':
                            ctx.beginPath();
                            ctx.moveTo(drawX, drawY - 6);
                            ctx.lineTo(drawX - 5, drawY + 4);
                            ctx.lineTo(drawX + 5, drawY + 4);
                            ctx.closePath();
                            ctx.stroke();
                            break;
                        case 'Ore Deposit':
                            ctx.fillStyle = '#b0a090';
                            ctx.beginPath();
                            ctx.moveTo(drawX, drawY - 6); ctx.lineTo(drawX + 6, drawY);
                            ctx.lineTo(drawX + 3, drawY + 6); ctx.lineTo(drawX - 3, drawY + 6);
                            ctx.lineTo(drawX - 6, drawY); ctx.closePath();
                            ctx.fill();
                            break;
                        case 'Hydrogen Geyser':
                             ctx.strokeStyle = '#add8e6';
                             ctx.beginPath(); ctx.arc(drawX, drawY, 6, 0, Math.PI*2); ctx.stroke();
                             for(let i=0; i<3; i++){ ctx.beginPath(); ctx.moveTo(drawX - 4 + i*4, drawY - 6); ctx.quadraticCurveTo(drawX - 6 + i*4, drawY-12, drawX-4+i*4, drawY-18); ctx.stroke();}
                             break;
                    }
                }
            });

            ctx.fillStyle = 'rgba(50, 205, 50, 0.7)';
            ctx.font = '14px "Lucida Console", monospace';
            ctx.textAlign = 'left';
            ctx.fillText('SECTOR 7G // AO: FORTRESS', 10, 20);
        }
        
        viewBuildings.addEventListener('click', (e) => {
            // Placeholder for future direct building management
        });

        viewUnits.addEventListener('click', (e) => {
            if (e.target.tagName !== 'BUTTON') return;
            const action = e.target.dataset.action;
            const itemElement = e.target.closest('.management-item');
            const droneId = itemElement.dataset.id;
            
            if (action === 'harvest-ore') {
                commandState = { active: true, command: 'HARVEST', sourceId: droneId, payload: {} };
                mapCanvas.classList.add('crosshair-cursor');
                logEvent(`Awaiting target for HARVEST command from ${droneId}...`, 'warn');
                renderMainView('map');
            } else if (action === 'build') {
                commandState = { active: true, command: 'BUILD', sourceId: droneId, payload: { buildingType: 'Greenhouse' } }; // Default to greenhouse
                mapCanvas.classList.add('crosshair-cursor');
                logEvent(`Awaiting placement location for GREENHOUSE from ${droneId}...`, 'warn');
                renderMainView('map');
            }
        });

        mapCanvas.addEventListener('click', (e) => {
            const canvas = e.target;
            const rect = canvas.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            const clickY = e.clientY - rect.top;
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            
            const worldX = Math.round(clickX - centerX);
            const worldY = Math.round(clickY - centerY);

            const allObjects = [...(gameState.drones || []), ...(gameState.buildings || []), ...(gameState.mapFeatures || [])];
            let clickedObject = null;
            
            for(const obj of allObjects) {
                const objScreenX = centerX + obj.x;
                const objScreenY = centerY + obj.y;
                const distance = Math.sqrt(Math.pow(clickX - objScreenX, 2) + Math.pow(clickY - objScreenY, 2));
                if (distance < 10) {
                    clickedObject = obj;
                    break;
                }
            }

            if (commandState.active) {
                if (commandState.command === 'HARVEST') {
                    if (clickedObject && (clickedObject.type === 'Ore Deposit' || clickedObject.type === 'Hydrogen Geyser')) {
                        submitCommand('ASSIGN_TASK', { 
                            droneId: commandState.sourceId, 
                            task: 'HARVEST', 
                            targetId: clickedObject.id 
                        });
                    } else {
                        logEvent('Invalid target for HARVEST command.', 'error');
                    }
                } else if (commandState.command === 'BUILD') {
                    submitCommand('BUILD', { 
                        droneId: commandState.sourceId, 
                        buildingType: commandState.payload.buildingType, 
                        coords: { x: worldX, y: worldY }
                    });
                }
                commandState = { active: false, command: null, sourceId: null, payload: {} };
                mapCanvas.classList.remove('crosshair-cursor');
            } else {
                displayTelemetry(clickedObject);
            }
        });

        renderGauges();
        renderResources();
        renderMainView('map');
        
        logEvent("Connecting to Overlord Agent...");
        setTimeout(() => logEvent("Telemetry link established."), 1000);
        setTimeout(() => logEvent(`Welcome, Commander ${userInfo.nickname || userInfo.username}.`), 1500);
        setTimeout(() => logEvent("All systems nominal. Awaiting input."), 2500);
        simulateVideoFeed();
        
        resetButton.addEventListener('click', async () => {
            try {
                await bbs.saveData(getInitialGameState());
                debugLog("Game state reset. Reloading applet...");
                window.location.reload();
            } catch (e) {
                debugLog(`Error resetting game state: ${e.message}`);
            }
        });
        
        document.getElementById('view-toggles').addEventListener('click', e => { if (e.target.tagName === 'BUTTON') renderMainView(e.target.dataset.view); });
        window.addEventListener('resize', () => { 
            renderGauges(); 
            if (document.querySelector('#view-toggles button[data-view="map"].active')) {
                drawStrategicMap();
            }
        });
        debugLog("Command Console Initialized.");
        setInterval(pollForEvents, 10000);
    }
    
    try {
        setupDebugConsole();
        debugLog(`Fortress Overlord ${APPLET_VERSION} Initializing...`);
        userInfo = await bbs.getUserInfo();
        let loadedData = await bbs.getData();

        gameState = getInitialGameState();
        if (loadedData) {
            debugLog("Found saved data. Merging and validating...");
            gameState = { ...gameState, ...loadedData };
            
            ['buildings', 'drones', 'mapFeatures'].forEach(key => {
                if(loadedData[key] && !Array.isArray(loadedData[key])) {
                    gameState[key] = getInitialGameState()[key];
                    logEvent(`Save data mismatch: Resetting '${key}'.`, 'warn');
                }
            });
        }

        if (gameState.landingSite) {
            debugLog("Landing site found. Loading command console.");
            initCommandConsole();
        } else {
            debugLog("No landing site found. Initializing globe...");
            initSiteSelection();
        }

        confirmButton.addEventListener('click', async () => {
            if (gameState.landingSite) {
                try {
                    await bbs.saveData(gameState);
                    debugLog(`Landing site confirmed and saved: ${JSON.stringify(gameState.landingSite)}`);
                    initCommandConsole();
                } catch(e) {
                    debugLog(`Error saving landing site: ${e.message}`);
                }
            }
        });
    } catch (e) {
        document.getElementById('applet-root').innerHTML = `<p style="color:red;">CRITICAL ERROR: ${e.message}</p>`;
        console.error("Applet initialization failed:", e);
    }
})();



```

### File: axon_bbs/frontend/src/applets/PipeDoger.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.


// PipeDodger.js - A simple Flappy Bird-style game for Axon BBS applet

// --- Start of Applet API Helper (MANDATORY) ---
window.bbs = {
  _callbacks: {},
  _requestId: 0,
  _handleMessage: function(event) {
    const { command, payload, requestId, error } = event.data;
    if (command && command.startsWith('response_') && this._callbacks[requestId]) {
      const { resolve, reject } = this._callbacks[requestId];
      if (error) { reject(new Error(error)); } else { resolve(payload); }
      delete this._callbacks[requestId];
    }
  },
  _postMessage: function(command, payload = {}) {
    return new Promise((resolve, reject) => {
      const requestId = this._requestId++;
      this._callbacks[requestId] = { resolve, reject };
      window.parent.postMessage({ command, payload, requestId }, '*');
    });
  },
  getUserInfo: function() { return this._postMessage('getUserInfo'); },
  getData: function() { return this._postMessage('getData');
  },
  saveData: function(newData) { return this._postMessage('saveData', newData); }
};
window.addEventListener('message', (event) => window.bbs._handleMessage(event));
// --- End of Applet API Helper ---


// --- Main Applet Execution ---

// Debug log function (like a console overlay)
function debugLog(msg) {
    if (window.BBS_DEBUG_MODE !== true) return;
    const debugDialog = document.getElementById('debug-dialog');
    if (!debugDialog) return;
    const logEntry = document.createElement('div');
    logEntry.textContent = `> ${msg}`;
    debugDialog.appendChild(logEntry);
    debugDialog.scrollTop = debugDialog.scrollHeight; // Auto-scroll
}

// Game variables
let canvas, ctx;
let birdX = 50, birdY, birdVelocity, gravity = 0.5, jump = -10;
let pipes = [];
let pipeWidth = 50, pipeGap = 150, pipeSpeed = 3;
let score = 0, highScore = 0, deaths = 0, wins = 0, losses = 0;
let gameOver = true;
let userNickname = 'Player';
let animationFrameId = null;

// Reset game state
function resetGame() {
  if (!canvas) return; // Guard against premature calls
  birdY = canvas.height / 2;
  birdVelocity = -5; // Initial upward boost for brief hover
  pipes = [{ x: canvas.width, y: Math.random() * (canvas.height - pipeGap - 200) + 100, scored: false }];
  score = 0;
  gameOver = false;
}

// Jump function
function jumpBird() {
  if (gameOver) {
    resetGame();
  } else {
    birdVelocity = jump;
  }
}

// Generate new pipe
function generatePipe() {
  const y = Math.random() * (canvas.height - pipeGap - 200) + 100;
  pipes.push({ x: canvas.width, y, scored: false });
}

// Game loop
function gameLoop() {
  if (!canvas || !ctx) return;
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  if (!gameOver) {
    // Update bird
    birdVelocity += gravity;
    birdY += birdVelocity;

    // Update pipes
    for (let i = pipes.length - 1; i >= 0; i--) {
      let pipe = pipes[i];
      pipe.x -= pipeSpeed;

      if (pipe.x + pipeWidth < 0) {
        pipes.splice(i, 1);
      }

      if (pipe.x + pipeWidth < birdX && !pipe.scored) {
        score += 10;
        pipe.scored = true;
      }
    }

    if (pipes.length === 0 || pipes[pipes.length - 1].x < canvas.width - 250) {
      generatePipe();
    }

    // Collision checks
    if (birdY > canvas.height || birdY < 0) {
      endGame();
    }
    pipes.forEach(pipe => {
      if (
        (birdX + 10 > pipe.x && birdX - 10 < pipe.x + pipeWidth) &&
        (birdY - 10 < pipe.y || birdY + 10 > pipe.y + pipeGap)
      ) {
        endGame();
      }
    });
  }

  // Draw bird (simple circle)
  ctx.fillStyle = 'yellow';
  ctx.beginPath();
  ctx.arc(birdX, birdY, 10, 0, Math.PI * 2);
  ctx.fill();

  // Draw pipes
  ctx.fillStyle = 'green';
  pipes.forEach(pipe => {
    ctx.fillRect(pipe.x, 0, pipeWidth, pipe.y);
    ctx.fillRect(pipe.x, pipe.y + pipeGap, pipeWidth, canvas.height - (pipe.y + pipeGap));
  });

  // Draw scores
  ctx.fillStyle = 'white';
  ctx.font = '24px Arial';
  ctx.textAlign = 'left';
  ctx.fillText(`Score: ${score}`, 10, 30);
  ctx.fillText(`High: ${highScore} (${userNickname})`, 10, 60);

  if (gameOver) {
    ctx.font = '30px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Game Over - Click to Restart', canvas.width / 2, canvas.height / 2);
  }

  animationFrameId = requestAnimationFrame(gameLoop);
}

// End game and save score
async function endGame() {
  if (gameOver) return; // Prevent multiple calls
  gameOver = true;
  losses++;
  deaths++;
  
  // A "win" in this game could be considered surviving to get a score
  if (score > 0) {
      wins++;
  }

  if (score > highScore) {
    highScore = score;
  }

  try {
    debugLog('Saving game data...');
    await bbs.saveData({
      score: highScore,
      wins: wins,
      losses: losses,
      deaths: deaths
    });
    debugLog('Save complete.');
  } catch(e) {
    debugLog(`Save failed: ${e.message}`);
  }
}

// Main initialization function
async function main() {
    // 1. Create HTML and CSS
    const styles = `
        body, html { margin: 0; padding: 0; overflow: hidden; width: 100%; height: 100%; }
        canvas { display: block; background-color: #000; }
        #debug-dialog { display: none; position: absolute; bottom: 10px; left: 10px; width: 250px; height: 150px; background-color: rgba(0,0,0,0.7); border: 1px solid #4a5568; border-radius: 5px; color: #9AE6B4; font-family: monospace; font-size: 10px; overflow-y: scroll; padding: 5px; z-index: 1000; }
    `;
    const styleSheet = document.createElement("style");
    styleSheet.innerText = styles;
    document.head.appendChild(styleSheet);
    
    document.getElementById('applet-root').innerHTML = `
        <canvas id="gameCanvas"></canvas>
        <div id="debug-dialog"></div>
    `;

    // 2. Setup debug console
    if (window.BBS_DEBUG_MODE === true) {
        document.getElementById('debug-dialog').style.display = 'block';
    }
    
    // 3. Setup canvas and event listeners
    canvas = document.getElementById('gameCanvas');
    ctx = canvas.getContext('2d');
    
    const resizeCanvas = () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    };
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas(); // Initial size

    canvas.addEventListener('click', jumpBird);
    window.addEventListener('keydown', (e) => { if (e.key === ' ') jumpBird(); });

    // 4. Fetch initial data from BBS
    try {
        debugLog('Fetching initial data...');
        const [userInfo, savedData] = await Promise.all([bbs.getUserInfo(), bbs.getData()]);

        if (userInfo) {
            userNickname = userInfo.nickname || 'Player';
            debugLog(`Welcome, ${userNickname}`);
        }
        if (savedData) {
            highScore = savedData.score || 0;
            wins = savedData.wins || 0;
            losses = savedData.losses || 0;
            deaths = savedData.deaths || 0;
            debugLog(`Loaded high score: ${highScore}`);
        }
    } catch (e) {
        debugLog(`Error initializing with BBS: ${e.message}`);
    }
    
    // 5. Start the game
    resetGame();
    if (animationFrameId) cancelAnimationFrame(animationFrameId);
    gameLoop();
}

// Run the main function
main();

```

### File: axon_bbs/frontend/src/applets/Template.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.


// Axon BBS Applet Template
// Version: 1.0

// --- Start of Applet API Helper (MANDATORY) ---
window.bbs = {
  _callbacks: {},
  _requestId: 0,
  _handleMessage: function(event) {
    const { command, payload, requestId, error } = event.data;
    if (command && command.startsWith('response_') && this._callbacks[requestId]) {
      const { resolve, reject } = this._callbacks[requestId];
      if (error) { reject(new Error(error)); } else { resolve(payload); }
      delete this._callbacks[requestId];
    }
  },
  _postMessage: function(command, payload = {}) {
    return new Promise((resolve, reject) => {
      const requestId = this._requestId++;
      this._callbacks[requestId] = { resolve, reject };
      window.parent.postMessage({ command, payload, requestId }, '*');
    });
  },
  getUserInfo: function() { return this._postMessage('getUserInfo'); },
  getData: function() { return this._postMessage('getData');
  },
  saveData: function(newData) { return this._postMessage('saveData', newData); }
};
window.addEventListener('message', (event) => window.bbs._handleMessage(event));
// --- End of Applet API Helper ---


// --- Main Applet Execution ---
(async function() {
    // 1. SETUP: Define styles, create HTML structure, and declare variables.
    
    // --- STYLES ---
    const styles = `
        /* Add all your CSS rules here. Make it responsive! */
        body { font-family: sans-serif; background-color: #1a202c; color: #e2e8f0; display: flex; justify-content: center; align-items: center; }
        .applet-container { background-color: #2d3748; padding: 20px; border-radius: 10px; text-align: center; }
        #debug-dialog { display: none; /* Hidden by default */ position: absolute; top: 10px; left: 10px; width: 250px; height: 150px; background-color: rgba(0,0,0,0.7); border: 1px solid #4a5568; border-radius: 5px; color: #fc8181; font-family: monospace; font-size: 10px; overflow-y: scroll; padding: 5px; z-index: 1000; }
        #debug-dialog-header { padding: 2px 5px; cursor: move; background-color: #4a5568; color: white; font-weight: bold; user-select: none; }
    `;
    const styleSheet = document.createElement("style");
    styleSheet.innerText = styles;
    document.head.appendChild(styleSheet);
    
    // --- HTML STRUCTURE ---
    document.getElementById('applet-root').innerHTML = `
        <div id="debug-dialog"><div id="debug-dialog-header">Debug Console</div></div>
        <div class="applet-container">
            <h1 id="welcome-message" class="text-2xl font-bold mb-2">My New Applet</h1>
            <p id="data-display">Loading saved data...</p>
            <button id="action-button" style="padding: 10px; margin-top: 20px;">Perform Action</button>
        </div>
    `;
    
    // --- VARIABLES & DOM REFERENCES ---
    const debugDialog = document.getElementById('debug-dialog');
    const welcomeMessage = document.getElementById('welcome-message');
    const dataDisplay = document.getElementById('data-display');
    const actionButton = document.getElementById('action-button');
    let userProfile = null;
    let appletData = { clicks: 0 }; // Default data structure

    // --- FUNCTIONS ---
    function debugLog(message) {
        if (window.BBS_DEBUG_MODE !== true) return;
        const logEntry = document.createElement('div');
        const text = `> ${message}`;
        console.log(text);
        logEntry.textContent = text;
        debugDialog.appendChild(logEntry);
        debugDialog.scrollTop = debugDialog.scrollHeight;
    }

    function updateUI() {
        if (userProfile) {
            welcomeMessage.textContent = `Welcome, ${userProfile.nickname || userProfile.username}!`;
        }
        dataDisplay.textContent = `You have clicked the button ${appletData.clicks} time(s).`;
    }

    async function handleAction() {
        appletData.clicks = (appletData.clicks || 0) + 1;
        debugLog(`Action performed. Click count is now ${appletData.clicks}.`);
        
        try {
            await bbs.saveData(appletData);
            debugLog("Data saved successfully.");
        } catch (e) {
            debugLog(`Error saving data: ${e.message}`);
        }
        
        updateUI();
    }

    // 2. RUNTIME: Initialize the applet.
    try {
        if (window.BBS_DEBUG_MODE === true) {
            debugDialog.style.display = 'block';
        }
        debugLog("Applet initializing...");

        // Load user info and saved data in parallel
        const [user, savedData] = await Promise.all([bbs.getUserInfo(), bbs.getData()]);
        
        userProfile = user;
        debugLog(`User info received for: ${userProfile.username}`);

        if (savedData && typeof savedData === 'object') {
            appletData = { ...appletData, ...savedData }; // Merge saved data with default structure
            debugLog("Loaded saved data from BitSync.");
        } else {
            debugLog("No saved data found. Using defaults.");
        }

        // Add event listeners
        actionButton.addEventListener('click', handleAction);

        // Initial UI update
        updateUI();

    } catch (e) {
        const root = document.getElementById('applet-root');
        root.innerHTML = `<p style="color: red;">Error initializing with BBS: ${e.message}</p>`;
        debugLog(`FATAL ERROR: ${e.message}`);
    }
})();


```

### File: axon_bbs/frontend/src/components/AnsiViewer.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.


// axon_bbs/frontend/src/components/AnsiViewer.js
import React from 'react';
import Convert from 'ansi-to-html';

const AnsiViewer = ({ content, onClose }) => {
  // Configure the ANSI to HTML converter
  const convert = new Convert({
    fg: '#E2E8F0', // Default text color from your theme
    bg: '#1A202C', // Default background color from your theme
    newline: true, // Use <br/> for newlines
    escapeXML: true,
  });

  // Convert the raw ANSI content to HTML
  const htmlContent = convert.toHtml(content);

  return (
    // A simple modal overlay to display the content
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.8)',
      zIndex: 1000,
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
    }} onClick={onClose}>
      <div
        style={{
          backgroundColor: '#1A202C',
          color: '#E2E8F0',
          fontFamily: 'monospace',
          padding: '20px',
          borderRadius: '8px',
          maxWidth: '90%',
          maxHeight: '90%',
          overflow: 'auto',
          border: '1px solid #4A5568'
        }}
        // Prevent clicks inside the viewer from closing it
        onClick={(e) => e.stopPropagation()}
      >
        <pre dangerouslySetInnerHTML={{ __html: htmlContent }} />
      </div>
    </div>
  );
};

export default AnsiViewer;


```

### File: axon_bbs/frontend/src/components/AppletRunner.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY;
// without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.
// If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/AppletRunner.js
import React, { useState, useEffect, useRef } from 'react';
import apiClient from '../apiClient';

const AppletRunner = ({ applet, onBack }) => {
  const [appletCode, setAppletCode] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [profile, setProfile] = useState(null);
  const iframeRef = useRef(null);

  useEffect(() => {
    const loadAppletAndProfile = async () => {
      setIsLoading(true);
      setError('');
      try {
        const profilePromise = apiClient.get('/api/user/profile/');
        if (!applet?.code_manifest?.content_hash) {
          throw new Error("Applet has an invalid code manifest.");
        }
        // --- FIX: Use the correct, newly created endpoint ---
        const codeUrl = `/api/content/download/${applet.code_manifest.content_hash}/`;
        const codePromise = apiClient.get(codeUrl);

        const [profileResponse, codeResponse] = await Promise.all([profilePromise, codePromise]);
        
        setProfile(profileResponse.data);
        setAppletCode(codeResponse.data);

      } catch (err) {
        console.error("Failed to load applet prerequisites:", err);
        setError(err.response?.data?.error || err.message || "Could not load applet.");
      } finally {
        setIsLoading(false);
      }
    };
    
    loadAppletAndProfile();
  }, [applet]);

  useEffect(() => {
    const handleMessage = async (event) => {
      // SECURITY: Validate both the origin and the source of the message
      if (event.origin !== window.location.origin) {
        console.warn(`Blocked a postMessage from an unexpected origin: ${event.origin}`);
        return;
      }
      if (event.source !== iframeRef.current?.contentWindow) {
        return;
      }
      const { command, payload, requestId } = event.data;
      let response = { command: `response_${command}`, requestId, payload: null, error: null };

      try {
        if (!profile) { throw new Error("User profile is not available."); }
        switch (command) {
          case 'getUserInfo':
            response.payload = profile;
            break;
          case 'getData':
            const dataResponse = await apiClient.get(`/api/applets/${applet.id}/data/`);
            response.payload = dataResponse.status === 204 ? null : dataResponse.data;
            break;
          case 'saveData':
            const saveResponse = await apiClient.post(`/api/applets/${applet.id}/data/`, payload);
            response.payload = saveResponse.data;
            break;
          case 'getAppletInfo':
            response.payload = applet;
            break;
          case 'postEvent':
            const postResponse = await apiClient.post(`/api/applets/${applet.id}/post_event/`, payload);
            response.payload = postResponse.data;
            break;
          case 'readEvents':
            const readResponse = await apiClient.get(`/api/applets/${applet.id}/read_events/`);
            response.payload = readResponse.data;
            break;
          default:
            return;
        }
      } catch (e) {
        console.error(`Error processing applet command '${command}':`, e);
        response.error = e.response?.data?.error || e.message || 'An unknown error occurred.';
      }
      
      if (iframeRef.current && iframeRef.current.contentWindow) {
        iframeRef.current.contentWindow.postMessage(response, '*');
      }
    };

    window.addEventListener('message', handleMessage);
    return () => window.removeEventListener('message', handleMessage);
  }, [profile, applet]);

  const getIframeContent = () => {
    if (!appletCode) return '';
    const checksum = applet?.code_manifest?.content_hash || 'N/A';
    const debugMode = applet?.is_debug_mode || false;

    return `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${applet.name}</title>
        </head>
        <body>
          <div id="applet-root"></div>
          <script>
            window.BBS_APPLET_CHECKSUM = '${checksum}';
            window.BBS_DEBUG_MODE = ${debugMode};
            document.addEventListener("DOMContentLoaded", function() {
              try {
                ${appletCode}
              } catch (e) {
                const root = document.getElementById('applet-root');
                if (root) {
                  root.innerHTML = '<p style="color: red; font-family: monospace;">Applet Failed to Execute: ' + e.message + '</p>';
                }
                console.error("Applet execution error:", e);
              }
            });
          </script>
        </body>
      </html>
    `;
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold text-gray-200">{applet.name}</h2>
        <button onClick={onBack} className="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
          ← Back to Applets
        </button>
      </div>
      <div className="w-full h-[75vh] bg-gray-900 border border-gray-700 rounded overflow-hidden">
        {isLoading ? (
          <div className="p-4">Loading applet and user profile...</div>
        ) : error ? (
          <div className="p-4 text-red-500">{error}</div>
        ) : (
          <iframe
            ref={iframeRef}
            title={applet.name}
            srcDoc={getIframeContent()}
            className="w-full h-full"
            sandbox="allow-scripts allow-same-origin"
          />
        )}
      </div>
    </div>
  );
};

export default AppletRunner;

```

### File: axon_bbs/frontend/src/components/AppletView.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/AppletView.js
import React, { useState, useEffect } from 'react';
import apiClient from '../apiClient';
import AppletRunner from './AppletRunner';
import HighScoreBoard from './HighScoreBoard';

const Header = ({ text }) => <div className="text-2xl font-bold text-gray-200 mb-4 pb-2 border-b border-gray-600">{text}</div>;

const AppletView = ({ onLaunchGame }) => {
  const [applets, setApplets] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [runningApplet, setRunningApplet] = useState(null);
  const [viewingScoresFor, setViewingScoresFor] = useState(null);
  // NEW: A counter to force re-mounting the AppletRunner
  const [launchCounter, setLaunchCounter] = useState(0);

  useEffect(() => {
    if (!runningApplet && !viewingScoresFor) {
      setIsLoading(true);
      apiClient.get('/api/applets/')
        .then(response => {
          setApplets(response.data);
        })
        .catch(err => {
          console.error("Failed to fetch applets:", err);
          setError("Could not load applets from the server.");
        })
        .finally(() => {
          setIsLoading(false);
        });
    }
  }, [runningApplet, viewingScoresFor]);

  const handleLaunch = (applet) => {
    if (applet.category_name?.toLowerCase() === 'game') {
      onLaunchGame(applet);
    }
    // Increment the counter to generate a new key
    setLaunchCounter(prev => prev + 1);
    setRunningApplet(applet);
  };

  if (runningApplet) {
    // UPDATED: The key prop is now a combination of the applet ID and the launch counter.
    // This guarantees React will create a new component instance every single time.
    return <AppletRunner key={`${runningApplet.id}-${launchCounter}`} applet={runningApplet} onBack={() => setRunningApplet(null)} />;
  }

  if (viewingScoresFor) {
    return <HighScoreBoard applet={viewingScoresFor} onBack={() => setViewingScoresFor(null)} />;
  }

  return (
    <div>
      <Header text="Applet Browser" />
      {isLoading ? (
        <div>Loading Applets...</div>
      ) : error ? (
        <div className="text-red-500">{error}</div>
      ) : (
        <div className="space-y-4">
          {applets.map(applet => (
            <div key={applet.id} className="bg-gray-800 p-4 rounded border border-gray-700 flex justify-between items-center">
              <div>
                <h3 className="font-bold text-lg text-gray-200">{applet.name}</h3>
                <p className="text-sm text-gray-400 mt-1">{applet.description}</p>
              </div>
              <div className="flex gap-2">
                {applet.category_name?.toLowerCase() === 'game' && (
                  <button
                    className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded"
                    onClick={() => setViewingScoresFor(applet)}
                  >
                    Scores
                  </button>
                )}
                <button
                  className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                  onClick={() => handleLaunch(applet)}
                >
                  Launch
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default AppletView;


```

### File: axon_bbs/frontend/src/components/AuthenticatedImage.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/AuthenticatedImage.js
import React, { useState, useEffect } from 'react';
import apiClient from '../apiClient';

const AuthenticatedImage = ({ src, alt, className }) => {
  const [imageSrc, setImageSrc] = useState(null);
  const [error, setError] = useState('');

  useEffect(() => {
    // A variable to track if the component is still mounted.
    let isMounted = true; 

    const fetchImage = async () => {
      if (!src) return;

      try {
        // Use the standard apiClient to fetch the image as a binary object (blob)
        const response = await apiClient.get(src, { responseType: 'blob' });
        if (isMounted) {
            // Create a temporary, local URL for the downloaded blob
            const localUrl = URL.createObjectURL(response.data);
            setImageSrc(localUrl);
        }
      } catch (err) {
        console.error("Failed to fetch authenticated image:", err);
        if (isMounted) {
            setError('Could not load image.');
        }
      }
    };

    fetchImage();

    // Cleanup function to run when the component unmounts.
    return () => {
      isMounted = false;
      // Revoke the object URL to free up memory when the component is gone.
      if (imageSrc) {
        URL.revokeObjectURL(imageSrc);
      }
    };
  }, [src]); // Re-run effect if the src prop changes

  if (error) {
    return <div className={className} style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: '#4A5568' }}><span className="text-xs text-red-400">{error}</span></div>;
  }

  if (!imageSrc) {
    // Display a loading spinner or placeholder
    return <div className={className} style={{ backgroundColor: '#4A5568', display: 'flex', alignItems: 'center', justifyContent: 'center' }}><div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-200"></div></div>;
  }

  // Render the standard img tag with the local blob URL
  return <img src={imageSrc} alt={alt} className={className} />;
};

export default AuthenticatedImage;

```

### File: axon_bbs/frontend/src/components/HighScoreBoard.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/HighScoreBoard.js
import React, { useState, useEffect } from 'react';
import apiClient from '../apiClient';
const HighScoreBoard = ({ applet, onBack, displayTimezone }) => {
  const [scores, setScores] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');

  // Helper to display a stat or 'N/A' if it's null/undefined
  const renderStat = (stat) => (stat !== null && stat !== undefined ? stat : 'N/A');
useEffect(() => {
    setIsLoading(true);
    apiClient.get(`/api/high_scores/${applet.id}/`)
      .then(response => {
        setScores(response.data);
      })
      .catch(err => {
        console.error(`Failed to fetch high scores for ${applet.name}:`, err);
        setError("Could not load high scores.");
      })
      .finally(() => setIsLoading(false));
  }, [applet]);
return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold text-gray-200">High Scores: {applet.name}</h2>
        <button onClick={onBack} className="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
          ← Back
        </button>
      </div>
      
      {isLoading ? (
        <div>Loading scores...</div>
      ) : error ? (
        <div className="text-red-500">{error}</div>
      ) : (
        <div className="bg-gray-800 rounded border border-gray-700">
          <table className="w-full text-left table-auto">
            <thead className="border-b border-gray-600">
              <tr>
                <th className="p-3 text-sm font-semibold text-gray-400 w-1/12 text-center">Rank</th>
                <th className="p-3 text-sm font-semibold text-gray-400 w-3/12">Player</th>
                <th className="p-3 text-sm font-semibold text-gray-400 w-2/12">Score</th>
                <th className="p-3 text-sm font-semibold text-gray-400 w-1/12 text-center">Wins</th>
                <th className="p-3 text-sm font-semibold text-gray-400 w-1/12 text-center">Losses</th>
                <th className="p-3 text-sm font-semibold text-gray-400 w-1/12 text-center">Kills</th>
                <th className="p-3 text-sm font-semibold text-gray-400 w-1/12 text-center">Deaths</th>
                <th className="p-3 text-sm font-semibold text-gray-400 w-1/12 text-center">Assists</th>
                <th className="p-3 text-sm font-semibold text-gray-400 w-2/12">Date Set</th>
              </tr>
            </thead>
            <tbody>
              {scores.map((score, index) => (
                <tr key={index} className="border-b border-gray-700 last:border-b-0">
                  <td className="p-3 text-gray-200 font-bold text-center">{index + 1}</td>
                  <td className="p-3 text-gray-300">
                    <div className="flex items-center gap-3">
                      <img src={score.owner_avatar_url || '/default_avatar.png'} alt="Player Avatar" className="w-8 h-8 rounded-full bg-gray-700" />
                      <span>{score.owner_nickname}</span>
                    </div>
                  </td>
                  <td className="p-3 text-green-400 font-semibold">{score.score.toLocaleString()}</td>
                  <td className="p-3 text-yellow-400 text-center">{renderStat(score.wins)}</td>
                  <td className="p-3 text-gray-400 text-center">{renderStat(score.losses)}</td>
                  <td className="p-3 text-cyan-400 text-center">{renderStat(score.kills)}</td>
                  <td className="p-3 text-red-400 text-center">{renderStat(score.deaths)}</td>
                  <td className="p-3 text-blue-400 text-center">{renderStat(score.assists)}</td>
                  <td className="p-3 text-gray-400">{new Date(score.last_updated).toLocaleString([], { timeZone: displayTimezone })}</td>
                </tr>
              ))}
            </tbody>
          </table>
          {scores.length === 0 && <p className="text-gray-400 text-center p-4">No scores have been recorded for this game yet.</p>}
        </div>
      )}
    </div>
  );
};

export default HighScoreBoard;

```

### File: axon_bbs/frontend/src/components/LoginScreen.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/LoginScreen.js
import React, { useState } from 'react';
import apiClient from '../apiClient';

const LoginScreen = ({ onLogin, onNavigateToRegister, onNavigateToRecovery }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();
    setError('');
    try {
      const response = await apiClient.post('/api/token/', {
        username,
        password,
      });
      localStorage.setItem('token', response.data.access);
      onLogin(response.data.access);
    } catch (err) {
      setError('Invalid username or password.');
      console.error(err);
    }
  };

  return (
    <div className="max-w-md mx-auto mt-10 p-8 bg-gray-800 rounded-lg">
      <div className="flex items-center text-4xl font-bold text-white mb-6 pb-2 border-b-2 border-gray-600">
        <img src="/axon.png" alt="Axon logo" className="h-24 w-24 mr-4"/>
        <h1>Login</h1>
      </div>
      <form onSubmit={handleLogin}>
        <div className="mb-4">
          <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="username">
            Username
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:shadow-outline"
            id="username" type="text" value={username} onChange={(e) => setUsername(e.target.value)} required
          />
        </div>
        <div className="mb-6">
          <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="password">
            Password
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 mb-3 leading-tight focus:outline-none focus:shadow-outline"
            id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required
          />
        </div>
        {error && <p className="text-red-500 text-xs italic mb-4">{error}</p>}
        <div className="flex flex-col items-center justify-between">
          <button
            className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full"
            type="submit"
          >
            Sign In
          </button>
          <button
            onClick={onNavigateToRegister}
            className="inline-block align-baseline font-bold text-sm text-blue-400 hover:text-blue-500 mt-4"
            type="button"
          >
            Don't have an account? Register
          </button>
          <button
            onClick={onNavigateToRecovery}
            className="inline-block align-baseline font-bold text-sm text-gray-400 hover:text-gray-300 mt-2"
            type="button"
          >
            Forgot Password?
          </button>
        </div>
      </form>
    </div>
  );
};

export default LoginScreen;

```

### File: axon_bbs/frontend/src/components/MessageList.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/MessageList.js
import React, { useState, useEffect, useCallback } from 'react';
import apiClient from '../apiClient';
import UnlockForm from './UnlockForm';
import ReportModal from './ReportModal'; 

const Header = ({ text }) => <div className="text-2xl font-bold text-gray-200 mb-4 pb-2 border-b border-gray-600">{text}</div>;
const AttachmentItem = ({ attachment, onDownload }) => {
  const [status, setStatus] = useState('checking');
  const fetchStatus = useCallback(() => {
    apiClient.get(`/api/files/status/${attachment.id}/`)
      .then(response => {
        setStatus(response.data.status);
      })
      .catch(err => {
        console.error(`Failed to fetch status for file ${attachment.id}`, err);
        setStatus('error');
      });
  }, [attachment.id]);
useEffect(() => {
    fetchStatus();
    const interval = setInterval(() => {
      if (status === 'syncing') {
        fetchStatus();
      }
    }, 5000);
    return () => clearInterval(interval);
  }, [status, fetchStatus]);
return (
    <li key={attachment.id} className="flex items-center gap-4">
      <span className="text-gray-200">{attachment.filename}</span>
      <span className="text-gray-400 text-sm">({Math.round(attachment.size / 1024)} KB)</span>
      <div className="flex-grow"></div>
      {status === 'available' && (
        <button onClick={() => onDownload(attachment.id, attachment.filename)} className="text-blue-400 hover:text-blue-300 hover:underline">
          Download
        </button>
      )}
      {status === 'syncing' && <span className="text-yellow-400 text-sm italic">Syncing...</span>}
      {status === 'checking' && <span className="text-gray-400 text-sm italic">Checking...</span>}
      {status === 'error' && <span className="text-red-500 text-sm italic">Error</span>}
    </li>
  );
};

const MessageList = ({ board, onBack, onStartPrivateMessage, displayTimezone }) => {
  const [messages, setMessages] = useState([]);
  const [selectedMessage, setSelectedMessage] = useState(null);
  const [showPostForm, setShowPostForm] = useState(false);
  const [needsUnlock, setNeedsUnlock] = useState(false);
  const [postUnlockAction, setPostUnlockAction] = useState(null);
  const [subject, setSubject] = useState('');
  const [body, setBody] = useState('');
  const [error, setError] = useState('');
  const [selectedFile, setSelectedFile] = useState(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadError, setUploadError] = useState('');
  const [attachments, setAttachments] = useState([]);
  const [showReportModal, setShowReportModal] = useState(false);
  const fetchMessages = useCallback(async () => {
    try {
      const response = await apiClient.get(`/api/boards/${board.id}/messages/`);
      setMessages(response.data);
    } catch (err) { console.error("Failed to fetch messages:", err); }
  }, [board.id]);
useEffect(() => { fetchMessages(); }, [fetchMessages]);

  const handlePostMessage = useCallback(async () => {
    setError('');
    if (!subject || !body) { setError("Subject and body cannot be empty."); return; }
    try {
      const attachment_ids = attachments.map(att => att.id);
      await apiClient.post('/api/messages/post/', { subject, body, board_name: board.name, attachment_ids });
      setSubject(''); setBody(''); setAttachments([]); setShowPostForm(false);
      fetchMessages();
    } catch (err) {
      if (err.response && err.response.data.error === 'identity_locked') {
        setPostUnlockAction(() => () => handlePostMessage());
        setNeedsUnlock(true);
      } else {
        setError(err.response?.data?.error || 'Could not post message.');
      }
    }
  }, [subject, body, board.name, attachments, fetchMessages]);
  const handleFileUpload = async () => {
    if (!selectedFile) { setUploadError('Please select a file first.'); return; }
    setIsUploading(true); setUploadError('');
    const formData = new FormData();
    formData.append('file', selectedFile);
    try {
      const response = await apiClient.post('/api/files/upload/', formData, { headers: { 'Content-Type': 'multipart/form-data' } });
      setAttachments(prev => [...prev, response.data]);
      setSelectedFile(null);
    } catch (err) {
      setUploadError(err.response?.data?.error || 'File upload failed.');
    } finally {
      setIsUploading(false);
    }
  };
  const handleFileDownload = useCallback(async (fileId, filename) => {
    try {
      const response = await apiClient.get(`/api/files/download/${fileId}/`, {
        responseType: 'blob',
      });
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', filename);
      document.body.appendChild(link);
      link.click();
      link.parentNode.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (err) {
      if (err.response && err.response.status === 401) {
        setPostUnlockAction(() => () => handleFileDownload(fileId, filename));
        setNeedsUnlock(true);
      } else {
        console.error("Download failed:", err);
        alert("Could not download the file. See console for details.");
      }
    }
  }, []);
  const handleReply = () => {
    if (!selectedMessage) return;
    const quotedBody = selectedMessage.body.split('\n').map(line => `> ${line}`).join('\n');
    setSubject(`Re: ${selectedMessage.subject}`);
    setBody(`\n\nOn ${new Date(selectedMessage.created_at).toLocaleString([], { timeZone: displayTimezone })}, ${selectedMessage.author_display} wrote:\n${quotedBody}`);
    setSelectedMessage(null);
    setShowPostForm(true);
  };
  
  const handleUnlockSuccess = () => {
    setNeedsUnlock(false);
    if (postUnlockAction) {
      postUnlockAction();
      setPostUnlockAction(null);
    }
  };
  const handleReportSubmit = async (message_id, comment) => {
    try {
        await apiClient.post('/api/messages/report/', { message_id, comment });
    } catch (err) {
        console.error("Failed to submit report:", err);
        throw new Error(err.response?.data?.error || 'An unexpected error occurred.');
    }
  };

  if (selectedMessage) {
    return (
      <div>
        <ReportModal 
            message={selectedMessage}
            show={showReportModal} 
            onClose={() => setShowReportModal(false)}
            onSubmit={handleReportSubmit}
        />
        <div className="flex justify-between items-center mb-4">
            <button onClick={() => setSelectedMessage(null)} className="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
              ← Back to {board.name}
            </button>
             <div className="flex gap-2">
                <button onClick={handleReply} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                    Reply
                </button>
                <button onClick={() => onStartPrivateMessage(selectedMessage.pubkey, selectedMessage.author_display)} className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded">
                    Send Private Message
                </button>
                <button onClick={() => setShowReportModal(true)} className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
                    Report
                </button>
            </div>
        </div>
        <div className="bg-gray-800 p-4 rounded border border-gray-700">
          <h3 className="text-xl font-bold text-white mb-1">{selectedMessage.subject}</h3>
          <div className="flex items-center gap-2 text-sm text-gray-400 mb-2">
            <img src={selectedMessage.author_avatar_url || '/default_avatar.png'} alt="author avatar" className="w-6 h-6 rounded-full bg-gray-700" />
            <span>by {selectedMessage.author_display} on {new Date(selectedMessage.created_at).toLocaleString([], { timeZone: displayTimezone })}</span>
          </div>
          <p className="text-gray-300 whitespace-pre-wrap mb-4">{selectedMessage.body}</p>
          
          {selectedMessage.attachments && selectedMessage.attachments.length > 0 && (
            <div className="border-t border-gray-700 pt-4 mt-4">
              <h4 className="font-bold text-gray-300 mb-2">Attachments:</h4>
              <ul className="space-y-2">
                {selectedMessage.attachments.map(att => (
                  <AttachmentItem key={att.id} attachment={att} onDownload={handleFileDownload} />
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div>
      {needsUnlock && <UnlockForm onUnlock={handleUnlockSuccess} onCancel={() => { setNeedsUnlock(false); setPostUnlockAction(null); }} />}
      <div className="flex justify-between items-center mb-4">
        <Header text={board.name} />
        <div>
          <button onClick={onBack} className="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2">← Boards</button>
          <button onClick={() => setShowPostForm(!showPostForm)} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
            {showPostForm ? 'Cancel' : 'New Post'}
          </button>
        </div>
      </div>
      {showPostForm && (
        <div className="bg-gray-800 p-4 rounded mb-6 border border-gray-700">
          <form onSubmit={(e) => { e.preventDefault(); handlePostMessage(); }}>
            <input type="text" placeholder="Subject" value={subject} onChange={(e) => setSubject(e.target.value)} required className="w-full py-2 px-3 bg-gray-700 text-gray-200 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500" />
            <textarea placeholder="Your message..." value={body} onChange={(e) => setBody(e.target.value)} required rows="5" className="w-full py-2 px-3 bg-gray-700 text-gray-200 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500" />
            <div className="bg-gray-700 p-3 rounded mb-4">
              <label className="block text-gray-300 text-sm font-bold mb-2">Attach Files</label>
              <div className="flex items-center gap-4">
                <input type="file" onChange={(e) => setSelectedFile(e.target.files[0])} className="block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-600 file:text-white hover:file:bg-blue-700"/>
                <button type="button" onClick={handleFileUpload} disabled={isUploading || !selectedFile} className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded disabled:bg-gray-500">
                  {isUploading ? 'Uploading...' : 'Upload'}
                </button>
              </div>
              {uploadError && <p className="text-red-500 text-xs italic mt-2">{uploadError}</p>}
              {attachments.length > 0 && (
                <div className="mt-4">
                  <h4 className="text-sm font-bold text-gray-300">Attached:</h4>
                  <ul className="list-disc list-inside text-gray-400">
                    {attachments.map((att) => (
                      <li key={att.id}>
                        {att.filename}
                        <button type="button" onClick={() => setAttachments(prev => prev.filter(a => a.id !== att.id))} className="ml-2 text-red-500 hover:text-red-400">[remove]</button>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
            {error && <p className="text-red-500 text-xs italic mb-4">{error}</p>}
            <div className="text-right">
              <button type="submit" className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">Submit Post</button>
            </div>
          </form>
        </div>
      )}
      <div className="bg-gray-800 rounded border border-gray-700">
        <table className="w-full text-left table-auto">
          <thead className="border-b border-gray-600">
            <tr>
              <th className="p-3 text-sm font-semibold text-gray-400 w-3/5">Thread / Subject</th>
              <th className="p-3 text-sm font-semibold text-gray-400 w-1/5">Author</th>
              <th className="p-3 text-sm font-semibold text-gray-400 w-1/5">Last Post</th>
            </tr>
          </thead>
          <tbody>
            {messages.map(msg => (
              <tr key={msg.id} className="border-b border-gray-700 last:border-b-0 hover:bg-gray-700 cursor-pointer" onClick={() => setSelectedMessage(msg)}>
                <td className="p-3 text-gray-200">
                  {msg.subject}
                  {msg.attachments && msg.attachments.length > 0 && <span className="ml-2 text-xs text-blue-400">[+{msg.attachments.length} file(s)]</span>}
                </td>
                <td className="p-3 text-gray-400 flex items-center gap-2">
                  <img src={msg.author_avatar_url || '/default_avatar.png'} alt="author avatar" className="w-8 h-8 rounded-full bg-gray-700" />
                  {msg.author_display}
                </td>
                <td className="p-3 text-gray-400">{new Date(msg.created_at).toLocaleString([], { timeZone: displayTimezone })}</td>
              </tr>
            ))}
          </tbody>
        </table>
        {messages.length === 0 && <p className="text-gray-400 text-center p-4">No messages yet on this board...</p>}
      </div>
    </div>
  );
};

export default MessageList;

```

### File: axon_bbs/frontend/src/components/ModerationDashboard.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/ModerationDashboard.js
import React, { useState, useEffect, useCallback } from 'react';
import apiClient from '../apiClient';
import AuthenticatedImage from './AuthenticatedImage';

const Header = ({ text }) => <div className="text-2xl font-bold text-gray-200 mb-4 pb-2 border-b border-gray-600">{text}</div>;
const ModerationDashboard = ({ displayTimezone }) => {
  const [reports, setReports] = useState([]);
  const [profileUpdates, setProfileUpdates] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [activeTab, setActiveTab] = useState('reports');
  const fetchReports = useCallback(() => {
    apiClient.get('/api/moderation/queue/')
      .then(response => setReports(response.data))
      .catch(err => {
        console.error("Failed to fetch moderation queue:", err);
        setError("Could not load the message report queue.");
      });
  }, []);
  const fetchProfileUpdates = useCallback(() => {
    apiClient.get('/api/moderation/profile_queue/')
      .then(response => setProfileUpdates(response.data))
      .catch(err => {
        console.error("Failed to fetch profile update queue:", err);
        setError("Could not load the profile update queue.");
      });
  }, []);
useEffect(() => {
    setIsLoading(true);
    const fetchAll = async () => {
        await Promise.all([
            fetchReports(),
            fetchProfileUpdates()
        ]);
        setIsLoading(false);
    };
    fetchAll();
  }, [fetchReports, fetchProfileUpdates]);
  const handleReviewReport = async (reportId, action) => {
    try {
      await apiClient.post(`/api/moderation/review/${reportId}/`, { action });
      setReports(prev => prev.filter(report => report.id !== reportId));
    } catch (err) {
      console.error(`Failed to ${action} report:`, err);
      alert(`Could not ${action} the report. Please try again.`);
    }
  };
  const handleReviewProfile = async (actionId, action) => {
      try {
          await apiClient.post(`/api/moderation/profile_review/${actionId}/`, { action });
          setProfileUpdates(prev => prev.filter(update => update.id !== actionId));
      } catch(err) {
          console.error(`Failed to ${action} profile update:`, err);
          alert(`Could not ${action} the profile update.`);
      }
  };

  const renderMessageReports = () => (
    reports.length === 0 ? (
        <p className="text-gray-400">The message report queue is empty. Good job!</p>
    ) : (
        <div className="space-y-6">
            {reports.map(report => (
                <div key={report.id} className="bg-gray-800 p-4 rounded border border-gray-700">
                    <div className="border-b border-gray-600 pb-3 mb-3">
                    <p className="text-sm text-gray-400">
                    Reported by: <span className="font-semibold text-gray-300">{report.reporting_user}</span> on {new Date(report.created_at).toLocaleString([], { timeZone: displayTimezone })}
                    </p>
                    <p className="text-sm text-gray-400">
                    Reporter's Comment: <span className="text-yellow-400 italic">"{report.comment || 'No comment provided.'}"</span>
                    </p>
                </div>
                <div className="bg-gray-900 p-3 rounded">
                    <p className="text-sm text-gray-400">
                        Original Author: <span className="font-semibold text-gray-300">{report.reported_message.author_display}</span>
                    </p>
                    <p className="text-sm text-gray-400">
                        Subject: <span className="font-semibold text-gray-300">{report.reported_message.subject}</span>
                    </p>
                    <p className="text-gray-300 whitespace-pre-wrap mt-2 p-2 border border-dashed border-gray-600 rounded">
                        {report.reported_message.body}
                    </p>
                </div>
                <div className="flex justify-end gap-4 mt-4">
                    <button onClick={() => handleReviewReport(report.id, 'reject')} className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                        Reject Report
                    </button>
                    <button onClick={() => handleReviewReport(report.id, 'approve')} className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
                        Approve (Delete Message)
                    </button>
                </div>
                </div>
            ))}
        </div>
    )
  );
  const renderProfileApprovals = () => (
    profileUpdates.length === 0 ? (
        <p className="text-gray-400">The profile approval queue is empty.</p>
    ) : (
        <div className="space-y-6">
            {profileUpdates.map(update => (
                <div key={update.id} className="bg-gray-800 p-4 rounded border border-gray-700">
                    <div className="border-b border-gray-600 pb-3 mb-3">
                        <p className="text-sm text-gray-400">
                            Request by: <span className="font-semibold text-gray-300">{update.user_info.username}</span> on {new Date(update.created_at).toLocaleString([], { timeZone: displayTimezone })}
                        </p>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                        <div>
                            <h4 className="font-bold text-gray-300 mb-2">Nickname Change</h4>
                            <p className="text-sm text-gray-400">From: <span className="text-gray-200">{update.user_info.current_nickname || '[None]'}</span></p>
                            <p className="text-sm text-green-400">To: <span className="font-bold">{update.action_details.nickname}</span></p>
                        </div>
                        <div>
                            <h4 className="font-bold text-gray-300 mb-2">Avatar Change</h4>
                            {update.pending_avatar_url ? (
                                <div>
                                    <p className="text-sm text-yellow-400 mb-2">New avatar for review:</p>
                                    <AuthenticatedImage 
                                        src={update.pending_avatar_url} 
                                        alt="Pending avatar" 
                                        className="w-32 h-32 rounded-full border-2 border-yellow-500" 
                                    />
                                </div>
                            ) : (
                                <p className="text-sm text-gray-400">No new avatar submitted.</p>
                            )}
                        </div>
                    </div>
                    <div className="flex justify-end gap-4 mt-4">
                        <button onClick={() => handleReviewProfile(update.id, 'deny')} className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                            Deny
                        </button>
                        <button onClick={() => handleReviewProfile(update.id, 'approve')} className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                            Approve
                        </button>
                    </div>
                </div>
            ))}
        </div>
    )
  );
return (
    <div>
      <Header text="Moderation Dashboard" />
      <div className="mb-4 border-b border-gray-600">
        <nav className="flex space-x-4">
            <button onClick={() => setActiveTab('reports')} className={`py-2 px-4 font-semibold ${activeTab === 'reports' ? 'text-white border-b-2 border-blue-500' : 'text-gray-400 hover:text-white'}`}>
                Message Reports ({reports.length})
            </button>
            <button onClick={() => setActiveTab('profiles')} className={`py-2 px-4 font-semibold ${activeTab === 'profiles' ? 'text-white border-b-2 border-blue-500' : 'text-gray-400 hover:text-white'}`}>
                Profile Approvals ({profileUpdates.length})
            </button>
        </nav>
      </div>
      {isLoading ? (
        <div>Loading moderation queues...</div>
      ) : error ? (
        <div className="text-red-500">{error}</div>
      ) : (
        <div>
            {activeTab === 'reports' && renderMessageReports()}
            {activeTab === 'profiles' && renderProfileApprovals()}
        </div>
      )}
    </div>
  );
};

export default ModerationDashboard;

```

### File: axon_bbs/frontend/src/components/PrivateMessageClient.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY;
// without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.
// If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/PrivateMessageClient.js
import React, { useState, useEffect, useCallback } from 'react';
import apiClient from '../apiClient';
import UnlockForm from './UnlockForm';

const Header = ({ text }) => <div className="text-2xl font-bold text-gray-200 mb-4 pb-2 border-b border-gray-600">{text}</div>;
const PrivateMessageClient = ({ initialRecipient = null, displayTimezone }) => {
  const [view, setView] = useState('inbox');
  const [messages, setMessages] = useState([]);
  const [selectedMessage, setSelectedMessage] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [recipientIdentifier, setRecipientIdentifier] = useState('');
  const [subject, setSubject] = useState('');
  const [body, setBody] = useState('');

  const [needsUnlock, setNeedsUnlock] = useState(false);
  const [postUnlockAction, setPostUnlockAction] = useState(null);
  const fetchMessages = useCallback(async () => {
    setIsLoading(true);
    setError('');
    const endpoint = view === 'inbox' ? '/api/pm/list/' : '/api/pm/outbox/';
    try {
      const response = await apiClient.get(endpoint);
      setMessages(response.data);
    } catch (err) {
      if (err.response?.data?.error === 'identity_locked') {
        setPostUnlockAction(() => () => fetchMessages());
        setNeedsUnlock(true);
      } else {
        setError('Could not fetch messages.');
        console.error(`Error fetching ${view}:`, err);
      }
    } finally {
      setIsLoading(false);
    }
  }, [view]);

  useEffect(() => {
    if (view === 'inbox' || view === 'outbox') {
      fetchMessages();
    }
  }, [view, fetchMessages]);

  useEffect(() => {
    if (initialRecipient) {
        setRecipientIdentifier(initialRecipient.displayName);
        setView('compose');
    }
  }, [initialRecipient]);

  const handleSendMessage = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');
    try {
        await apiClient.post('/api/pm/send/', { recipient_identifier: recipientIdentifier, subject, body });
        setRecipientIdentifier(''); 
        setSubject(''); 
        setBody('');
        setView('outbox');
    } catch(err) {
        if (err.response?.data?.error === 'identity_locked') {
            setPostUnlockAction(() => () => handleSendMessage(e));
            setNeedsUnlock(true);
          } else {
            setError(err.response?.data?.error || 'Could not send message.');
        }
    } finally {
        setIsLoading(false);
    }
  };

  const handleReply = () => {
    const original = selectedMessage;
    setSelectedMessage(null); // <-- FIX: Reset selected message to change view
    setView('compose');
    setRecipientIdentifier(original.author_display);
    setSubject(`Re: ${original.decrypted_subject}`);
    const quoteHeader = `\n\nOn ${new Date(original.created_at).toLocaleString([], { timeZone: displayTimezone })}, ${original.author_display} wrote:\n`;
    const quotedBody = (original.decrypted_body || '').split('\n').map(line => `> ${line}`).join('\n');
    setBody(quoteHeader + quotedBody + '\n');
  };

  const handleForward = () => {
    const original = selectedMessage;
    setSelectedMessage(null); // <-- FIX: Reset selected message to change view
    setView('compose');
    setRecipientIdentifier('');
    setSubject(`Fwd: ${original.decrypted_subject}`);
    const forwardedBody = (original.decrypted_body || '').split('\n').map(line => `> ${line}`).join('\n');
    setBody(`\n\n--- Forwarded Message ---\nFrom: ${original.author_display}\nDate: ${new Date(original.created_at).toLocaleString([], { timeZone: displayTimezone })}\nSubject: ${original.decrypted_subject}\n\n${forwardedBody}`);
  };

  const handleDelete = async (messageId) => {
    if (!window.confirm("Are you sure you want to permanently delete this message?")) {
      return;
    }
    setError('');
    try {
      await apiClient.delete(`/api/pm/delete/${messageId}/`);
      setSelectedMessage(null);
      fetchMessages();
    } catch (err) {
      setError(err.response?.data?.error || 'Could not delete the message.');
      console.error('Error deleting PM:', err);
    }
  };

  const renderMessageList = () => (
    <div className="bg-gray-800 rounded border border-gray-700">
      <table className="w-full text-left table-auto">
        <thead className="border-b border-gray-600">
          <tr>
            <th className="p-3 text-sm font-semibold text-gray-400 w-2/5">Subject</th>
            <th className="p-3 text-sm font-semibold text-gray-400 w-2/5">{view === 'inbox' ? 'From' : 'To'}</th>
            <th className="p-3 text-sm font-semibold text-gray-400 w-1/5">Date</th>
            <th className="p-3 text-sm font-semibold text-gray-400 text-center">Actions</th>
          </tr>
        </thead>
        <tbody>
          {messages.map(msg => (
            <tr key={msg.id} className="border-b border-gray-700 last:border-b-0 hover:bg-gray-700">
              <td className="p-3 text-gray-200 cursor-pointer" onClick={() => { setView(view); setSelectedMessage(msg); }}>{msg.decrypted_subject || msg.subject}</td>
              <td className="p-3 text-gray-400 flex items-center gap-2 cursor-pointer" onClick={() => { setView(view); setSelectedMessage(msg); }}>
                <img src={(msg.author_avatar_url || msg.recipient_avatar_url) || '/default_avatar.png'} alt="avatar" className="w-8 h-8 rounded-full bg-gray-700" />
                {msg.author_display || msg.recipient_display}
              </td>
              <td className="p-3 text-gray-400 cursor-pointer" onClick={() => { setView(view); setSelectedMessage(msg); }}>{new Date(msg.created_at).toLocaleString([], { timeZone: displayTimezone })}</td>
              <td className="p-3 text-center">
                <button 
                  onClick={(e) => { e.stopPropagation(); handleDelete(msg.id); }} 
                  className="text-red-500 hover:text-red-400 text-sm font-semibold"
                  title="Delete Message"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {messages.length === 0 && <p className="text-gray-400 text-center p-4">Your {view} is empty.</p>}
    </div>
  );

  const renderReadMessage = () => {
    const msg = selectedMessage;
    const isInboxMessage = !!msg.author_display;
    return (
        <div>
            <div className="flex justify-between items-center mb-4">
                <button onClick={() => setSelectedMessage(null)} className="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
                ← Back to {view}
                </button>
                <div className="flex gap-2">
                    {isInboxMessage && <button onClick={handleReply} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Reply</button>}
                    <button onClick={handleForward} className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded">Forward</button>
                    <button onClick={() => handleDelete(msg.id)} className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">Delete</button>
                </div>
            </div>
            <div className="bg-gray-800 p-4 rounded border border-gray-700">
                <h3 className="text-xl font-bold text-white mb-1">{msg.decrypted_subject}</h3>
                <div className="flex items-center gap-2 text-sm text-gray-400 mb-2">
                    <img src={(msg.author_avatar_url || msg.recipient_avatar_url) || '/default_avatar.png'} alt="avatar" className="w-6 h-6 rounded-full bg-gray-700" />
                    <span>{isInboxMessage ? `From: ${msg.author_display}` : `To: ${msg.recipient_display}`} on {new Date(msg.created_at).toLocaleString([], { timeZone: displayTimezone })}</span>
                </div>
                <p className="text-gray-300 whitespace-pre-wrap p-2 border-t border-gray-700 mt-2">{msg.decrypted_body || 'Message content is encrypted and could not be displayed.'}</p>
            </div>
        </div>
    );
  };

  const renderCompose = () => (
    <div>
        <Header text="Compose Private Message" />
        <div className="bg-gray-800 p-4 rounded border border-gray-700">
            <form onSubmit={handleSendMessage}>
                <div className="mb-4">
                    <label className="block text-gray-300 text-sm font-bold mb-2">Recipient</label>
                    <input type="text" placeholder="Enter username, nickname, or alias" value={recipientIdentifier} onChange={e => setRecipientIdentifier(e.target.value)} required className="w-full py-2 px-3 bg-gray-700 text-gray-200 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>
                <input type="text" placeholder="Subject" value={subject} onChange={e => setSubject(e.target.value)} required className="w-full py-2 px-3 bg-gray-700 text-gray-200 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                <textarea placeholder="Your message..." value={body} onChange={e => setBody(e.target.value)} required rows="8" className="w-full py-2 px-3 bg-gray-700 text-gray-200 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                {error && <p className="text-red-500 text-xs italic mb-4">{error}</p>}
                <div className="flex justify-end gap-4">
                    <button type="button" onClick={() => { setView('inbox'); setSelectedMessage(null); }} className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">Cancel</button>
                    <button type="submit" disabled={isLoading} className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded disabled:bg-gray-500">{isLoading ? 'Sending...' : 'Send Message'}</button>
                </div>
            </form>
        </div>
    </div>
  );
  
  const renderContent = () => {
    if (selectedMessage) return renderReadMessage();
    if (view === 'compose') return renderCompose();
    return renderMessageList();
  };
  
  return (
    <div>
        {needsUnlock && <UnlockForm onUnlock={() => { setNeedsUnlock(false); if (postUnlockAction) { postUnlockAction(); setPostUnlockAction(null); } }} onCancel={() => setNeedsUnlock(false)} />}
        {!selectedMessage && view !== 'compose' && (
            <div className="flex justify-between items-center mb-4">
                <Header text={view === 'inbox' ? 'Private Mail - Inbox' : 'Private Mail - Outbox'} />
                <div>
                    <button onClick={() => setView(view === 'inbox' ? 'outbox' : 'inbox')} className="bg-gray-700 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded mr-2">
                        View {view === 'inbox' ? 'Outbox' : 'Inbox'}
                    </button>
                    <button onClick={() => { setView('compose'); setSubject(''); setBody(''); setRecipientIdentifier(''); }} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                        New Message
                    </button>
                </div>
            </div>
        )}
        {isLoading ? <div>Loading messages...</div> : error ? <p className="text-red-500">{error}</p> : renderContent()}
    </div>
  );
};

export default PrivateMessageClient;

```

### File: axon_bbs/frontend/src/components/ProfileScreen.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/ProfileScreen.js
import React, { useState, useEffect, useCallback } from 'react';
import apiClient from '../apiClient';
const Header = ({ text }) => <div className="text-2xl font-bold text-gray-200 mb-4 pb-2 border-b border-gray-600">{text}</div>;
const SubHeader = ({ text }) => <h3 className="text-lg font-semibold text-gray-300 mb-3">{text}</h3>;
const ProfileScreen = () => {
  const [profile, setProfile] = useState(null);
  const [nickname, setNickname] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // State for credential management forms
  const [oldPassword, setOldPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmNewPassword, setConfirmNewPassword] = useState('');
  const [currentPasswordForReset, setCurrentPasswordForReset] = useState('');
  const [sq1, setSq1] = useState('');
  const [sa1, setSa1] = useState('');
  const [sq2, setSq2] = useState('');
  const [sa2, setSa2] = useState('');

  // State for timezone
  const [timezones, setTimezones] = useState([]);
  const [selectedTimezone, setSelectedTimezone] = useState('');

  const [avatarFile, setAvatarFile] = useState(null);
  const fetchProfile = useCallback(() => {
    setIsLoading(true);
    apiClient.get('/api/user/profile/')
      .then(response => {
        setProfile(response.data);
        setNickname(response.data.nickname || '');
        setSelectedTimezone(response.data.timezone || 'UTC');
      })
      .catch(err => {
        console.error("Failed to fetch profile:", err);
        setError("Could not load your profile data.");
      })
      .finally(() => setIsLoading(false));
  }, []);
useEffect(() => { 
    fetchProfile(); 
    // Populate the list of timezones from the browser's Intl API
    setTimezones(Intl.supportedValuesOf('timeZone'));
}, [fetchProfile]);

  const handleNicknameChange = async (e) => {
    e.preventDefault();
    setError(''); setSuccess(''); setIsLoading(true);
    try {
      const response = await apiClient.post('/api/user/nickname/', { nickname });
      setSuccess(response.data.status || 'Nickname update submitted for approval!');
      fetchProfile();
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to update nickname.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleAvatarUpload = async (e) => {
    e.preventDefault();
    if (!avatarFile) { setError('Please select an image file to upload.'); return; }
    setError(''); setSuccess(''); setIsLoading(true);
    const formData = new FormData();
    formData.append('avatar', avatarFile);
    try {
      const response = await apiClient.post('/api/user/avatar/', formData, { headers: { 'Content-Type': 'multipart/form-data' } });
      setSuccess(response.data.status || 'Avatar update submitted for approval!');
      setAvatarFile(null);
      e.target.reset(); // Clear the file input
      fetchProfile(); // Refresh profile to show new avatar
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to upload avatar.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleChangePassword = async (e) => {
    e.preventDefault();
    if (newPassword !== confirmNewPassword) {
        setError("New passwords do not match.");
        return;
    }
    setError(''); setSuccess(''); setIsLoading(true);
    try {
        await apiClient.post('/api/user/change_password/', { old_password: oldPassword, new_password: newPassword });
        setSuccess('Password changed successfully!');
        setOldPassword('');
        setNewPassword('');
        setConfirmNewPassword('');
    } catch (err) {
        setError(err.response?.data?.error || 'Failed to change password.');
    } finally {
        setIsLoading(false);
    }
  };

  const handleResetSecurityQuestions = async (e) => {
    e.preventDefault();
    setError(''); setSuccess(''); setIsLoading(true);
    try {
        await apiClient.post('/api/user/reset_security_questions/', {
            current_password: currentPasswordForReset,
            security_question_1: sq1,
            security_answer_1: sa1,
            security_question_2: sq2,
            security_answer_2: sa2,
        });
        setSuccess('Security questions have been reset successfully!');
        setCurrentPasswordForReset('');
        setSq1(''); setSa1(''); setSq2(''); setSa2('');
    } catch (err) {
        setError(err.response?.data?.error || 'Failed to reset security questions.');
    } finally {
        setIsLoading(false);
    }
  };

  const handleTimezoneChange = async (e) => {
    e.preventDefault();
    setError(''); setSuccess(''); setIsLoading(true);
    try {
        await apiClient.post('/api/user/timezone/', { timezone: selectedTimezone });
        setSuccess('Timezone updated successfully!');
        fetchProfile();
    } catch(err) {
        setError(err.response?.data?.error || 'Failed to update timezone.');
    } finally {
        setIsLoading(false);
    }
  };

  if (isLoading && !profile) { return <div>Loading profile...</div>; }

  return (
    <div>
      <Header text="User Profile" />
      {error && <div className="bg-red-800 border border-red-600 text-red-200 p-3 rounded mb-4" role="alert">{error}</div>}
      {success && <div className="bg-green-800 border border-green-600 text-green-200 p-3 rounded mb-4" role="alert">{success}</div>}
      
      <div className="bg-gray-800 p-4 rounded mb-6 border border-gray-700">
        <div className="flex items-start gap-4 mb-4">
          <img src={profile?.avatar_url || '/default_avatar.png'} alt="Avatar" className="w-32 h-32 rounded-full bg-gray-700 border-2 border-gray-600" />
          <div>
            <div className="mb-2">
              <label className="block text-gray-400 text-sm font-bold">Username</label>
              <p className="text-gray-200 text-lg">{profile?.username}</p>
            </div>
            <form onSubmit={handleNicknameChange}>
              <label className="block text-gray-300 text-sm font-bold mb-1" htmlFor="nickname">Nickname</label>
              <div className="flex items-center gap-4">
                <input id="nickname" type="text" value={nickname} onChange={(e) => setNickname(e.target.value)} placeholder="Enter your desired nickname" className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" />
                <button type="submit" disabled={isLoading || nickname === (profile?.nickname || '')} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:bg-gray-500">
                  {isLoading ? 'Saving...' : 'Save'}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        <div className="bg-gray-800 p-4 rounded border border-gray-700">
          <SubHeader text="Manage Avatar" />
          <p className="text-gray-400 text-xs italic mb-2">Upload a new avatar. PNG, JPG, or GIF, max 1MB. Will be resized to 128x128.</p>
          <form onSubmit={handleAvatarUpload} className="flex items-center gap-4">
            <input type="file" onChange={e => setAvatarFile(e.target.files[0])} accept="image/png, image/jpeg, image/gif" required className="block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-600 file:text-white hover:file:bg-blue-700"/>
            <button type="submit" disabled={isLoading || !avatarFile} className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:bg-gray-500 whitespace-nowrap">
              Upload
            </button>
          </form>
        </div>

        <div className="bg-gray-800 p-4 rounded border border-gray-700">
            <SubHeader text="Display Timezone" />
            <form onSubmit={handleTimezoneChange} className="flex items-center gap-4">
                <select value={selectedTimezone} onChange={e => setSelectedTimezone(e.target.value)} className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500">
                    {timezones.map(tz => <option key={tz} value={tz}>{tz}</option>)}
                </select>
                <button type="submit" disabled={isLoading || selectedTimezone === (profile?.timezone || 'UTC')} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded disabled:bg-gray-500">Save</button>
            </form>
        </div>

        <div className="bg-gray-800 p-4 rounded border border-gray-700 md:col-span-2">
            <SubHeader text="Change Password" />
            <form onSubmit={handleChangePassword}>
                <div className="grid md:grid-cols-3 gap-4">
                    <div>
                        <label className="block text-gray-300 text-sm font-bold mb-2">Current Password</label>
                        <input type="password" value={oldPassword} onChange={e => setOldPassword(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" />
                    </div>
                    <div>
                        <label className="block text-gray-300 text-sm font-bold mb-2">New Password</label>
                        <input type="password" value={newPassword} onChange={e => setNewPassword(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" />
                    </div>
                    <div>
                        <label className="block text-gray-300 text-sm font-bold mb-2">Confirm New Password</label>
                        <input type="password" value={confirmNewPassword} onChange={e => setConfirmNewPassword(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500" />
                    </div>
                </div>
                <div className="text-right mt-4">
                    <button type="submit" disabled={isLoading} className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded disabled:bg-gray-500">Update Password</button>
                </div>
            </form>
        </div>

        <div className="bg-gray-800 p-4 rounded border border-gray-700 md:col-span-2">
            <SubHeader text="Reset Security Questions" />
            <p className="text-gray-400 text-xs italic mb-2">You must provide your current password to reset your security questions.</p>
            <form onSubmit={handleResetSecurityQuestions}>
                <div className="mb-4">
                    <label className="block text-gray-300 text-sm font-bold mb-2">Current Password</label>
                    <input type="password" value={currentPasswordForReset} onChange={e => setCurrentPasswordForReset(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500"/>
                </div>
                <div className="grid md:grid-cols-2 gap-4">
                    <div>
                        <label className="block text-gray-300 text-sm font-bold mb-2">New Security Question 1</label>
                        <input type="text" placeholder="e.g., What was your first pet's name?" value={sq1} onChange={e => setSq1(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 mb-2"/>
                        <input type="password" placeholder="Answer 1" value={sa1} onChange={e => setSa1(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500"/>
                    </div>
                    <div>
                        <label className="block text-gray-300 text-sm font-bold mb-2">New Security Question 2</label>
                        <input type="text" placeholder="e.g., What city were you born in?" value={sq2} onChange={e => setSq2(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500 mb-2"/>
                        <input type="password" placeholder="Answer 2" value={sa2} onChange={e => setSa2(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500"/>
                    </div>
                </div>
                <div className="text-right mt-4">
                    <button type="submit" disabled={isLoading} className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded disabled:bg-gray-500">Reset Questions</button>
                </div>
            </form>
        </div>
      </div>
    </div>
  );
};

export default ProfileScreen;

```

### File: axon_bbs/frontend/src/components/RecoveryScreen.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/RecoveryScreen.js
import React, { useState } from 'react';
import apiClient from '../apiClient';

const RecoveryScreen = ({ onNavigateToLogin }) => {
  const [step, setStep] = useState(1); // 1: enter username, 2: answer questions
  const [username, setUsername] = useState('');
  const [questions, setQuestions] = useState(null);
  const [answer1, setAnswer1] = useState('');
  const [answer2, setAnswer2] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleUsernameSubmit = async (e) => {
    e.preventDefault();
    setError('');
    try {
      const response = await apiClient.post('/api/recovery/get_questions/', { username });
      setQuestions(response.data);
      setStep(2);
    } catch (err) {
      setError(err.response?.data?.error || 'Could not find user.');
    }
  };

  const handleRecoverySubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    try {
      await apiClient.post('/api/recovery/submit/', {
        username,
        answer_1: answer1,
        answer_2: answer2,
        new_password: newPassword,
      });
      setSuccess('Password has been reset successfully! You can now log in.');
      setTimeout(() => {
        onNavigateToLogin();
      }, 3000);
    } catch (err) {
      setError(err.response?.data?.error || 'Recovery failed. Please check your answers.');
    }
  };
  
  return (
    <div className="max-w-md mx-auto mt-10 p-8 bg-gray-800 rounded-lg">
      <div className="flex items-center text-4xl font-bold text-white mb-6 pb-2 border-b-2 border-gray-600">
        <img src="/axon.png" alt="Axon logo" className="h-24 w-24 mr-4"/>
        <h1>Recover Identity</h1>
      </div>
      
      {error && <p className="text-red-500 text-xs italic mb-4">{error}</p>}
      {success && <div className="bg-green-800 border border-green-600 text-green-200 p-3 rounded mb-4">{success}</div>}

      {step === 1 && (
        <form onSubmit={handleUsernameSubmit}>
            <p className="text-gray-400 mb-4">Enter your username to begin the recovery process.</p>
            <div className="mb-4">
                <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="username">Username</label>
                <input id="username" type="text" value={username} onChange={e => setUsername(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:shadow-outline"/>
            </div>
            <div className="flex items-center justify-between">
                <button type="submit" className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full">
                    Continue
                </button>
            </div>
        </form>
      )}

      {step === 2 && questions && (
        <form onSubmit={handleRecoverySubmit}>
            <p className="text-gray-400 mb-4">Answer your two security questions to set a new password.</p>
            <div className="mb-4">
                <label className="block text-gray-300 text-sm font-bold mb-2">{questions.security_question_1}</label>
                <input type="password" value={answer1} onChange={e => setAnswer1(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:shadow-outline"/>
            </div>
            <div className="mb-4">
                <label className="block text-gray-300 text-sm font-bold mb-2">{questions.security_question_2}</label>
                <input type="password" value={answer2} onChange={e => setAnswer2(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:shadow-outline"/>
            </div>
            <div className="mb-6">
                <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="new_password">New Password</label>
                <input id="new_password" type="password" value={newPassword} onChange={e => setNewPassword(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:shadow-outline"/>
            </div>
             <div className="flex items-center justify-between">
                <button type="submit" className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded w-full">
                    Reset Password
                </button>
            </div>
        </form>
      )}
       <button onClick={onNavigateToLogin} className="inline-block align-baseline font-bold text-sm text-blue-400 hover:text-blue-500 mt-4" type="button">
        Back to Login
      </button>
    </div>
  );
};

export default RecoveryScreen;

```

### File: axon_bbs/frontend/src/components/RegisterScreen.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/RegisterScreen.js
import React, { useState } from 'react';
import apiClient from '../apiClient';
const RegisterScreen = ({ onRegisterSuccess, onNavigateToLogin }) => {
  const [username, setUsername] = useState('');
  const [nickname, setNickname] = useState('');
  const [password, setPassword] = useState('');
  const [password2, setPassword2] = useState('');
  const [question1, setQuestion1] = useState('');
  const [answer1, setAnswer1] = useState('');
  const [question2, setQuestion2] = useState('');
  const [answer2, setAnswer2] = useState('');
  const [error, setError] = useState('');

  const [view, setView] = useState('register'); // 'register' or 'claim'
  const [keyFile, setKeyFile] = useState(null);
  const [claimPassword, setClaimPassword] = useState('');
  const [keyFilePassword, setKeyFilePassword] = useState('');

  const handleRegister = async (e) => {
    e.preventDefault();
    setError('');
    if (password !== password2) {
      setError("Passwords do not match.");
      return;
    }

    try {
      await apiClient.post('/api/register/', {
        username,
        password,
        nickname,
        security_question_1: question1,
        security_answer_1: answer1,
        security_question_2: question2,
        security_answer_2: answer2,
      });
      onRegisterSuccess();
    } catch (err) {
      if (err.response && err.response.status === 409 && err.response.data.error.endsWith('_exists_as_federated')) {
        setError(err.response.data.detail);
        setView('claim');
      } else if (err.response && err.response.data) {
        const errorData = err.response.data;
        const messages = Object.values(errorData).flat();
        setError(messages.join(' ') || 'An unexpected error occurred during registration.');
      } else {
        setError('An unexpected error occurred during registration.');
      }
      console.error(err);
    }
  };

  const handleClaim = async (e) => {
    e.preventDefault();
    setError('');
    if (!keyFile) {
        setError('Please select your private key file to continue.');
        return;
    }
    const formData = new FormData();
    // --- MODIFICATION START ---
    formData.append('username', username); // Send the desired username
    formData.append('nickname', nickname);
    // --- MODIFICATION END ---
    formData.append('new_password', claimPassword);
    formData.append('key_file', keyFile);
    if (keyFilePassword) {
        formData.append('key_file_password', keyFilePassword);
    }

    try {
        const response = await apiClient.post('/api/identity/claim/', formData, {
            headers: { 'Content-Type': 'multipart/form-data' }
        });
        localStorage.setItem('token', response.data.access);
        onRegisterSuccess();
    } catch (err) {
        setError(err.response?.data?.error || 'Failed to claim account. Please check your key file and password.');
    }
  };

  if (view === 'claim') {
    return (
        <div className="max-w-md mx-auto mt-10 p-8 bg-gray-800 rounded-lg">
            <div className="flex items-center text-4xl font-bold text-white mb-6 pb-2 border-b-2 border-gray-600">
                <img src="/axon.png" alt="Axon logo" className="h-24 w-24 mr-4"/>
                <h1>Claim Identity</h1>
            </div>
            <p className="text-yellow-300 bg-yellow-900 border border-yellow-700 p-3 rounded mb-4 text-sm">{error}</p>
            <form onSubmit={handleClaim}>
                <div className="mb-4">
                    <label className="block text-gray-300 text-sm font-bold mb-2">Nickname to Claim</label>
                    <input type="text" value={nickname} readOnly className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-900 text-gray-400 leading-tight focus:outline-none"/>
                </div>
                <div className="mb-4">
                    <label className="block text-gray-300 text-sm font-bold mb-2">Your Private Key File (.pem)</label>
                    <input type="file" onChange={e => setKeyFile(e.target.files[0])} accept=".pem" required className="block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-blue-600 file:text-white hover:file:bg-blue-700"/>
                </div>
                <div className="mb-4">
                    <label className="block text-gray-300 text-sm font-bold mb-2">Password for Key File (if encrypted)</label>
                    <input type="password" value={keyFilePassword} onChange={e => setKeyFilePassword(e.target.value)} placeholder="Leave blank if not encrypted" className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:shadow-outline"/>
                </div>
                <div className="mb-6">
                    <label className="block text-gray-300 text-sm font-bold mb-2">New Password for this BBS</label>
                    <input type="password" value={claimPassword} onChange={e => setClaimPassword(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:shadow-outline"/>
                </div>
                <div className="flex flex-col items-center justify-between">
                    <button type="submit" className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded w-full">Verify Key & Claim Account</button>
                    <button onClick={onNavigateToLogin} className="inline-block align-baseline font-bold text-sm text-blue-400 hover:text-blue-500 mt-4" type="button">Back to Login</button>
                </div>
            </form>
        </div>
    );
  }

  return (
    <div className="max-w-md mx-auto mt-10 p-8 bg-gray-800 rounded-lg">
      <div className="flex items-center text-4xl font-bold text-white mb-6 pb-2 border-b-2 border-gray-600">
        <img src="/axon.png" alt="Axon logo" className="h-24 w-24 mr-4"/>
        <h1>Register</h1>
      </div>
      <form onSubmit={handleRegister}>
        <div className="mb-4">
          <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="username">Username</label>
          <input className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200" id="username" type="text" value={username} onChange={(e) => setUsername(e.target.value)} required />
        </div>
        <div className="mb-4">
          <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="nickname">Nickname</label>
          <input className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200" id="nickname" type="text" value={nickname} onChange={(e) => setNickname(e.target.value)} required />
        </div>
        <div className="mb-4">
          <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="password">Password</label>
          <input className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200" id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
        </div>
        <div className="mb-6">
          <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="password2">Confirm Password</label>
          <input className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200" id="password2" type="password" value={password2} onChange={(e) => setPassword2(e.target.value)} required />
        </div>

        <div className="border-t border-gray-700 pt-4 mt-4">
            <p className="text-gray-400 text-sm mb-4">Set up two security questions for account recovery. Answers are case-sensitive.</p>
            <div className="mb-4">
                <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="question1">Security Question 1</label>
                <input id="question1" type="text" placeholder="e.g., What was your first pet's name?" value={question1} onChange={e => setQuestion1(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200"/>
            </div>
            <div className="mb-6">
                <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="answer1">Security Answer 1</label>
                <input id="answer1" type="password" value={answer1} onChange={e => setAnswer1(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200"/>
            </div>
            <div className="mb-4">
                <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="question2">Security Question 2</label>
                <input id="question2" type="text" placeholder="e.g., What city were you born in?" value={question2} onChange={e => setQuestion2(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200"/>
            </div>
            <div className="mb-6">
                <label className="block text-gray-300 text-sm font-bold mb-2" htmlFor="answer2">Security Answer 2</label>
                <input id="answer2" type="password" value={answer2} onChange={e => setAnswer2(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200"/>
            </div>
        </div>

        {error && <p className="text-red-500 text-xs italic mb-4">{error}</p>}
        <div className="flex flex-col items-center justify-between">
          <button className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded w-full" type="submit">Register</button>
          <button onClick={onNavigateToLogin} className="inline-block align-baseline font-bold text-sm text-blue-400 hover:text-blue-500 mt-4" type="button">Already have an account? Login</button>
        </div>
      </form>
    </div>
  );
};

export default RegisterScreen;

```

### File: axon_bbs/frontend/src/components/ReportModal.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/ReportModal.js
import React, { useState } from 'react';

const ReportModal = ({ message, show, onClose, onSubmit }) => {
  const [comment, setComment] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  if (!show) {
    return null;
  }

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    try {
      await onSubmit(message.id, comment);
      setSuccess('Report submitted successfully. A moderator will review it shortly.');
      setTimeout(() => {
        onClose();
        setComment('');
        setSuccess('');
      }, 2000); // Close modal after 2 seconds on success
    } catch (err) {
      setError(err.message || 'Failed to submit report.');
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
      <div className="bg-gray-800 p-6 rounded-lg shadow-xl w-full max-w-lg">
        <h2 className="text-2xl font-bold text-white mb-4">Report Message</h2>
        <div className="bg-gray-900 p-3 rounded mb-4 border border-gray-700">
            <p className="text-gray-400 text-sm">Subject: <span className="text-gray-200">{message.subject}</span></p>
            <p className="text-gray-400 text-sm">Author: <span className="text-gray-200">{message.author_display}</span></p>
        </div>
        
        {success && <div className="bg-green-800 border border-green-600 text-green-200 p-3 rounded mb-4">{success}</div>}
        
        <form onSubmit={handleSubmit}>
          <textarea
            placeholder="Provide a brief reason for your report (optional)..."
            value={comment}
            onChange={(e) => setComment(e.target.value)}
            rows="4"
            className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:shadow-outline mb-4"
          />
          {error && <p className="text-red-500 text-xs italic mb-4">{error}</p>}
          <div className="flex justify-end gap-4">
            <button type="button" onClick={onClose} className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">Cancel</button>
            <button type="submit" className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">Submit Report</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ReportModal;

```

### File: axon_bbs/frontend/src/components/UnlockForm.js
```
// Axon BBS - A modern, anonymous, federated bulletin board system.
// Copyright (C) 2025 Achduke7
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.


// Full path: axon_bbs/frontend/src/components/UnlockForm.js
import React, { useState } from 'react';
import apiClient from '../apiClient';

const UnlockForm = ({ onUnlock, onCancel }) => {
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  
  const handleUnlock = async (e) => {
    e.preventDefault();
    setError('');
    try {
      await apiClient.post('/api/identity/unlock/', { password });
      onUnlock();
    } catch (err) {
      setError('Unlock failed. Please check your password.');
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
      <div className="bg-gray-800 p-6 rounded-lg shadow-xl w-full max-w-sm">
        <h2 className="text-2xl font-bold text-white mb-4">Unlock Identity</h2>
        <p className="text-gray-400 mb-4">Enter your password to sign messages and download files for this session.</p>
        <form onSubmit={handleUnlock}>
          <input type="password" placeholder="Your Password" value={password} onChange={(e) => setPassword(e.target.value)} required className="shadow appearance-none border rounded w-full py-2 px-3 bg-gray-700 text-gray-200 leading-tight focus:outline-none focus:shadow-outline mb-4"/>
          {error && <p className="text-red-500 text-xs italic mb-4">{error}</p>}
          <div className="flex justify-end gap-4">
            <button type="button" onClick={onCancel} className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">Cancel</button>
            <button type="submit" className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Unlock</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UnlockForm;


```

### File: axon_bbs/handlers/__init__.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/handlers/__init__.py


```

### File: axon_bbs/handlers/audio_modem_handler.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/handlers/audio_modem_handler.py
import pyaudio
import numpy as np
import time
import os
import django

# -----------------------------------------------------------------------------
# Django Setup
# -----------------------------------------------------------------------------
def setup_django_env():
    """Initializes the Django environment to allow access to the models."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')
    django.setup()
    print("Django environment configured for Audio Modem Handler.")

# -----------------------------------------------------------------------------
# Audio Protocol Constants (AFSK - Audio Frequency-Shift Keying)
# -----------------------------------------------------------------------------
# These are placeholder values for a simple AFSK protocol.
# A real implementation like Gibberlink would be more complex.
CHUNK = 1024  # Samples per frame
FORMAT = pyaudio.paInt16  # Audio format
CHANNELS = 1  # Mono
RATE = 44100  # Samples per second
MARK_FREQ = 1200  # Frequency for a '1' bit
SPACE_FREQ = 2200 # Frequency for a '0' bit
BAUD_RATE = 300   # Bits per second
SAMPLES_PER_BIT = RATE // BAUD_RATE

# -----------------------------------------------------------------------------
# Core Audio Processing Logic
# -----------------------------------------------------------------------------

def demodulate(audio_chunk):
    """
    A conceptual function to demodulate an audio chunk.
    This is a highly simplified example. A real implementation would need
    to perform more sophisticated frequency analysis (e.g., with an FFT
    or a Goertzel algorithm) to reliably detect the mark/space tones.
    """
    # Calculate the average frequency of the chunk
    # NOTE: This is NOT a robust way to do FSK demodulation.
    # It's a placeholder to illustrate the concept.
    fft_data = np.fft.fft(audio_chunk)
    freqs = np.fft.fftfreq(len(fft_data))
    peak_freq_index = np.argmax(np.abs(fft_data))
    dominant_freq = abs(freqs[peak_freq_index] * RATE)

    # Simple decision logic
    if abs(dominant_freq - MARK_FREQ) < abs(dominant_freq - SPACE_FREQ):
        return '1'
    else:
        return '0'

def modulate(bit_string):
    """
    Generates an audio signal representing the given bit string.
    This function is a placeholder for future 'send' functionality.
    """
    # This part of the handler would generate MARK and SPACE tones
    # to send data back to the caller.
    print(f"[MODULATE] Would generate audio for: {bit_string}")
    return None # Placeholder

# -----------------------------------------------------------------------------
# Main Handler Execution
# -----------------------------------------------------------------------------

def run_modem_handler():
    """Initializes PyAudio and processes the incoming audio stream."""
    setup_django_env()
    # from core.services import handle_terminal_input  # Example import

    p = pyaudio.PyAudio()

    try:
        stream = p.open(format=FORMAT,
                        channels=CHANNELS,
                        rate=RATE,
                        input=True,
                        frames_per_buffer=CHUNK)
    except OSError as e:
        print("\n" + "="*60)
        print("COULD NOT OPEN AUDIO DEVICE.")
        print(f"PyAudio error: {e}")
        print("Please ensure an input device (microphone or line-in) is connected and configured.")
        print("="*60 + "\n")
        return

    print("\n[*] Audio Modem Handler Initialized.")
    print(f"[*] Listening on audio input at {RATE} Hz. Press Ctrl+C to exit.")

    frames = []
    bit_buffer = ""
    try:
        while True:
            data = stream.read(CHUNK)
            audio_as_int = np.frombuffer(data, dtype=np.int16)
            
            # This is where the demodulation would happen
            # For now, we'll just print that we're receiving data
            # A real implementation would aggregate chunks to form bits,
            # then bytes, then pass them to a terminal session handler.

            print(f"Received audio chunk of {len(audio_as_int)} samples.", end='\r')

    except KeyboardInterrupt:
        print("\n[!] Shutting down audio modem handler.")
    finally:
        stream.stop_stream()
        stream.close()
        p.terminate()

if __name__ == "__main__":
    run_modem_handler()


```

### File: axon_bbs/handlers/meshtastic_handler.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/handlers/meshtastic_handler.py

import os
import sys
import django
import time
import meshtastic
import meshtastic.serial_interface

# -----------------------------------------------------------------------------
# Django Environment Setup
# -----------------------------------------------------------------------------
def setup_django_env():
    """
    Initializes the Django environment so this standalone script can access
    the Django models and services from the main project.
    """
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    sys.path.append(project_root)
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'axon_project.settings')
    django.setup()
    print("Django environment initialized successfully.")

# -----------------------------------------------------------------------------
# Meshtastic Command Processor
# -----------------------------------------------------------------------------

class CommandProcessor:
    """
    Processes commands received from the Meshtastic network.
    """
    def __init__(self, mesh_interface):
        self.interface = mesh_interface
        # Import core models after Django is set up
        from core.models import User, Message, MessageBoard
        self.User = User
        self.Message = Message
        self.MessageBoard = MessageBoard

    def process_packet(self, packet, interface):
        """
        This is the callback function that gets called for each received packet.
        """
        if packet.get('decoded') and packet['decoded'].get('portnum') == 'TEXT_MESSAGE_APP':
            sender_id = packet['fromId']
            message_text = packet['decoded']['text']

            print(f"Received from {sender_id}: '{message_text}'")

            # Simple command parsing: !bbs <command> <args>
            if message_text.lower().startswith('!bbs '):
                parts = message_text.split(' ', 3)
                if len(parts) >= 2:
                    command = parts[1].lower()
                    
                    # --- Authenticate User ---
                    # In a real system, you'd map sender_id to a BBS user.
                    # For now, we'll use a hardcoded test user.
                    try:
                        user = self.User.objects.get(username='meshtastic_user')
                    except self.User.DoesNotExist:
                        self.send_reply("Error: 'meshtastic_user' not found in BBS.", sender_id)
                        return

                    # --- Process Commands ---
                    if command == 'post' and len(parts) == 4:
                        board_name = parts[2]
                        post_content = parts[3]
                        self.handle_post(user, board_name, post_content, sender_id)
                    elif command == 'boards':
                        self.handle_list_boards(user, sender_id)
                    else:
                        self.send_reply(f"Unknown command: '{command}'", sender_id)
                else:
                    self.send_reply("Invalid command format. Use: !bbs <command> [args]", sender_id)

    def handle_post(self, user, board_name, content, reply_to_id):
        """Handles posting a message to a board."""
        try:
            board = self.MessageBoard.objects.get(name__iexact=board_name)
            if user.sl >= board.required_sl:
                # Create the message in the BBS database
                Message.objects.create(
                    board=board,
                    author=user,
                    title=f"Post from {user.username}",
                    body=content
                )
                self.send_reply(f"Message posted to '{board.name}'.", reply_to_id)
            else:
                self.send_reply(f"Access denied to board '{board.name}'.", reply_to_id)
        except self.MessageBoard.DoesNotExist:
            self.send_reply(f"Error: Board '{board_name}' not found.", reply_to_id)

    def handle_list_boards(self, user, reply_to_id):
        """Handles listing available message boards."""
        boards = self.MessageBoard.objects.filter(required_sl__lte=user.sl)
        if boards:
            board_list = ", ".join([b.name for b in boards])
            self.send_reply(f"Boards: {board_list}", reply_to_id)
        else:
            self.send_reply("No accessible boards found.", reply_to_id)

    def send_reply(self, text, destination_id):
        """Sends a reply back to the user over the mesh."""
        print(f"Replying to {destination_id}: {text}")
        self.interface.sendText(text, destinationId=destination_id)

# -----------------------------------------------------------------------------
# Main Execution Block
# -----------------------------------------------------------------------------

if __name__ == "__main__":
    print("Starting Axon BBS Meshtastic Handler...")
    setup_django_env()

    try:
        # Initialize the connection to the Meshtastic device
        interface = meshtastic.serial_interface.SerialInterface()
        print("Connected to Meshtastic device.")
        
        # Instantiate the command processor
        processor = CommandProcessor(interface)

        # Register the callback function
        meshtastic.pub.subscribe(processor.process_packet, "meshtastic.receive")
        
        print("Listening for messages... Press Ctrl+C to exit.")
        while True:
            time.sleep(1)

    except meshtastic.MeshtasticException as e:
        print(f"Meshtastic error: {e}")
        print("Could not connect to Meshtastic device. Is it plugged in?")
    except KeyboardInterrupt:
        print("\nShutting down handler.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
    finally:
        if 'interface' in locals() and interface:
            interface.close()



```

### File: axon_bbs/handlers/tests/__init__.py
```
# Axon BBS - A modern, anonymous, federated bulletin board system.
# Copyright (C) 2025 Achduke7
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# axon_bbs/handlers/tests/__init__.py


```


--- END OF MANIFEST ---