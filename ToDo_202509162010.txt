Based on our recent work and the project requirements, here are the main features and tasks we could tackle next.

Finalizing Federated Profiles
This is the most direct continuation of our recent work. The system now creates update_profile actions when a user changes their nickname or avatar, but peer servers don't yet process these actions.

Task: Implement the backend logic in the SyncService to handle incoming update_profile actions.

Outcome: When a user on one BBS updates their profile, their new nickname and avatar will automatically appear on all other federated BBS instances after the next sync cycle. This will complete the federated identity feature. 


Deferred Frontend Tasks
These are the items we previously discussed but decided to address later. They are primarily user interface enhancements.


Credential Management: Add "Change Password" and "Reset Security Questions" forms to the Profile Page.


Moderator Approval Queue: Add a new section to the Moderation Dashboard where moderators can review and approve pending nickname and avatar changes from users.

Karma System (On Hold)
You previously asked to hold off on karma-related changes, but they remain as potential future tasks.


Display Karma Scores: Update the Profile Screen and Message List to display users' karma scores.


Manual Karma Adjustment: Build the backend API and frontend moderator tool to allow for manual adjustments of a user's karma.



how hard would it be to change the timezone view only to what ever the admin wants but when we transmit or store the data and time it stays in UTC?



Show thinking
That's a great idea, and it's a standard practice for web applications. It would be a low-to-medium difficulty task.

The good news is that the backend is already doing the hard part correctly by storing and transmitting everything in 

UTC. This means we only need to make changes to the "display layer" (the frontend) and add a way for the admin to specify their preferred timezone.

Hereâ€™s what the process would look like:

1. Set the Display Timezone (Backend)
We would add a new variable to the axon_bbs/axon_project/settings.py file where an admin can define the desired display timezone.

For example, to set the display timezone to Eastern Daylight Time (like your current location), you would add this line:

Python

# settings.py
DISPLAY_TIMEZONE = 'America/New_York' 
2. Expose the Setting to the Frontend (Backend)
A new, simple API endpoint would be created. When the frontend application first loads, it would ask this endpoint which timezone it should use for displaying dates and times. The backend would simply read the DISPLAY_TIMEZONE variable from the settings file and send it back.

3. Format Dates in the Browser (Frontend)
Finally, the React frontend would be updated.

It would fetch the display timezone from the new API endpoint when it starts up.

Everywhere a date is shown (like on a message or in the private mail client), it would take the UTC timestamp received from the server and use the browser's built-in internationalization tools to format it into a readable string for the admin's chosen timezone.

This approach ensures the underlying data remains in the universal UTC format while providing a localized and user-friendly experience on the frontend.
