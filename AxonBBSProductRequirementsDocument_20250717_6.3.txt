Axon BBS - Consolidated Product Requirements Document
Version: 6.3 (Updated)


Date: July 18, 2025 


Overview
Axon BBS is a modern, anonymous bulletin board system (BBS) inspired by the classic 90s BBS era. It leverages the Nostr protocol for all message and data distribution, ensuring censorship resistance and anonymity within its network. The system is built using Django for the backend and React for the frontend, with a focus on user privacy and security. 






Key updates since version 6.2: 

Enhanced Nostr integration: Support for multiple relays globally and per-message-board (up to 6 per board) for improved distribution and redundancy. 

Improved publishing resilience: Skips failed relays during posts, logs per-relay successes/failures, and returns detailed status in API responses. 

Timeout adjustments: Increased connection/open timeouts in Tor proxy for better handling of slow networks. 

Error handling: Frontend now shows specific errors like "Could not post message to any relays" if all publishes fail. 

Logging: Added file-based logging for Nostr operations to persist debug info. 


User Roles & Stories 


As a User...

I want to generate a new Nostr identity or import my existing one so I can control my account. 


I want to unlock my Nostr identity with my password once per session, so I don't have to re-enter it for every action. 


I want to send and receive end-to-end encrypted private messages. 


I want to post on public message boards and read posts from others. 


I want to upload and download files. 


I want to stream large video and audio files without downloading the entire file first. 


I want a personal ignore list to hide all content from users I don't want to interact with. 


I want a list of my content so I can request a pinning extension from moderators. 


I want to request an extension on the lifespan of my content before it is deleted. 


I want to receive notifications when my content is about to expire so I can request an extension. 


As a Moderator...

I want to be able to temporarily or permanently ban unruly users from the local BBS instance. 


I want to review and approve or deny user requests for extending the pin duration of their content. 


I want to review and approve or deny user requests for extending the lifespan of their content. 


I want to be able to unpin any user's content to enforce content policies, except for content pinned by an Admin. 


As a SysOp (Admin)...

I want all the powers of a Moderator. 


I want to be able to override pinning rules for any content. 


I want to configure which external Nostr relays our BBS connects to, both globally and per-message-board (up to 6 per board). 


I want to set the default time durations for how long content is stored on my BBS. 


I want to manage a whitelist of trusted federated BBS instances to ensure network security. 


I want to be able to unpin any content on the server, including content pinned by moderators. 



Key Features 


User Registration and Authentication

Users can register with a username and password. Passwords are hashed and salted for security. 


API endpoints are secured using JWT authentication. 


Nostr Identity Management

The user interface MUST provide the ability for users to generate a new Nostr public/private key pair. 


The user interface MUST allow users to import an existing Nostr private key (nsec...). 


Upon user registration, a Nostr private key is generated and stored on the server in an encrypted format. 


To perform actions requiring a signature (e.g., posting a message), the user must first unlock their identity using their password in a session-based model. 


Once unlocked, the user's unencrypted private key will be held in the server's memory for the duration of the active session. 


This is a deliberate trade-off, prioritizing user convenience. 


The unencrypted private key MUST be immediately purged from memory when the user logs out, their session expires, or the server is shut down. 


Message Boards

The system supports multiple message boards. 


Boards are defined by names, descriptions, and required access levels. 


Each board can have up to 6 custom Nostr relays for publishing/subscribing events, with fallback to global relays. 

Publishing to relays is resilient: Failures on individual relays are skipped and logged, ensuring partial success if at least one works. 

Federated BBS Network (Private File Sync)

Concept: Trusted Axon BBS nodes can form a private, federated network to synchronize files for resilience and redundancy. 


Mechanism (Hybrid Encryption): The system uses a secure "digital envelope" model to broadcast a single data chunk to multiple trusted relays. 


For each data chunk, a random, single-use symmetric key is generated. 

The chunk is encrypted once with this session key. 

The session key is then encrypted multiple times, once for each recipient relay's public key. 

A single Nostr event contains the encrypted data chunk and the list of encrypted session keys. This single event is broadcast to all private relays. 


Decryption: Each receiving relay finds the envelope it can decrypt with its private key, retrieves the session key, and then decrypts the main data chunk. 

Key Revocation: A relay's access is revoked by no longer including an envelope for its public key in future messages. 


Federation Trust and Security: Federation will be managed via a whitelist of trusted Axon BBS instances, configurable by SysOps. 


Data sync events between instances must be authenticated using public keys to verify the source. 

The system must include rate-limiting and content validation for incoming data sync events to prevent abuse. 

Anonymity and Privacy

All external network communications are routed through Tor. 


The server's SECRET_KEY is stored securely in an .env file. 


External Link Policy: To prevent IP address leakage, links to external websites posted by users MUST NOT be rendered as clickable hyperlinks ( tags). 


They should be displayed as plain text, requiring the user to consciously copy and paste the link into their browser. 


File Handling and Viewing

Live Reassembly: For standard downloads, the React frontend will request all of a file's chunks from the backend and reassemble them live in the browser to create a downloadable file (Blob). 


Streaming for Media: For large media files (video/audio), the frontend will use a streaming approach. It will request chunks sequentially and feed them into a media player using the Media Source Extensions API. This provides a fast start time and low memory usage. 





Content Lifecycle and Storage

Content Storage Model: The Axon BBS nodes themselves are the sole storage layer for all content. 


The Nostr relays act only as a real-time transport layer. 


Files are stored as individual, encrypted chunks and are not reassembled on the server's filesystem. Reassembly is handled by the client application on demand. 




Content Lifecycle Policies (Trash Collection): The Time-to-Live (TTL) for all content is configurable by the SysOp. A scheduled task performs "trash collection," deleting content that has exceeded its TTL. 


Private Messages: TTL of 3 months. 


Message Board Posts: TTL of 1 month. 


Uploaded Files: TTL of 1 week by default. 


Federated Content: TTL of 3 days. 


Moderator Pins: Content pinned by a Moderator has a TTL of 1 month. 


Admin Pins: Can be set to a default of 1 month, but Admins have the authority to change or remove the expiration for any pinned object. 


Content Persistence Extension: Users can request a 30-day extension for any of their content. These requests appear in a queue for Moderators and SysOps to approve or deny. 




Content Removal and Unpinning Rules:

Users: Can only unpin (request deletion of) their own content. 

Moderators: Can unpin any user's content but CANNOT unpin content pinned by an Admin. 

Admins: Can unpin any content on the server, including content pinned by Moderators. 

Moderation and Compliance

Content Policy and Compliance: A clear content policy must be defined, outlining prohibited content types and procedures for handling reports. The platform must implement a DMCA-compliant takedown process, allowing SysOps to unpin and flag reported content. Moderation tools will include automated scanning and a review queue for reported content. 





Platform-Level Ban System: Admins and Moderators MUST have the ability to "ban" a user's Nostr public key. A ban can be temporary (with a set expiration date) or permanent. When a user is banned, the Axon BBS server MUST refuse to accept or broadcast any Nostr events signed by that user's key. It will also unpin all of their content from the local IPFS node. 





User-Level Ignore System (Ghosting): Each user MUST have a personal "ignore list" where they can add other users' Nostr public keys. The Axon BBS client application MUST filter out all content from ignored public keys. 




Connectivity and User Experience

Alternative Connection Handlers: The BBS instance will act as a privacy proxy for users connecting via non-internet native handlers (e.g., Audio Modem, Meshtastic). For these users, the BBS will publish its own public network address (its .onion address) as the user's "home," effectively hiding the user's true connection method from the wider network. 




User Onboarding and Education: To address the complexity of the underlying decentralized technologies, the platform must prioritize user education. An onboarding flow will guide new users through key concepts like generating Nostr keys and understanding the federated network. An in-app help section will provide FAQs, a glossary of terms, and links to advanced resources. User notifications will provide critical information, such as warnings about key loss or reminders about content expiration. Comprehensive guides will be provided for SysOps on configuring all underlying services (Tor, Nostr). 





Performance and Monitoring

The system will integrate monitoring tools like Prometheus and Grafana to track the health of the Nostr relay connections, and Tor network latency. 


Secure, detailed error logging will be implemented to capture critical failures without exposing user data. 


The user interface will provide basic status indicators to inform users of the current connection health to Nostr. 



Technical Requirements & File Structure 


Technical Stack

Backend: Django 5.2.4, Python 3.13 


Frontend: React 18+, Tailwind CSS 


Streaming Media: Playback will be implemented using a library that supports Media Source Extensions, such as hls.js or shaka-player. 



Project File Structure 




axon_bbs/
├── axon_project/ # Django Project Configuration 



│ ├── settings.py 



│ └── urls.py 




│
├── core/ # BBS Core Engine 



│ ├── admin.py 



│ ├── apps.py 



│ ├── models.py 



│ └── services/ # Integrated Services 



│ ├── encryption_utils.py 



│ ├── identity_service.py 



│ ├── nostr_service.py 



│ ├── service_manager.py 



│ └── tor_service.py 




│
├── api/ # Web Handler / RESTful API 



│ ├── urls.py 



│ └── views.py 




│
├── handlers/ # Alternative Connection Handlers 



│ ├── audio_modem_handler.py 



│ └── meshtastic_handler.py 




│
├── frontend/ # Web Front-End (React) 



│ ├── public/ 


│ │ └── index.html 


│ ├── src/ 


│ │ ├── components/ 


│ │ ├── App.js 


│ │ └── apiClient.js 


│ └── package.json 



│
├── data/ # Application Data (SQLite DB) 



│
├── manage.py # Django's command-line utility 


└── requirements.txt # Python package dependencies 



Future Enhancements 


Threaded discussions (Nostr replies). 


User profiles on Nostr. 


Unique tags for boards (e.g., "axon-general") to filter out public Nostr noise. 


Summary of IPFS removal impact and consolidation:

All explicit mentions of IPFS for content storage have been removed from the "Overview," "Key Features," "User Roles & Stories," and "Technical Requirements & File Structure" sections.

The "Persistence with IPFS" section from earlier PRDs has been completely replaced with "Content Lifecycle and Storage" which now describes how Axon BBS nodes themselves will store content as encrypted chunks, with Nostr relays serving purely as a transport layer.

The concept of "pinning" has been retained but recontextualized to refer to the local storage duration and management on Axon BBS nodes, rather than IPFS pinning.

The "Federated BBS Network (Private File Sync)" section has been updated to reflect file synchronization directly between trusted Axon BBS nodes using the "digital envelope" method over Nostr, rather than relying on IPFS for this.

The "Project File Structure" no longer includes any IPFS-specific service files (e.g., ipfs_service.py).

All other features, user stories, and technical requirements present in version 6.2 (and earlier relevant versions that were still applicable after IPFS removal) have been carried over to this consolidated version 6.3.

This version 6.3 now accurately reflects the removal of IPFS and the shift to direct node-to-node file synchronization via Nostr events for federation, while ensuring all previously defined functional and non-functional requirements are still met.
